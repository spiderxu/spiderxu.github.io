<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/p/0.html"/>
      <url>/p/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中Stream流的用法</title>
      <link href="/p/8c6247b1.html"/>
      <url>/p/8c6247b1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java8之后新增Stream流。配合同版本出现的 Lambda表达式 ，给我们操作集合（Collection）提供了极大的便利。</p><p>Stream将要处理的元素集合看作一种流，在流的过程中，借助Stream API对流中的元素进行操作，比如：筛选、排序、聚合等。Stream可以由数组或集合创建，对流的操作分为两种</p><ul><li>中间操作，每次返回一个新的流，可以有多个。</li><li>终端操作，每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值。</li></ul><p>另外，Stream有几个特性：</p><ul><li>stream不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果。</li><li>stream不会改变数据源，通常情况下会产生一个新的集合或一个值</li><li>stream具有延迟执行特性，只有调用终端操作时，中间操作才会执行。</li></ul><h2 id="Stream流如何创建"><a href="#Stream流如何创建" class="headerlink" title="Stream流如何创建"></a>Stream流如何创建</h2><p>单例集合：集合对象.stream()</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>数组：Arrays.stream(数组) 或 Stream.of(数组) 来创建</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>双例集合：转换成单例集合后再创建</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stream3 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><p>创建一个Maven项目，pom.xml中引入lombok的依赖，并且idea安装lombok插件</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>创建Author类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token comment">//等效于 @Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode。</span><span class="token comment">//get方法、set方法、final修改或者@Notnull修饰字段的构造函数、toString方法、重写equals和hashCode方法</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Author</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//id</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">//姓名</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//年龄</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token comment">//简介</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> intro<span class="token punctuation">;</span>    <span class="token comment">//作品</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> books<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>创建Book类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token comment">//等效于 @Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode。</span><span class="token comment">//get方法、set方法、final修改或者@Notnull修饰字段的构造函数、toString方法、重写equals和hashCode方法</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//id</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">//书名</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>     <span class="token comment">//分类</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> category<span class="token punctuation">;</span>     <span class="token comment">//评分</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> score<span class="token punctuation">;</span>     <span class="token comment">//简介</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> intro<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><p>准备测试数据，专门准备一个工具类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//数据初始化</span>        <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span><span class="token string">"蒙多"</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token string">"一个从菜刀中明悟哲理的祖安人"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Author</span> author2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span><span class="token string">"亚拉索"</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">"狂风也追逐不上他的思考速度"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Author</span> author3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span><span class="token string">"易"</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">"是这个世界在限制他的思维"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Author</span> author4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span><span class="token string">"易"</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">"是这个世界在限制他的思维"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//书籍列表</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> books1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> books2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> books3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span><span class="token string">"刀的两侧是光明与黑暗"</span><span class="token punctuation">,</span><span class="token string">"哲学,爱情"</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token string">"用一把刀划分了爱恨"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span><span class="token string">"一个人不能死在同一把刀下"</span><span class="token punctuation">,</span><span class="token string">"个人成长,爱情"</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token string">"讲述如何从失败中明悟真理"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span><span class="token string">"那风吹不到的地方"</span><span class="token punctuation">,</span><span class="token string">"哲学"</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token string">"带你用思维去领略世界的尽头"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span><span class="token string">"那风吹不到的地方"</span><span class="token punctuation">,</span><span class="token string">"哲学"</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token string">"带你用思维去领略世界的尽头"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">4L</span><span class="token punctuation">,</span><span class="token string">"吹或不吹"</span><span class="token punctuation">,</span><span class="token string">"爱情,个人传记"</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token string">"一个哲学家的恋爱观注定很难把他所在的时代理解"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">5L</span><span class="token punctuation">,</span><span class="token string">"你的剑就是我的剑"</span><span class="token punctuation">,</span><span class="token string">"爱情"</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token string">"无法想象一个武者能对他的伴侣这么的宽容"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">6L</span><span class="token punctuation">,</span><span class="token string">"风与剑"</span><span class="token punctuation">,</span><span class="token string">"个人传记"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">6L</span><span class="token punctuation">,</span><span class="token string">"风与剑"</span><span class="token punctuation">,</span><span class="token string">"个人传记"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        author<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span>books1<span class="token punctuation">)</span><span class="token punctuation">;</span>        author2<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span>books2<span class="token punctuation">)</span><span class="token punctuation">;</span>        author3<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span>books3<span class="token punctuation">)</span><span class="token punctuation">;</span>        author4<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span>books3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span>author2<span class="token punctuation">,</span>author3<span class="token punctuation">,</span>author4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> authorList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h2><h3 id="1、filter"><a href="#1、filter" class="headerlink" title="1、filter"></a>1、filter</h3><p>对流中的元素进行条件过滤，将一个流转换成另一个子集流，从而进行所需的相关过滤</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 筛选出年龄大于18岁的作者     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token comment">//中间操作</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//终结操作</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="2、map"><a href="#2、map" class="headerlink" title="2、map"></a>2、map</h3><p>可以把流中的元素进行计算或转换，然后生成一个新的流</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 打印所有作家的姓名 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//终结操作</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3、distinct"><a href="#3、distinct" class="headerlink" title="3、distinct"></a>3、distinct</h3><p>可以去除流中的重复元素。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 打印所有作家的姓名(去重)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//中间操作</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//中间操作</span><span class="token comment">//                .forEach(name -> System.out.println(name));</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//终结操作</span>    <span class="token punctuation">&#125;</span></code></pre><p> 注意：distinct方法里面的去重逻辑是依赖Object的equals方法来判断是否是相同对象的。所以需要注意重写equals方法。</p><h3 id="4、sorted"><a href="#4、sorted" class="headerlink" title="4、sorted"></a>4、sorted</h3><p>本方法主要用于排序，可以使用Comparator接口进行定制排序</p><p><em>方式一:</em> 实现类实现Comporator接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token comment">//等效于 @Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode。</span><span class="token comment">//get方法、set方法、final修改或者@Notnull修饰字段的构造函数、toString方法、重写equals和hashCode方法</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Author</span> <span class="token keyword">implements</span>  <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//id</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">//姓名</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//年龄</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token comment">//简介</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> intro<span class="token punctuation">;</span>    <span class="token comment">//作品</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> books<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Author</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_sort01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p><em>方式二:</em> 直接在sort方法里面实现排序逻辑</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_sort02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h3 id="5、limit"><a href="#5、limit" class="headerlink" title="5、limit"></a>5、limit</h3><p>可以设置流的最大长度，超出的部分将被抛弃。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素,然后打印其中年龄最大的两个作家的姓名。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-></span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="6、skip"><a href="#6、skip" class="headerlink" title="6、skip"></a>6、skip</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 打印除了年龄最大的作家外的其他作家，要求不能有重复元素，并且按照年龄降序排序。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_skip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="7、floatMap"><a href="#7、floatMap" class="headerlink" title="7、floatMap"></a>7、floatMap</h3><p>map只能把一个对象转换成另一个对象来作为流中的元素。而flatMap可以把一个对象转换成多个对象作为流中的元素。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 打印所有书籍的名字。要求对重复的元素进行去重。    */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_flatMap01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>book <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 打印现有数据的所有分类。要求对分类进行去重。不能出现这种格式：哲学,爱情    */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_flatMap02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>book <span class="token operator">-></span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>category <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h2 id="终结操作"><a href="#终结操作" class="headerlink" title="终结操作"></a>终结操作</h2><h3 id="1、forEach"><a href="#1、forEach" class="headerlink" title="1、forEach"></a>1、forEach</h3><p>对流中的元素进行遍历操作，我们通过传入的参数去指定对遍历到的元素进行什么具体操作。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 输出所有作家的名字     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//        输出所有作家的名字</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name<span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="2、count"><a href="#2、count" class="headerlink" title="2、count"></a>2、count</h3><p>可以用来获取当前流中元素的个数。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 打印这些作家的所出书籍的数目，注意删除重复元素。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//        打印这些作家的所出书籍的数目，注意删除重复元素。</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="3、max-amp-min"><a href="#3、max-amp-min" class="headerlink" title="3、max&amp;min"></a>3、max&amp;min</h3><p>可以用来或者流中的最值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 分别获取这些作家的所出书籍的最高分和最低分并打印。   */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_max_min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//        分别获取这些作家的所出书籍的最高分和最低分并打印</span>      <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>book <span class="token operator">-></span> book<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1<span class="token operator">-</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> min <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>book <span class="token operator">-></span> book<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1<span class="token operator">-</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><h3 id="4、collect"><a href="#4、collect" class="headerlink" title="4、collect"></a>4、collect</h3><p>把当前流转换成一个集合。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 获取一个存放所有作者名字的List集合。    */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_collect01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//        获取一个存放所有作者名字的List集合。</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 获取一个所有书名的Set集合。    */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_collect02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>book <span class="token operator">-></span> book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 获取一个Map集合，map的key为作者名，value为List&lt;Book>    */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_collect03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span><span class="token punctuation">></span></span> map <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h3 id="5、anyMatch"><a href="#5、anyMatch" class="headerlink" title="5、anyMatch"></a>5、anyMatch</h3><p>可以用来判断是否有任意符合匹配条件的元素，结果为boolean类型。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 判断是否有年龄在29以上的作家 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="6、allMatch"><a href="#6、allMatch" class="headerlink" title="6、allMatch"></a>6、allMatch</h3><p>可以用来判断是否都符合匹配条件，结果为boolean类型。如果都符合结果为true，否则结果为false。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 可以用来判断是否都符合匹配条件，结果为boolean类型。如果都符合结果为true，否则结果为false。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_allMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="7、nonematch"><a href="#7、nonematch" class="headerlink" title="7、nonematch"></a>7、nonematch</h3><p>可以判断流中的元素是否都不符合匹配条件。如果都不符合结果为true，否则结果为false</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 判断作家有没有超过100岁的   */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_noneMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><h3 id="8、findAny"><a href="#8、findAny" class="headerlink" title="8、findAny"></a>8、findAny</h3><p>获取流中的任意一个元素。该方法没有办法保证获取的一定是流中的第一个元素。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 获取任意一个年龄大于18的作家，如果存在就输出他的名字    */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> any <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>any<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h3 id="9、findFirst"><a href="#9、findFirst" class="headerlink" title="9、findFirst"></a>9、findFirst</h3><p>获取流中的第一个元素。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 获取一个年龄最小的作家，并输出他的姓名。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> first <span class="token operator">=</span> <span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        first<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是Stream流的一些常规方法的运用</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/p/91ad9ce3.html"/>
      <url>/p/91ad9ce3.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。</p><h2 id="二、结构"><a href="#二、结构" class="headerlink" title="二、结构"></a>二、结构</h2><p>原型模式包含如下角色：</p><ul><li>抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。</li><li>具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。</li><li>访问类：使用具体原型类中的 clone() 方法来复制新的对象。<br>接口类图如下：<br><img src="/images/internet/design/create/5-1.jpg"></li></ul><h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><p>原型模式的克隆分为浅克隆和深克隆。<br>浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。<br>深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。<br>Java中的Object类中提供了 clone() 方法来实现浅克隆。 Cloneable 接口是上面的类图中的抽象原型类，而实现了Cloneable接口的子实现类就是具体的原型类。代码如下：<br>Realizetype（具体的原型类）：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Realizetype</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Realizetype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体的原型对象创建完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Realizetype</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体原型复制成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Realizetype</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>PrototypeTest（测试访问类）：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrototypeTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Realizetype</span> r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Realizetype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Realizetype</span> r2 <span class="token operator">=</span> r1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象r1和r2是同一个对象？"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>r1 <span class="token operator">==</span> r2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="四、案例"><a href="#四、案例" class="headerlink" title="四、案例"></a>四、案例</h2><p>用原型模式生成“三好学生”奖状<br>同一学校的“三好学生”奖状除了获奖人姓名不同，其他都相同，可以使用原型模式复制多个“三好学生”奖状出来，然后在修改奖状上的名字即可。<br>类图如下：<br><img src="/images/internet/design/create/5-2.jpg"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//奖状类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Citation</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"同学：在2020学年第一学期中表现优秀，被评为三好学生。特发此状！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Citation</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Citation</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//测试访问类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CitationTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Citation</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Citation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//复制奖状</span>        <span class="token class-name">Citation</span> c2 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将奖状的名字修改李四</span>        c2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="五、使用场景"><a href="#五、使用场景" class="headerlink" title="五、使用场景"></a>五、使用场景</h2><ul><li>对象的创建非常复杂，可以使用原型模式快捷的创建对象。</li><li>性能和安全要求比较高。</li></ul><h2 id="六扩展（深克隆）"><a href="#六扩展（深克隆）" class="headerlink" title="六扩展（深克隆）"></a>六扩展（深克隆）</h2><p>将上面的“三好学生”奖状的案例中Citation类的name属性修改为Student类型的属性。代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//奖状类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Citation</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Student</span> stu<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">getStu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stu<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStu</span><span class="token punctuation">(</span><span class="token class-name">Student</span> stu<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stu <span class="token operator">=</span> stu<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"同学：在2020学年第一学期中表现优秀，被评为三好学生。特发此状！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Citation</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Citation</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//学生类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CitationTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Citation</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Citation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"西安"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setStu</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//复制奖状</span>        <span class="token class-name">Citation</span> c2 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取c2奖状所属学生对象</span>        <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> c2<span class="token punctuation">.</span><span class="token function">getStu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断stu对象和stu1对象是否是同一个对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stu和stu1是同一个对象？"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>stu <span class="token operator">==</span> stu1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果为：<br><img src="/images/internet/design/create/5-3.jpg"></p><p>说明：<br>    stu对象和stu1对象是同一个对象，就会产生将stu1对象中name属性值改为“李四”，两个Citation（奖状）对象中显示的都是李四。这就是浅克隆的效果，对具体原型类（Citation）中的引用类型的属性进行引用的复制。这种情况需要使用深克隆，而进行深克隆需要使用对象流。代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CitationTest1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Citation</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Citation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"西安"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setStu</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建对象输出流对象</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将c1对象写出到文件中</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建对象出入流对象</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取对象</span>        <span class="token class-name">Citation</span> c2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Citation</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取c2奖状所属学生对象</span>        <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> c2<span class="token punctuation">.</span><span class="token function">getStu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断stu对象和stu1对象是否是同一个对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stu和stu1是同一个对象？"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>stu <span class="token operator">==</span> stu1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果为：<br><img src="/images/internet/design/create/5-4.jpg"></p><p>注意：Citation类和Student类必须实现Serializable接口，否则会抛NotSerializableException异常。</p>]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 设计模式 </category>
          
          <category> 创建型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/p/fe816c3c.html"/>
      <url>/p/fe816c3c.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。</p><ul><li>分离了部件的构造(由Builder来负责)和装配(由Director负责)。 从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况。</li><li>由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。</li><li>建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</li></ul><h2 id="二、结构"><a href="#二、结构" class="headerlink" title="二、结构"></a>二、结构</h2><p>建造者（Builder）模式包含如下角色：</p><ul><li>抽象建造者类（Builder）：这个接口规定要实现复杂对象的那些部分的创建，并不涉及具体的部件对象的创建。 </li><li>具体建造者类（ConcreteBuilder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。在构造过程完成后，提供产品的实例。 </li><li>产品类（Product）：要创建的复杂对象。</li><li>指挥者类（Director）：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。<br>类图如下：<br><img src="/images/internet/design/create/4-1.jpg"></li></ul><h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><p>创建共享单车<br>生产自行车是一个复杂的过程，它包含了车架，车座等组件的生产。而车架又有碳纤维，铝合金等材质的，车座有橡胶，真皮等材质。对于自行车的生产就可以使用建造者模式。<br>这里Bike是产品，包含车架，车座等组件；Builder是抽象建造者，MobikeBuilder和OfoBuilder是具体的建造者；Director是指挥者。类图如下：<br><img src="/images/internet/design/create/4-2.jpg"></p><p>具体的代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//自行车类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bike</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> frame<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> seat<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> frame<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFrame</span><span class="token punctuation">(</span><span class="token class-name">String</span> frame<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>frame <span class="token operator">=</span> frame<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seat<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSeat</span><span class="token punctuation">(</span><span class="token class-name">String</span> seat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seat <span class="token operator">=</span> seat<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽象 builder 类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name">Bike</span> mBike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Bike</span> <span class="token function">createBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//摩拜单车Builder类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MobikeBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mBike<span class="token punctuation">.</span><span class="token function">setFrame</span><span class="token punctuation">(</span><span class="token string">"铝合金车架"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mBike<span class="token punctuation">.</span><span class="token function">setSeat</span><span class="token punctuation">(</span><span class="token string">"真皮车座"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Bike</span> <span class="token function">createBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mBike<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//ofo单车Builder类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfoBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mBike<span class="token punctuation">.</span><span class="token function">setFrame</span><span class="token punctuation">(</span><span class="token string">"碳纤维车架"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mBike<span class="token punctuation">.</span><span class="token function">setSeat</span><span class="token punctuation">(</span><span class="token string">"橡胶车座"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Bike</span> <span class="token function">createBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mBike<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//指挥者类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Builder</span> mBuilder<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Director</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mBuilder <span class="token operator">=</span> builder<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Bike</span> <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mBuilder<span class="token punctuation">.</span><span class="token function">buildFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mBuilder<span class="token punctuation">.</span><span class="token function">buildSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mBuilder<span class="token punctuation">.</span><span class="token function">createBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">showBike</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showBike</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MobikeBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showBike</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Director</span> director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bike</span> bike <span class="token operator">=</span> director<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bike<span class="token punctuation">.</span><span class="token function">getFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bike<span class="token punctuation">.</span><span class="token function">getSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注意：<br>上面示例是 Builder模式的常规用法，指挥者类 Director 在建造者模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用者返回完整的产品类，但是有些情况下需要简化系统结构，可以把指挥者类和抽象建造者进行结合</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽象 builder 类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name">Bike</span> mBike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Bike</span> <span class="token function">createBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Bike</span> <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>BuildSeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>说明：<br>这样做确实简化了系统结构，但同时也加重了抽象建造者类的职责，也不是太符合单一职责原则，如果construct() 过于复杂，建议还是封装到 Director 中。</p><h2 id="四、优缺点"><a href="#四、优缺点" class="headerlink" title="四、优缺点"></a>四、优缺点</h2><p>优点：</p><ul><li>建造者模式的封装性很好。使用建造者模式可以有效的封装变化，在使用建造者模式的场景中，一般产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指挥者类中对整体而言可以取得比较好的稳定性。</li><li>在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</li><li>可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li><li>建造者模式很容易进行扩展。如果有新的需求，通过实现一个新的建造者类就可以完成，基本上不用修改之前已经测试通过的代码，因此也就不会对原有功能引入风险。符合开闭原则。</li></ul><p>缺点：<br>造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</p><h2 id="五、使用场景"><a href="#五、使用场景" class="headerlink" title="五、使用场景"></a>五、使用场景</h2><p>建造者（Builder）模式创建的是复杂对象，其产品的各个部分经常面临着剧烈的变化，但将它们组合在一起的算法却相对稳定，所以它通常在以下场合使用。</p><ul><li>创建的对象较复杂，由多个部件构成，各部件面临着复杂的变化，但构件间的建造顺序是稳定的。</li><li>创建复杂对象的算法独立于该对象的组成部分以及它们的装配方式，即产品的构建过程和最终的表示是独立的。</li></ul><h2 id="六、模式扩展"><a href="#六、模式扩展" class="headerlink" title="六、模式扩展"></a>六、模式扩展</h2><p>建造者模式除了上面的用途外，在开发中还有一个常用的使用方式，就是当一个类构造器需要传入很多参数时，如果创建这个类的实例，代码可读性会非常差，而且很容易引入错误，此时就可以利用建造者模式进行重构。<br>重构前代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cpu<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> screen<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> memory<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mainboard<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token class-name">String</span> cpu<span class="token punctuation">,</span> <span class="token class-name">String</span> screen<span class="token punctuation">,</span> <span class="token class-name">String</span> memory<span class="token punctuation">,</span> <span class="token class-name">String</span> mainboard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>screen <span class="token operator">=</span> screen<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> memory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainboard <span class="token operator">=</span> mainboard<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cpu<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCpu</span><span class="token punctuation">(</span><span class="token class-name">String</span> cpu<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> screen<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScreen</span><span class="token punctuation">(</span><span class="token class-name">String</span> screen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>screen <span class="token operator">=</span> screen<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> memory<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemory</span><span class="token punctuation">(</span><span class="token class-name">String</span> memory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> memory<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMainboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mainboard<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMainboard</span><span class="token punctuation">(</span><span class="token class-name">String</span> mainboard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainboard <span class="token operator">=</span> mainboard<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Phone&#123;"</span> <span class="token operator">+</span>                <span class="token string">"cpu='"</span> <span class="token operator">+</span> cpu <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", screen='"</span> <span class="token operator">+</span> screen <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", memory='"</span> <span class="token operator">+</span> memory <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", mainboard='"</span> <span class="token operator">+</span> mainboard <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//构建Phone对象</span>        <span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token string">"intel"</span><span class="token punctuation">,</span><span class="token string">"三星屏幕"</span><span class="token punctuation">,</span><span class="token string">"金士顿"</span><span class="token punctuation">,</span><span class="token string">"华硕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上面在客户端代码中构建Phone对象，传递了四个参数，如果参数更多呢？代码的可读性及使用的成本就是比较高。<br>重构后代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cpu<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> screen<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> memory<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mainboard<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cpu <span class="token operator">=</span> builder<span class="token punctuation">.</span>cpu<span class="token punctuation">;</span>        screen <span class="token operator">=</span> builder<span class="token punctuation">.</span>screen<span class="token punctuation">;</span>        memory <span class="token operator">=</span> builder<span class="token punctuation">.</span>memory<span class="token punctuation">;</span>        mainboard <span class="token operator">=</span> builder<span class="token punctuation">.</span>mainboard<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> cpu<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> screen<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> memory<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> mainboard<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">cpu</span><span class="token punctuation">(</span><span class="token class-name">String</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cpu <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">screen</span><span class="token punctuation">(</span><span class="token class-name">String</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            screen <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">memory</span><span class="token punctuation">(</span><span class="token class-name">String</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            memory <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">mainboard</span><span class="token punctuation">(</span><span class="token class-name">String</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mainboard <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Phone</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Phone&#123;"</span> <span class="token operator">+</span>                <span class="token string">"cpu='"</span> <span class="token operator">+</span> cpu <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", screen='"</span> <span class="token operator">+</span> screen <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", memory='"</span> <span class="token operator">+</span> memory <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", mainboard='"</span> <span class="token operator">+</span> mainboard <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cpu</span><span class="token punctuation">(</span><span class="token string">"intel"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">mainboard</span><span class="token punctuation">(</span><span class="token string">"华硕"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">memory</span><span class="token punctuation">(</span><span class="token string">"金士顿"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">screen</span><span class="token punctuation">(</span><span class="token string">"三星"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>重构后的代码在使用起来更方便，某种程度上也可以提高开发效率。从软件设计上，对程序员的要求比较高。</p>]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 设计模式 </category>
          
          <category> 创建型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建造者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/p/f1601c3e.html"/>
      <url>/p/f1601c3e.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><h2 id="单例模式的结构"><a href="#单例模式的结构" class="headerlink" title="单例模式的结构"></a>单例模式的结构</h2><p>单例模式的主要有以下角色：</p><ul><li>单例类。只能创建一个实例的类</li><li>访问类。使用单例类</li></ul><h2 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h2><p>单例设计模式分类两种：<br>饿汉式：类加载就会导致该单实例对象被创建<br>懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</p><h3 id="1-饿汉式-方式1（静态变量方式）"><a href="#1-饿汉式-方式1（静态变量方式）" class="headerlink" title="1.饿汉式-方式1（静态变量方式）"></a>1.饿汉式-方式1（静态变量方式）</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>demo1</span><span class="token punctuation">;</span><span class="token comment">/** * @version v1.0 * @ClassName: Singleton * @Description: *      饿汉式： 静态成员变量 * @Author: xuzhi */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1，私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//2，在本类中创建本类对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3，提供一个公共的访问方式，让外界获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>说明：该方式在成员位置声明Singleton类型的静态变量，并创建Singleton类的对象instance。instance对象是随着类的加载而创建的。如果该对象足够大的话，而一直没有使用就会造成内存的浪费。</p><h3 id="2-饿汉式-方式2（静态代码块方式）"><a href="#2-饿汉式-方式2（静态代码块方式）" class="headerlink" title="2.饿汉式-方式2（静态代码块方式）"></a>2.饿汉式-方式2（静态代码块方式）</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>demo2</span><span class="token punctuation">;</span><span class="token comment">/** * @version v1.0 * @ClassName: Singleton * @Description: * *      饿汉式 ： 静态代码块 * @Author: xuzhi */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//声明Singleton类型的变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span> <span class="token comment">//null</span>    <span class="token comment">//在静态代码块中进行赋值</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对外提供获取该类对象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>说明：该方式在成员位置声明Singleton类型的静态变量，而对象的创建是在静态代码块中，也是对着类的加载而创建。所以和饿汉式的方式1基本上一样，当然该方式也存在内存浪费问题。</p><p>成员变量和静态代码块的区别在于，静态代码块中还可以做别的操作。例如需要加载什么资源之类的。由于饿汉式在类加载的时候就创建好了，所以并不会存在线程安全问题</p><h3 id="3-懒汉式-方式1（线程不安全）"><a href="#3-懒汉式-方式1（线程不安全）" class="headerlink" title="3.懒汉式-方式1（线程不安全）"></a>3.懒汉式-方式1（线程不安全）</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 懒汉式 *  线程不安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//在成员位置创建该类的对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>说明：从上面代码我们可以看出该方式在成员位置声明Singleton类型的静态变量，并没有进行对象的赋值操作，那么什么时候赋值的呢？当调用getInstance()方法获取Singleton类的对象的时候才创建Singleton类的对象，这样就实现了懒加载的效果。但是，如果是多线程环境，会出现线程安全问题。</p><h3 id="4-懒汉式-方式2（线程安全）"><a href="#4-懒汉式-方式2（线程安全）" class="headerlink" title="4.懒汉式-方式2（线程安全）"></a>4.懒汉式-方式2（线程安全）</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 懒汉式 *  线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//在成员位置创建该类的对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>说明：该方式也实现了懒加载效果，同时又解决了线程安全问题。但是在getInstance()方法上添加了synchronized关键字，导致该方法的执行效果特别低。从上面代码我们可以看出，其实就是在初始化instance的时候才会出现线程安全问题，一旦初始化完成就不存在了。</p><h3 id="5-懒汉式-方式3（双重检查锁）"><a href="#5-懒汉式-方式3（双重检查锁）" class="headerlink" title="5.懒汉式-方式3（双重检查锁）"></a>5.懒汉式-方式3（双重检查锁）</h3><p>再来讨论一下懒汉模式中加锁的问题，对于 getInstance() 方法来说，绝大部分的操作都是读操作，读操作是线程安全的，所以我们没必让每个线程必须持有锁才能调用该方法，我们需要调整加锁的时机。由此也产生了一种新的实现模式：双重检查锁模式</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 双重检查方式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>   <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//第一次判断，如果instance不为null，不进入抢锁阶段，直接返回实例</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//抢到锁之后再次判断是否为null</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>双重检查锁模式是一种非常好的单例实现模式，解决了单例、性能、线程安全问题，上面的双重检测锁模式看上去完美无缺，其实是存在问题，在多线程的情况下，可能会出现空指针问题，出现问题的原因是JVM在实例化对象的时候会进行优化和指令重排序操作。</p><p>要解决双重检查锁模式带来空指针异常的问题，只需要使用 <code>volatile</code> 关键字, <code>volatile</code> 关键字可以保证可见性和有序性。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 双重检查方式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>   <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//第一次判断，如果instance不为null，不进入抢锁阶段，直接返回实际</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//抢到锁之后再次判断是否为空</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>小结：</p><p>添加 <code>volatile</code> 关键字之后的双重检查锁模式是一种比较好的单例实现模式，能够保证在多线程的情况下线程安全也不会有性能问题。</p><h3 id="6-懒汉式-方式4（静态内部类方式）"><a href="#6-懒汉式-方式4（静态内部类方式）" class="headerlink" title="6.懒汉式-方式4（静态内部类方式）"></a>6.懒汉式-方式4（静态内部类方式）</h3><p>静态内部类单例模式中实例由内部类创建，由于 JVM 在加载外部类的过程中, 是不会加载静态内部类的, 只有内部类的属性/方法被调用时才会被加载, 并初始化其静态属性。静态属性由于被 static 修饰，保证只被实例化一次，并且严格保证实例化顺序。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 静态内部类方式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>说明：第一次加载Singleton类时不会去初始化INSTANCE，只有第一次调用getInstance，虚拟机加载SingletonHolder</p><p>并初始化INSTANCE，这样不仅能确保线程安全，也能保证 Singleton 类的唯一性。</p><p>小结：</p><p>​    静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的一种单例模式。在没有加任何锁的情况下，保证了多线程下的安全，并且没有任何性能影响和空间的浪费。JVM保证了类加载的线程安全</p><h3 id="7-枚举方式"><a href="#7-枚举方式" class="headerlink" title="7.枚举方式"></a>7.枚举方式</h3><p>枚举类实现单例模式是极力推荐的单例实现模式，因为枚举类型是线程安全的，并且只会装载一次，设计者充分的利用了枚举的这个特性来实现单例模式，枚举的写法非常简单，而且枚举类型是所用单例实现中唯一一种不会被破坏的单例实现模式。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 枚举方式 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>说明：枚举方式属于饿汉式方式。枚举类可以直接加属性字段</p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><h3 id="问题演示"><a href="#问题演示" class="headerlink" title="问题演示"></a>问题演示</h3><p>破坏单例模式：<br>使上面定义的单例类（Singleton）可以创建多个对象，枚举方式除外。有两种方式，分别是序列化和反射。</p><ul><li>序列化反序列化<br>Singleton类：</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//往文件中写对象</span>        <span class="token comment">//writeObject2File();</span>        <span class="token comment">//从文件中读取对象</span>        <span class="token class-name">Singleton</span> s1 <span class="token operator">=</span> <span class="token function">readObjectFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Singleton</span> s2 <span class="token operator">=</span> <span class="token function">readObjectFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断两个反序列化后的对象是否是同一个对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">readObjectFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建对象输入流对象</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第一个读取Singleton对象</span>        <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeObject2File</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取Singleton类的对象</span>        <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建对象输出流</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将instance对象写出到文件中</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上面代码运行结果是<code>false</code>，表明序列化和反序列化已经破坏了单例设计模式</p><p>如果不实现序列化接口，是不是就不能被反序列化破坏</p><ul><li>反射<br>Singleton类：<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取Singleton类的字节码对象</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment">//获取Singleton类的私有无参构造方法对象</span>        <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//取消访问检查</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建Singleton类的对象s1</span>        <span class="token class-name">Singleton</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建Singleton类的对象s2</span>        <span class="token class-name">Singleton</span> s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断通过反射创建的两个Singleton对象是否是同一个对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>上面代码运行结果是false，表明序列化和反序列化已经破坏了单例设计模式<br>注意：枚举方式不会出现这两个问题。</li></ul><h3 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h3><p>序列化、反序列方式破坏单例模式的解决方法</p><p>  在Singleton类中添加<code>readResolve()</code>方法，在反序列化时被反射调用，如果定义了这个方法，就返回这个方法的值，如果没有定义，则返回新new出来的对象。</p><p>  Singleton类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * 下面是为了解决序列化反序列化破解单例模式     */</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>  源码解析：<br>ObjectInputStream类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// if nested read, passHandle contains handle of enclosing object</span>    <span class="token keyword">int</span> outerHandle <span class="token operator">=</span> passHandle<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token function">readObject0</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重点查看readObject0方法</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">readObject0</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>tc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">case</span> TC_OBJECT<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">checkResolve</span><span class="token punctuation">(</span><span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span>unshared<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重点查看readOrdinaryObject方法</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        depth<span class="token operator">--</span><span class="token punctuation">;</span>        bin<span class="token punctuation">.</span><span class="token function">setBlockDataMode</span><span class="token punctuation">(</span>oldMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">//isInstantiable 返回true，执行 desc.newInstance()，通过反射创建新的单例类，</span>    obj <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">isInstantiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> desc<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 在Singleton类中添加 readResolve 方法后 desc.hasReadResolveMethod() 方法执行结果为true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> handles<span class="token punctuation">.</span><span class="token function">lookupException</span><span class="token punctuation">(</span>passHandle<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> desc<span class="token punctuation">.</span><span class="token function">hasReadResolveMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 通过反射调用 Singleton 类中的 readResolve 方法，将返回值赋值给rep变量</span>        <span class="token comment">// 这样多次调用ObjectInputStream类中的readObject方法，继而就会调用我们定义的readResolve方法，所以返回的是同一个对象。</span>        <span class="token class-name">Object</span> rep <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">invokeReadResolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>反射方式破解单例的解决方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*           反射破解单例模式需要添加的代码        */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>说明:<br>    这种方式比较好理解。当通过反射方式调用构造方法进行创建创建时，直接抛异常。不运行此中操作。</p><h2 id="JDK源码解析-Runtime类"><a href="#JDK源码解析-Runtime类" class="headerlink" title="JDK源码解析-Runtime类"></a>JDK源码解析-Runtime类</h2><p>Runtime类就是使用的单例设计模式。<br>1.通过源代码查看使用的是哪儿种单例模式</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Runtime</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Runtime</span> currentRuntime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Returns the runtime object associated with the current Java application.     * Most of the methods of class &lt;code>Runtime&lt;/code> are instance     * methods and must be invoked with respect to the current runtime object.     *     * @return  the &lt;code>Runtime&lt;/code> object associated with the current     *          Java application.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Runtime</span> <span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> currentRuntime<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** Don't let anyone else instantiate this class */</span>    <span class="token keyword">private</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>从上面源代码中可以看出Runtime类使用的是饿汉式（静态属性）方式来实现单例模式的。</p><p>2.使用Runtime类中的方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuntimeDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取Runtime类对象</span>        <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回 Java 虚拟机中的内存总量。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回 Java 虚拟机试图使用的最大内存量。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个新的进程执行指定的字符串命令，返回进程对象</span>        <span class="token class-name">Process</span> process <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"ipconfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取命令执行后的结果，通过输入流获取</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 设计模式 </category>
          
          <category> 创建型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/p/54788f73.html"/>
      <url>/p/54788f73.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工厂模式属于创建型设计模式的一种</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>需求：设计一个咖啡店点餐系统。 </p><p>设计一个咖啡类（Coffee），并定义其两个子类（美式咖啡【AmericanCoffee】和拿铁咖啡【LatteCoffee】）；再设计一个咖啡店类（CoffeeStore），咖啡店具有点咖啡的功能。<br>具体类的设计如下：<br><img src="/images/internet/design/create/1-1.jpg"></p><p>在java中，万物皆对象，这些对象都需要创建，如果创建的时候直接new该对象，就会对该对象耦合严重，假如我们要更换对象，所有new对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则。如果我们使用工厂来生产对象，我们就只和工厂打交道就可以了，彻底和对象解耦，如果要更换对象，直接在工厂里更换该对象即可，达到了与对象解耦的目的；所以说，工厂模式最大的优点就是：解耦。</p><p>在本教程中会介绍三种工厂的使用</p><ul><li>简单工厂模式（不属于GOF的23种经典设计模式）</li><li> 工厂方法模式</li><li> 抽象工厂模式</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>before</span><span class="token punctuation">;</span><span class="token comment">/** * @version v1.0 * @ClassName: Coffee * @Description: 咖啡类 * @Author: 徐志 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//加糖</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addsugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加糖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//加奶</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>before</span><span class="token punctuation">;</span><span class="token comment">/** * @version v1.0 * @ClassName: CoffeeStore * @Description: TODO(一句话描述该类的功能) * @Author: 徐志 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeStore</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span> <span class="token function">orderCoffee</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//声明Coffee类型的变量，根据不同类型创建不同的coffee子类对象</span>        <span class="token class-name">Coffee</span> coffee <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"american"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmericanCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"latte"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LatteCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"对不起，您所点的咖啡没有"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//加配料</span>        coffee<span class="token punctuation">.</span><span class="token function">addMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coffee<span class="token punctuation">.</span><span class="token function">addsugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> coffee<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>before</span><span class="token punctuation">;</span><span class="token comment">/** * @version v1.0 * @ClassName: LatteCoffee * @Description: 拿铁咖啡 * @Author: 徐志 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LatteCoffee</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"拿铁咖啡"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>before</span><span class="token punctuation">;</span><span class="token comment">/** * @version v1.0 * @ClassName: AmericanCoffee * @Description: 没事咖啡 * @Author: 徐志 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericanCoffee</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"美式咖啡"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>before</span><span class="token punctuation">;</span><span class="token comment">/** * @version v1.0 * @ClassName: Client * @Description: TODO(一句话描述该类的功能) * @Author: 徐志 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1,创建咖啡店类</span>        <span class="token class-name">CoffeeStore</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2,点咖啡</span>        <span class="token class-name">Coffee</span> coffee <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">orderCoffee</span><span class="token punctuation">(</span><span class="token string">"american"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coffee<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这样就实现需求所描述的点咖啡。</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂不是一种设计模式，反而比较像是一种编程习惯。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>简单工厂包含如下角色：</p><ul><li>抽象产品 ：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品 ：实现或者继承抽象产品的子类</li><li>具体工厂 ：提供了创建产品的方法，调用者通过该方法来获取产品。</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>现在使用简单工厂对上面案例进行改进，类图如下：<br><img src="/images/internet/design/create/1-2.jpg"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericanCoffee</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"美式咖啡"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LatteCoffee</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"拿铁咖啡"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simple_factory</span><span class="token punctuation">;</span><span class="token comment">/** * @version v1.0 * @ClassName: Coffee * @Description: 咖啡类 * @Author: 徐志 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//加糖</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addsugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加糖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//加奶</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simple_factory</span><span class="token punctuation">;</span><span class="token comment">/** * @version v1.0 * @ClassName: SimpleCoffeeFactory * @Description: 简单咖啡工厂类，用来生产咖啡 * @Author: 徐志 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleCoffeeFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//声明Coffee类型的变量，根据不同类型创建不同的coffee子类对象</span>        <span class="token class-name">Coffee</span> coffee <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"american"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmericanCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"latte"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LatteCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"对不起，您所点的咖啡没有"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> coffee<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simple_factory</span><span class="token punctuation">;</span><span class="token comment">/** * @version v1.0 * @ClassName: CoffeeStore * @Description: TODO(一句话描述该类的功能) * @Author: 徐志 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeStore</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span> <span class="token function">orderCoffee</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleCoffeeFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleCoffeeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用生产咖啡的方法</span>        <span class="token class-name">Coffee</span> coffee <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createCoffee</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//加配料</span>        coffee<span class="token punctuation">.</span><span class="token function">addMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coffee<span class="token punctuation">.</span><span class="token function">addsugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> coffee<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>工厂（factory）处理创建对象的细节，一旦有了SimpleCoffeeFactory，CoffeeStore类中的orderCoffee()就变成此对象的客户，后期如果需要Coffee对象直接从工厂中获取即可。这样也就解除了和Coffee实现类的耦合，同时又产生了新的耦合，CoffeeStore对象和SimpleCoffeeFactory工厂对象的耦合，工厂对象和商品对象的耦合。</p><p>后期如果再加新品种的咖啡，我们势必要需求修改SimpleCoffeeFactory的代码，违反了开闭原则。工厂类的客户端可能有很多，比如创建美团外卖等，这样只需要修改工厂类的代码，省去其他的修改操作。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：<br>封装了创建对象的过程，可以通过参数直接获取对象。把对象的创建和业务逻辑层分开，这样以后就避免了修改客户代码，如果要实现新产品直接修改工厂类，而不需要在原代码中修改，这样就降低了客户代码修改的可能性，更加容易扩展。<br>缺点：<br>增加新产品时还是需要修改工厂类的代码，违背了“开闭原则”。</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>静态工厂<br>在开发中也有一部分人将工厂类中的创建对象的功能定义为静态的，这个就是静态工厂模式，它也不是23种设计模式中的。代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleCoffeeFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Coffee</span> coffee <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"americano"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmericanoCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"latte"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LatteCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> coffe<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>针对上例中的缺点，使用工厂方法模式就可以完美的解决，完全遵循开闭原则。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>定义一个用于创建对象的接口，让子类决定实例化哪个产品类对象。工厂方法使一个产品类的实例化延迟到其工厂的子类。</p><h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><p>工厂方法模式的主要角色：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</li><li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>使用工厂方法模式对上例进行改进，类图如下：<br><img src="/images/internet/design/create/1-3.jpg"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CoffeeFactory</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LatteCoffeeFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CoffeeFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LatteCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericanCoffeeFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CoffeeFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmericanCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeStore</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">CoffeeFactory</span> factory<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CoffeeStore</span><span class="token punctuation">(</span><span class="token class-name">CoffeeFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span> <span class="token function">orderCoffee</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Coffee</span> coffee <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coffee<span class="token punctuation">.</span><span class="token function">addMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coffee<span class="token punctuation">.</span><span class="token function">addsugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> coffee<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>从以上的编写的代码可以看到，要增加产品类时也要相应地增加工厂类，不需要修改工厂类的代码了，这样就解决了简单工厂模式的缺点。<br>工厂方法模式是简单工厂模式的进一步抽象。由于使用了多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。</p><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：</p><ul><li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</li><li>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；<br>缺点：</li><li>每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</li></ul><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>前面介绍的工厂方法模式中考虑的是一类产品的生产，如畜牧场只养动物、电视机厂只生产电视机、传智播客只培养计算机软件专业的学生等。<br>这些工厂只生产同种类产品，同种类产品称为同等级产品，也就是说：工厂方法模式只考虑生产同等级的产品，但是在现实生活中许多工厂是综合型的工厂，能生产多等级（种类） 的产品，如电器厂既生产电视机又生产洗衣机或空调，大学既有软件专业又有生物专业等。</p><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。<br>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。</p><h3 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h3><p>抽象工厂模式的主要角色如下：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。</li><li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它 同具体工厂之间是多对一的关系。</li></ul><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>现咖啡店业务发生改变，不仅要生产咖啡还要生产甜点，如提拉米苏、抹茶慕斯等，要是按照工厂方法模式，需要定义提拉米苏类、抹茶慕斯类、提拉米苏工厂、抹茶慕斯工厂、甜点工厂类，很容易发生类爆炸情况。其中拿铁咖啡、美式咖啡是一个产品等级，都是咖啡；提拉米苏、抹茶慕斯也是一个产品等级；拿铁咖啡和提拉米苏是同一产品族（也就是都属于意大利风味），美式咖啡和抹茶慕斯是同一产品族（也就是都属于美式风味）。所以这个案例可以使用抽象工厂模式实现。类图如下：<br><img src="/images/internet/design/create/1-4.jpg"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DessertFactory</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Dessert</span> <span class="token function">createDessert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//美式甜点工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericanDessertFactory</span> <span class="token keyword">implements</span> <span class="token class-name">DessertFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmericanCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Dessert</span> <span class="token function">createDessert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MatchaMousse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//意大利风味甜点工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItalyDessertFactory</span> <span class="token keyword">implements</span> <span class="token class-name">DessertFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LatteCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Dessert</span> <span class="token function">createDessert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tiramisu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果要加同一个产品族的话，只需要再加一个对应的工厂类即可，不需要修改其他的类。</p><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：<br>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。<br>缺点：<br>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等。</li><li>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。</li><li>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构。<br>如：输入法换皮肤，一整套一起换。生成不同操作系统的程序。</li></ul><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>简单工厂+配置文件解除耦合<br>可以通过工厂模式+配置文件的方式解除工厂对象和产品对象的耦合。在工厂类中加载配置文件中的全类名，并创建对象进行存储，客户端如果需要对象，直接进行获取即可。<br>第一步：定义配置文件<br>为了演示方便，我们使用properties文件作为配置文件，名称为bean.properties<br>american=com.itheima.pattern.factory.config_factory.AmericanCoffee<br>latte=com.itheima.pattern.factory.config_factory.LatteCoffee</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Coffee</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Properties</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">CoffeeFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"bean.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            p<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//遍历Properties集合对象</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//根据键获取值（全类名）</span>                <span class="token class-name">String</span> className <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取字节码对象</span>                <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Coffee</span> obj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Coffee</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>静态成员变量用来存储创建的对象（键存储的是名称，值存储的是对应的对象），而读取配置文件以及创建对象写在静态代码块中，目的就是只需要执行一次。</p><h2 id="JDK源码解析-Collection-iterator方法"><a href="#JDK源码解析-Collection-iterator方法" class="headerlink" title="JDK源码解析-Collection.iterator方法"></a>JDK源码解析-Collection.iterator方法</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"令狐冲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"风清扬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"任我行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取迭代器对象</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用迭代器遍历</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> ele <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>对上面的代码大家应该很熟，使用迭代器遍历集合，获取集合中的元素。而单列集合获取迭代器的方法就使用到了工厂方法模式。我们看通过类图看看结构：<br><img src="/images/internet/design/create/1-5.jpg"></p><p>Collection接口是抽象工厂类，ArrayList是具体的工厂类；Iterator接口是抽象商品类，ArrayList类中的Iter内部类是具体的商品类。在具体的工厂类中iterator()方法创建具体的商品类的对象。<br>另：1,DateForamt类中的getInstance()方法使用的是工厂模式；<br>2,Calendar类中的getInstance()方法使用的是工厂模式；</p>]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 设计模式 </category>
          
          <category> 创建型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx+window搭建域名访问</title>
      <link href="/p/eac6e62a.html"/>
      <url>/p/eac6e62a.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>最近在学习一个谷粒商城项目，原本开发启动项目后，直接通过ip地址+端口访问项目。但是现在想通过域名来访问我们的项目。由于我们没有去购买域名，因此就使用另外一种方式来实现本地项目启动后，通过域名来访问我们的项目</p><p><img src="/images/toolanddeploy/enviroment_setup/4-1.png"></p><h2 id="二、具体搭建步骤"><a href="#二、具体搭建步骤" class="headerlink" title="二、具体搭建步骤"></a>二、具体搭建步骤</h2><h3 id="2-1-修改本地host文件"><a href="#2-1-修改本地host文件" class="headerlink" title="2.1 修改本地host文件"></a>2.1 修改本地host文件</h3><p>修改本地的host文件，将域名和ip地址绑定在一起。因为浏览器在进行域名解析的时候，会先读取本地的host文件，如果有对应的域名和ip地址，那么直接会从host文件里面的配置来解析。注意，本地host文件的修改需要使用专门的host修改工具来修改，是不能直接修改的。无法保存</p><p><img src="/images/toolanddeploy/enviroment_setup/4-2.jpg"></p><h3 id="2-2-Nginx目录结构介绍"><a href="#2-2-Nginx目录结构介绍" class="headerlink" title="2.2 Nginx目录结构介绍"></a>2.2 Nginx目录结构介绍</h3><p>先得说一下Nginx的目录结构，所有的配置都会在  nginx.conf 里面，这是总配置文件。另外一个是配置server配置文件conf.d文件夹下</p><p><img src="/images/toolanddeploy/enviroment_setup/4-3.jpg"></p><p><img src="/images/toolanddeploy/enviroment_setup/4-4.jpg"></p><h3 id="2-3-域名访问Nginx转商品服务"><a href="#2-3-域名访问Nginx转商品服务" class="headerlink" title="2.3 域名访问Nginx转商品服务"></a>2.3 域名访问Nginx转商品服务</h3><p>先到conf.d的文件夹目录下。把default.conf复制一份，重命令为gulimall.conf</p><p>gulimall.conf</p><pre class="language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>    <span class="token comment"># 监听的端口和IP地址或者域名</span>    listen       <span class="token number">80</span><span class="token punctuation">;</span>        server_name  gulimall.com<span class="token punctuation">;</span>   <span class="token comment">##这里写域名最终会解析成IP地址的</span>    <span class="token comment">#charset koi8-r;</span>    <span class="token comment">#access_log  /var/log/nginx/log/host.access.log  main;</span>          location / <span class="token punctuation">&#123;</span>        proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>        proxy_pass http://192.168.3.64:10000<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">#error_page  404              /404.html;</span>    <span class="token comment"># redirect server error pages to the static page /50x.html</span>    <span class="token comment">#</span>    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /50x.html <span class="token punctuation">&#123;</span>        root   /usr/share/nginx/html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>    <span class="token comment">#</span>    <span class="token comment">#location ~ \.php$ &#123;</span>    <span class="token comment">#    proxy_pass   http://127.0.0.1;</span>    <span class="token comment">#&#125;</span>    <span class="token comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>    <span class="token comment">#</span>    <span class="token comment">#location ~ \.php$ &#123;</span>    <span class="token comment">#    root           html;</span>    <span class="token comment">#    fastcgi_pass   127.0.0.1:9000;</span>    <span class="token comment">#    fastcgi_index  index.php;</span>    <span class="token comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>    <span class="token comment">#    include        fastcgi_params;</span>    <span class="token comment">#&#125;</span>    <span class="token comment"># deny access to .htaccess files, if Apache's document root</span>    <span class="token comment"># concurs with nginx's one</span>    <span class="token comment">#</span>    <span class="token comment">#location ~ /\.ht &#123;</span>    <span class="token comment">#    deny  all;</span>    <span class="token comment">#&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/images/toolanddeploy/enviroment_setup/4-5.png"></p><p>我们创建一个gulimall.conf文件，配置好文件的内容后，现在浏览器直接访问 gulimall.com就可以直接访问到商品服务的首页了</p><h3 id="2-4域名访问Nginx转网关再转商品服务"><a href="#2-4域名访问Nginx转网关再转商品服务" class="headerlink" title="2.4域名访问Nginx转网关再转商品服务"></a>2.4域名访问Nginx转网关再转商品服务</h3><p>但是正常情况下，我们微服务还有一层网关的，所以浏览器发送的请求也应该是先发送到网关，再有网关发送到商品服务。这样的话，我们的配置就需要调整了。<br>注意，这里我们的配置实现了动静分离，一些css和js这样的静态资源存放到nginx服务器即可</p><p>gulimall.conf</p><pre class="language-conf" data-language="conf"><code class="language-conf">server &#123;    # 监听的端口和IP地址或者域名    listen       80;        server_name  gulimall.com;   ##这里写域名最终会解析成IP地址的    #charset koi8-r;    #access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;log&#x2F;host.access.log  main;        # 静态资源请求地址     location &#x2F;static&#x2F; &#123;       root  &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;    &#125;    location &#x2F; &#123;        proxy_set_header Host $host;        proxy_pass http:&#x2F;&#x2F;gulimall;    &#125;    #error_page  404              &#x2F;404.html;    # redirect server error pages to the static page &#x2F;50x.html    #    error_page   500 502 503 504  &#x2F;50x.html;    location &#x3D; &#x2F;50x.html &#123;        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;    &#125;    # proxy the PHP scripts to Apache listening on 127.0.0.1:80    #    #location ~ \.php$ &#123;    #    proxy_pass   http:&#x2F;&#x2F;127.0.0.1;    #&#125;    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000    #    #location ~ \.php$ &#123;    #    root           html;    #    fastcgi_pass   127.0.0.1:9000;    #    fastcgi_index  index.php;    #    fastcgi_param  SCRIPT_FILENAME  &#x2F;scripts$fastcgi_script_name;    #    include        fastcgi_params;    #&#125;    # deny access to .htaccess files, if Apache&#39;s document root    # concurs with nginx&#39;s one    #    #location ~ &#x2F;\.ht &#123;    #    deny  all;    #&#125;&#125;</code></pre><p>nginx.conf</p><pre class="language-conf" data-language="conf"><code class="language-conf">worker_processes  1;error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log warn;pid        &#x2F;var&#x2F;run&#x2F;nginx.pid;events &#123;    worker_connections  1024;&#125;http &#123;    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;    default_type  application&#x2F;octet-stream;    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;    sendfile        on;    #tcp_nopush     on;    keepalive_timeout  65;    #gzip  on;    upstream gulimall&#123;       server 192.168.56.1:88;    &#125;        # 整合conf.d下的后缀 为conf的所有配置文件               include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;&#125;</code></pre><p>网关服务配置路由添加</p><pre><code class="yml">        - id: gulimall_host_route          uri: lb://gulimall-product          predicates:            - Host=gulimall.com,item.gulimall.com</code></pre><p><img src="/images/toolanddeploy/enviroment_setup/4-6.png"><br>现在我们就实现了浏览器发送请求先到nginx服务器，然后到网关，再有网关转到具体的某个服务</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>这是我们本地域名访问搭建的配置，这里其实是为了学习才使用的这种方式，现在购买域名后需要备案，那个步骤稍微麻烦负载一点。但是逻辑是一样的，都是将域名和ip先绑定在一起，然后通过域名来访问具体的ip+端口</p>]]></content>
      
      
      <categories>
          
          <category> 工具与部署 </category>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>负载均衡介绍</title>
      <link href="/p/694a6f7c.html"/>
      <url>/p/694a6f7c.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在过去使用单体项目时，我们搭建集群，一般使用Nginx做负载均衡。现在到了微服务之后，还有网关的负载均衡以及服务与服务调用之间的负载均衡等等。今天就来分别理解一下这几种负载均衡</p><h2 id="二、什么是负载均衡"><a href="#二、什么是负载均衡" class="headerlink" title="二、什么是负载均衡"></a>二、什么是负载均衡</h2><p>负载均衡是一种在计算机网络和系统架构中使用的技术，用于均衡分发工作负载到多个资源，比如：服务器、计算节点或存储设备上，以提高系统的性能、可伸缩性。</p><p>在传统的单个服务器架构中，当请求量增加时，单个服务器可能无法处理所有的请求，导致性能下降或系统崩溃。那么这个时候我们会搭建项目集群，假设有实例A和实例B。那么浏览器发送请求到服务端具体访问的是实例A还是实例B由负载均衡来决定。</p><p>负载均衡技术通过将负载（请求）分发到多个服务器上，实现资源的合理利用，从而平衡服务器的负载。</p><p>这样可以提高系统的处理能力，增加并发处理能力，并减少单点故障的风险。</p><h2 id="三、服务端负载均衡和客户端负载均衡"><a href="#三、服务端负载均衡和客户端负载均衡" class="headerlink" title="三、服务端负载均衡和客户端负载均衡"></a>三、服务端负载均衡和客户端负载均衡</h2><h3 id="3-1-服务端负载均衡"><a href="#3-1-服务端负载均衡" class="headerlink" title="3.1 服务端负载均衡"></a>3.1 服务端负载均衡</h3><p>我们可以把服务端负载均衡的工作机制想象成去餐厅点餐：餐厅共有三个取餐口（分别对应着我们服务列表中三个微服务），并且在取餐口的前面有一前台（负载均衡器），前台统一管理着三个窗口（负载均衡器只管理着一份包含着三个服务的服务列表），当我们进店准备点餐时，前台通过策略（负载均衡器通过算法）来为我们选到最佳的取餐口（比如说1号取餐口人比较少，并且出餐比较快），于是我们就到相应的1号窗口进行排队。（调用相应的服务）;</p><p>这种服务端的负载均衡通常使用Nginx服务器来实现，它像一个协调者，帮助我们把请求进行分配<br><img src="/images/frame/springcloud/5-1.png"></p><h3 id="3-2-客户端负载均衡"><a href="#3-2-客户端负载均衡" class="headerlink" title="3.2 客户端负载均衡"></a>3.2 客户端负载均衡</h3><p>同理，我们也可以把该客户端负载均衡看作是去餐厅点餐，与之前不同的是我们此时没有前台（负载均衡器），而我们每个人都能选择三个窗口中的任意一个（也就是说我们不同的Eureka客户端都有一份自己的服务列表，客户端能管理列表中的任意一个服务），我们自己权衡（客户端通过算法）来选择最佳的取餐口（来选择调用选中的那个服务）。</p><p>客户端的负载均衡，由调用方自己来决定。通常是用于我们微服务实例之间的相互调用。微服务之间的相互调用现在一般使用OpenFeign来调用。OpenFegin里面集成了Ribbon来实现微服务调用的负载均衡策略</p><p><img src="/images/frame/springcloud/5-2.jpg"></p><p>那网关的负载均衡呢？<br>网关服务本身自己也是一个微服务，也会注册到注册中心当中去，所以网关的负载均衡是属于客户端的负载均衡的</p><h2 id="四、客户端负载均衡服服务端负载均衡的区别"><a href="#四、客户端负载均衡服服务端负载均衡的区别" class="headerlink" title="四、客户端负载均衡服服务端负载均衡的区别"></a>四、客户端负载均衡服服务端负载均衡的区别</h2><p>1、nginx负载是服务端的负载；而ribbion的负载，是代码中微服务的负载（客户端负载）；这两个负载并不冲突。</p><p>2、服务端负载：用户请求到了nginx以后，nginx负载决定把请求转发到哪台服务器；（负载的列表是存在nginx服务端的，所以叫服务端负载）</p><p>3、客户端负载：ribbon是集成在服务消费端，他的负载是，首先去注册中心获取到可以提供服务的列表，把这个服务列表缓存到本地，然后自己决定去调用哪一个服务；（这里列表是存在（注册中心客户端），所以一般称为客户端负载）（所以在微服务中，如果注册中心运行期间宕机，短时间之内并不影响服务消费者向服务生产者的调用。只是不能获取到及时更新的服务里边，如果其中一个服务挂掉，消费端并不能收到消息，所以长时间后会影响性能）</p><p>4、nginx服务端负载，和ribbion的客户端负载，并不冲突。再实际生产环境中，一般都是两者共存。用户的请求进来以后，先经过nginx服务端负载，然后再进入微服务网关，执行ribbion的客户端负载；</p><p>5、nginx的负载均衡算法需要在nginx.cnf的配置文件的upstream标签里边配置；（轮循、权重、ip_hash）</p><p>6、ribbion的负载均衡算法需要在集成ribbion的客户端微服务里边配置，增加配置类，在实例化ResTTemplate时配置负载方式；我们项目中，还是用feign做消费端调用比较多，他底层就是集成了ribbion。自己封装成了类似rpc方式的调用。默认用的是轮循，如果需要修改，首先启动类里边实例化一个IRule，实例化他的不同接口，就可以实现不同的负载算法（7种）</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>服务端的负载均衡和客户端的负载均衡基本上就时上面这些了</p>]]></content>
      
      
      <categories>
          
          <category> 框架技术 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/p/0.html"/>
      <url>/p/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/p/0.html"/>
      <url>/p/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/p/0.html"/>
      <url>/p/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Nginx</title>
      <link href="/p/fb9b2386.html"/>
      <url>/p/fb9b2386.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>今天记录一下如何使用Docker安装Nginx</p><h2 id="二、Docker安装nginx"><a href="#二、Docker安装nginx" class="headerlink" title="二、Docker安装nginx"></a>二、Docker安装nginx</h2><h3 id="2-1-先随机启动一个nginx容器"><a href="#2-1-先随机启动一个nginx容器" class="headerlink" title="2.1 先随机启动一个nginx容器"></a>2.1 先随机启动一个nginx容器</h3><p>注意这里我本地还没有nginx的镜像。运行这个命令之后它会自己去拉取Nginx的镜像</p><p><img src="/images/toolanddeploy/docker/5-1.png" alt="Nginx容器随机启动"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 首先，在我们的mydata文件夹下创建一个nginx文件夹</span><span class="token function">mkdir</span> nginx<span class="token comment">## 随机启动容器</span>docker run -p <span class="token number">80</span>:80 --name nginx -d nginx:1.10</code></pre><p>从图片中可以看出来，docker会自己下载nginx镜像，并启动容器</p><h3 id="2-2-拷贝容器内配置"><a href="#2-2-拷贝容器内配置" class="headerlink" title="2.2 拷贝容器内配置"></a>2.2 拷贝容器内配置</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 注意这个命令后面是有一个点的。这个点不能省略</span>docker container <span class="token function">cp</span> nginx:/etc/nginx <span class="token builtin class-name">.</span><span class="token comment">## 拷贝完成后，就可以停掉nginx容器了</span>docker stop nginx<span class="token comment">## 删除nginx容器</span>docker <span class="token function">rm</span> nginx<span class="token comment">## 调整nginx文件夹的结构</span><span class="token comment">## 先修改nginx文件夹名称为conf</span><span class="token function">mv</span> nginx conf<span class="token comment">##在重新创建一个Nginx文件夹</span><span class="token function">mkdir</span> nginx<span class="token comment">## 将conf文件夹移动到nginx文件夹里面</span><span class="token function">mv</span> conf nginx/</code></pre><p><img src="/images/toolanddeploy/docker/5-2.png" alt="停止删除容器"></p><p><img src="/images/toolanddeploy/docker/5-3.png" alt="修改nginx文件夹结构"></p><h3 id="2-3-重新启动nginx容器"><a href="#2-3-重新启动nginx容器" class="headerlink" title="2.3 重新启动nginx容器"></a>2.3 重新启动nginx容器</h3><pre class="language-bash" data-language="bash"><code class="language-bash">docker run -p <span class="token number">80</span>:80 --name nginx <span class="token punctuation">\</span>-v /mydata/nginx/html:/usr/share/nginx/html <span class="token punctuation">\</span>-v /mydata/nginx/logs:/var/log/nginx <span class="token punctuation">\</span>-v /mydata/nginx/conf:/etc/nginx <span class="token punctuation">\</span>-d nginx:1.10</code></pre><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>以上我们的Nginx就使用Docker安装成功了</p>]]></content>
      
      
      <categories>
          
          <category> 工具与部署 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Window11环境下安装Xshell和Xftp</title>
      <link href="/p/a858da62.html"/>
      <url>/p/a858da62.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>我们要连接远程服务器的时候需要一个工具来连接,XShell是一个非常不错的选择。XShell是一个命令行窗口，而Xftp是用来上传文件到远程服务器的，非常方便。我们个人使用的话直接下载Xhsell学校版就可以了，免费使用。商业版需要花钱购买</p><h2 id="二、下载Xshell和Xftp"><a href="#二、下载Xshell和Xftp" class="headerlink" title="二、下载Xshell和Xftp"></a>二、下载Xshell和Xftp</h2><p>网址: <a href="https://www.xshell.com/zh/free-for-home-school/">https://www.xshell.com/zh/free-for-home-school/</a></p><p>点击网址，跳转到下面这个页面<br><img src="/images/toolanddeploy/enviroment_setup/3-1.png"></p><p>下面有下载按钮，直接点击下载即可</p><h2 id="三、安装Xshell和Xftp"><a href="#三、安装Xshell和Xftp" class="headerlink" title="三、安装Xshell和Xftp"></a>三、安装Xshell和Xftp</h2><p><img src="/images/toolanddeploy/enviroment_setup/3-2.png"><br>这两个软件都是傻瓜式安装。直接点击下一步就可以了。</p><h2 id="四、注册激活"><a href="#四、注册激活" class="headerlink" title="四、注册激活"></a>四、注册激活</h2><p><img src="/images/toolanddeploy/enviroment_setup/3-3.png"></p><p>打开软件后，弹出这个框框。这里只需要填写自己的名字和邮箱即可。他会往你的邮箱里面发送一封激活邮件。点击激活链接就可以使用了，免费版的不需要花钱</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>以上Xhsell就免费激活了，同理，Xftp也是一样的。可以开始你的Xshell使用了</p>]]></content>
      
      
      <categories>
          
          <category> 工具与部署 </category>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装ElasticSearch</title>
      <link href="/p/29fe6687.html"/>
      <url>/p/29fe6687.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>来写一篇使用Docker安装ElasticSearch的博客，记录一下ElasticSearch的安装。我这里安装ElasticSearch的同时顺便把Kibana也一起安装了</p><h2 id="二、Docker拉取ES镜像并启动容器"><a href="#二、Docker拉取ES镜像并启动容器" class="headerlink" title="二、Docker拉取ES镜像并启动容器"></a>二、Docker拉取ES镜像并启动容器</h2><h3 id="1、先从Docher拉取镜像"><a href="#1、先从Docher拉取镜像" class="headerlink" title="1、先从Docher拉取镜像"></a>1、先从Docher拉取镜像</h3><pre class="language-bash" data-language="bash"><code class="language-bash">docker pull elasticsearch:7.4.2  <span class="token comment">## 存储和检索数据</span>docker pull kibana:7.4.2  <span class="token comment">##可视化检索数据</span><span class="token comment">## 注意这两个版本需要保持一致</span></code></pre><p><img src="/images/toolanddeploy/docker/4-1.jpg" alt="Docker拉取elasticserach"><br><img src="/images/toolanddeploy/docker/4-2.jpg" alt="Docker拉取kibana"></p><p>这两个镜像的版本需要保持一致。这个是配套使用的。正常来讲我们使用elasticsearch只需要安装elasticserach即可。安装kibana是为了可视化操作更加的方便。具体说明。比如说我们安装MySQL，正常来讲MySQL安装后直接就可以拿来使用了，只不过我们编写SQL语句需要再CMD窗口中去编写。这个时候我们会下载一个Navicate或者SQLyong来链接数据库。elasticserach和kibana的关系就像mysql和navicate的关系一样</p><h3 id="2、创建挂载目录"><a href="#2、创建挂载目录" class="headerlink" title="2、创建挂载目录"></a>2、创建挂载目录</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 创建挂载目录</span><span class="token function">mkdir</span> -p /mydata/elasticsearch/config<span class="token function">mkdir</span> -p /mydata/elasticsearch/data<span class="token comment">## 增加配置文件，往里面写值</span><span class="token builtin class-name">echo</span> <span class="token string">"http.host: 0.0.0.0"</span> <span class="token operator">>></span> /mydata/elasticsearch/config/elasticsearch.yml<span class="token comment">##保证权限，不然启动会报错</span><span class="token function">chmod</span> -R <span class="token number">777</span> /mydata/elasticsearch/ </code></pre><h3 id="3、启动容器"><a href="#3、启动容器" class="headerlink" title="3、启动容器"></a>3、启动容器</h3><pre class="language-bash" data-language="bash"><code class="language-bash">docker run --name elasticsearch -p <span class="token number">9200</span>:9200 -p <span class="token number">9300</span>:9300 <span class="token punctuation">\</span>-e <span class="token string">"discovery.type=single-node"</span> <span class="token punctuation">\</span>-e <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms64m -Xmx512m"</span> <span class="token punctuation">\</span>-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml <span class="token punctuation">\</span>-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data <span class="token punctuation">\</span>-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins <span class="token punctuation">\</span>-d elasticsearch:7.4.2</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">docker run --name kibana -e <span class="token assign-left variable">ELASTICSEARCH_HOSTS</span><span class="token operator">=</span>http://192.168.3.64:9200 -p <span class="token number">5601</span>:5601 <span class="token punctuation">\</span>-d kibana:7.4.2<span class="token comment">## 这里指定的host是我自己虚拟机的IP地址</span></code></pre><p><img src="/images/toolanddeploy/docker/4-3.jpg" alt="访问elasticserach"><br>浏览器输入<a href="http://192.168.3.64:9200/">http://192.168.3.64:9200</a>   表示elasticsearch启动成功</p><h3 id="4、设置elasticseach容器开启自启"><a href="#4、设置elasticseach容器开启自启" class="headerlink" title="4、设置elasticseach容器开启自启"></a>4、设置elasticseach容器开启自启</h3><pre class="language-bash" data-language="bash"><code class="language-bash">docker update --restart<span class="token operator">=</span>always elasticsearchdocker update --restart<span class="token operator">=</span>always kibana</code></pre><h2 id="三、ElasticSerach安装ik分词器"><a href="#三、ElasticSerach安装ik分词器" class="headerlink" title="三、ElasticSerach安装ik分词器"></a>三、ElasticSerach安装ik分词器</h2><p>ik分词器下载地址: <a href="https://github.com/infinilabs/analysis-ik/releases">https://github.com/infinilabs/analysis-ik/releases</a><br>ik分词器下载也需要和我们的elasticsearch版本保持一致，由于我的是7.4.2版本，所以我下载ik分词器也是7.4.2版本。下载完成了之后解压，然后使用Xftp工具上传到elasticsearch文件夹下的plugins文件夹下面去。</p><p><img src="/images/toolanddeploy/docker/4-4.png" alt="上传elasticserach"><br>使用Xftp链接上远程服务器之后，直接将解压后的ik分词器文件夹拖到elasticsearch的plugins文件夹下</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>以上就是我们使用Docker安装ElasticSearch的全部内容了。非常值得注意的一点就是elasticserach启动的时候给他制定内存大小。不然直接启动很容易就会把我们系统内存占用满</p>]]></content>
      
      
      <categories>
          
          <category> 工具与部署 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matery主题主页配置调整</title>
      <link href="/p/e2e72bce.html"/>
      <url>/p/e2e72bce.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Matery主题主页有一些细节点我不是很喜欢。写博客也不需要很多太花哨的功能，所以首页有些功能我都关闭了，具体可以看一下在哪里配置</p><h2 id="具体首页修改"><a href="#具体首页修改" class="headerlink" title="具体首页修改"></a>具体首页修改</h2><h3 id="1、首页背景渐变色关闭"><a href="#1、首页背景渐变色关闭" class="headerlink" title="1、首页背景渐变色关闭"></a>1、首页背景渐变色关闭</h3><h3 id="2、首页音乐插件关闭"><a href="#2、首页音乐插件关闭" class="headerlink" title="2、首页音乐插件关闭"></a>2、首页音乐插件关闭</h3><p><img src="/images/hexo/12-2.png"><br>我把音乐插件关闭了。这个地方修改为flase就可以了</p><h3 id="3、首页轮播图第二个按钮调整"><a href="#3、首页轮播图第二个按钮调整" class="headerlink" title="3、首页轮播图第二个按钮调整"></a>3、首页轮播图第二个按钮调整</h3><p><img src="/images/hexo/12-4.png"></p><p>原本这个地方放的是github的网址的，但国内访问Github太慢了，我就直接换成了Gitee。大家可以配置成自己的Gitee具体的路径</p><h3 id="4、首页轮播图第二行个人信息隐藏"><a href="#4、首页轮播图第二行个人信息隐藏" class="headerlink" title="4、首页轮播图第二行个人信息隐藏"></a>4、首页轮播图第二行个人信息隐藏</h3><p><img src="/images/hexo/12-3.png"><br>这里可以放一些自己的社交账号，但我感觉没有啥太大的必要，就直接给关了，有需要的可以配置上自己的邮箱或者QQ啥的</p><h3 id="5、首页我的梦想关闭"><a href="#5、首页我的梦想关闭" class="headerlink" title="5、首页我的梦想关闭"></a>5、首页我的梦想关闭</h3><p><img src="/images/hexo/12-1.png"><br>如果你想自定义这一块的内容，你就调整这里就好了。我觉得没啥用，就给关闭了</p><h3 id="6、修改打赏二维码"><a href="#6、修改打赏二维码" class="headerlink" title="6、修改打赏二维码"></a>6、修改打赏二维码</h3><p>找到主题路径下的打赏二维码图片，替换成为自己的即可<br><img src="/images/hexo/12-5.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体首页的调整就时这样的了。其他页面的优化调整后续再慢慢调整吧。根据情况调整</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo修改主题为Matery</title>
      <link href="/p/a55c0562.html"/>
      <url>/p/a55c0562.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>今天逛博客的时候，发现Hexo搭建的博客很多人都推荐使用Matery主题。就搜了一下，花里胡哨的。是我喜欢的风格。就打算给自己的博客也换一个主题</p><h2 id="二、下载主题"><a href="#二、下载主题" class="headerlink" title="二、下载主题"></a>二、下载主题</h2><p>先去Github上面下载好主题压缩包。地址： <a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><p><img src="/images/hexo/11-1.png"><br>目前已经看着有几个月没有更新了。直接下载压缩包到本地。<br><img src="/images/hexo/11-2.png"></p><p>下载完成后直接解压。我修改了文件夹的名称为hexo-theme-matery。不然会有一个devlop的后缀。我看着不舒服。</p><h2 id="三、修改配置"><a href="#三、修改配置" class="headerlink" title="三、修改配置"></a>三、修改配置</h2><h3 id="1、修改总的配置文件-config-yml-（注意，不是主题下的-confing-yml）"><a href="#1、修改总的配置文件-config-yml-（注意，不是主题下的-confing-yml）" class="headerlink" title="1、修改总的配置文件_config.yml （注意，不是主题下的_confing.yml）"></a>1、修改总的配置文件_config.yml （注意，不是主题下的_confing.yml）</h3><p><img src="/images/hexo/11-3.png"></p><p>注意一点，这里配置文件的修改theme的值要和文件夹名称保持一致。我最开始看的一篇博客，是直接改成了matery。然后我也直接写的matery。但是我的文件夹名称是hexo-theme-matery。这里是要保持一致的。不然主题不生效。</p><h3 id="2、首页subtitle"><a href="#2、首页subtitle" class="headerlink" title="2、首页subtitle"></a>2、首页subtitle</h3><p>启动之后，我发现这个首页显示的subtitle。这个也太难看了。这个也需要在我们的总配置文件_config.yml中去修改。</p><p><img src="/images/hexo/11-4.png"></p><p>这样我们就简单配置好了，将hexo 主题修改为了Matery</p><h2 id="三、页面添加"><a href="#三、页面添加" class="headerlink" title="三、页面添加"></a>三、页面添加</h2><p>hexo 启动成功之后，有几个页面点击访问报错。这是因为我们没有创建具体的page页面。增加页面的步骤都基本相同，创建tags标签页、categories分类页，about关于我页、 contact留言板页、friends友情链接页、均可以使用这个步骤。由于我之前已经有category，aboout,tags页面了。所以这几个页面访问的时候都没有问题，只有contact页面还有friends页面访问会报错。所以我就只创建这两个页面就可以了</p><h3 id="3-1-创建contact页面"><a href="#3-1-创建contact页面" class="headerlink" title="3.1 创建contact页面"></a>3.1 创建contact页面</h3><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span></code></pre><p><img src="/images/hexo/11-5.png"></p><p>命令执行完了后，就会生成一个contact文件夹，并且里面生成一个index.md文件</p><h3 id="3-2-创建friends页面"><a href="#3-2-创建friends页面" class="headerlink" title="3.2 创建friends页面"></a>3.2 创建friends页面</h3><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>这样创建了之后，友情链接只是一个空白页。我们需要另外增加一个json文件。</p><p><img src="/images/hexo/11-6.png"></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://www.lixl.cn/medias/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"悟尘记"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"人生就是一场修行，上善若水，厚德载物。"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.lixl.cn/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去参观"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://wiki.hyperledger.org/download/attachments/2392069/fabric?version=1&amp;modificationDate=1540928132000&amp;api=v2"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Fabric"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"A Blockchain Platform for the Enterprise"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://hyperledger-fabric.readthedocs.io/en/master/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://www.bootcdn.cn/assets/img/maoyun.svg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"BootCDN"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"稳定、快速、免费的前端开源项目 CDN 加速服务。"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.bootcdn.cn/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去加速"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><h2 id="四、代码块高亮问题"><a href="#四、代码块高亮问题" class="headerlink" title="四、代码块高亮问题"></a>四、代码块高亮问题</h2><p><img src="/images/hexo/11-7.png"></p><p>使用matery主题之后，发现我之前写的博客，代码块展示有异常，这个地方修改一下，不使用lightgs。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>这样配置完了之后，基本上就可以开始使用我们的Matery主题了。其他的功能后续再扩展</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCoud之注册中心Nacos简单介绍</title>
      <link href="/p/f346300c.html"/>
      <url>/p/f346300c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当系统拆分微服务模块之后，就涉及到很多内容。比如服务与服务直接是如何通信的，A服务调用B服务出现问题了怎么办。某个服务不可用了又该怎么处理等等一系列的问题。今天主要先来说一下注册中心，这是服务与服务之间相互调用的基石。</p><h2 id="注册中心介绍"><a href="#注册中心介绍" class="headerlink" title="注册中心介绍"></a>注册中心介绍</h2><h3 id="1、什么是注册中心"><a href="#1、什么是注册中心" class="headerlink" title="1、什么是注册中心"></a>1、什么是注册中心</h3><p>注册中心是微服务架构中的纽带，类似于我们手机里面“通讯录”，它记录了服务和服务地址的映射关系。在分布式架构中，服务会注册到这里，当服务需要调用其它服务时，就到这里找到服务的地址并进行调用。注册中心本质上是为了解耦服务提供者和服务消费者。</p><p>对于任何一个微服务，原则上都应存在或者支持多个提供者，这是由微服务的分布式属性决定的，更进一步，为了支持弹性扩缩容特性，一个微服务的提供者的数量和分布往往是动态变化的，也是无法预先确定的。因此，原本在单体应用阶段常用的静态LB机制就不再适用了，需要引入额外的组件来管理微服务提供者的注册与发现，而这个组件就是服务注册中心。</p><p><img src="/images/frame/springcloud/1-1.png"></p><h3 id="2、注册中心干嘛用"><a href="#2、注册中心干嘛用" class="headerlink" title="2、注册中心干嘛用"></a>2、注册中心干嘛用</h3><p>服务注册：服务实例将自身服务信息注册到注册中心<br>服务发现：服务实例通过注册中心，获取到注册到其中的服务实例的信息，通过这些信息去请求它们提供的服务<br>服务剔除：服务注册中心将出问题的服务自动剔除到可用列表之外，使其不会被调用到</p><p>先想一个问题，我们使用HTTP来进行远程调用的时候，需要先知道远程服务的IP地址和端口对吧。这样才能调用访问。但是如果我们调用的服务是集群部署的。比如说现在A服务远程调用B服务。B服务有两个(我用B1和B2表示)。那么我们在代码里怎么写。如果在代码里面吧IP地址和端口写死。那这样只能调用一台服务。另外一台服务就闲置了。这样肯定是不行的。有人说我可以取一个随机数1和2。出现1就调用B1服务，出现2就调用B2服务。在代码层面实现一个简单的负载均衡。这样两台服务就能都用上了。<br>这样确实是可以实现两台服务都使用上，但是现在问题是，如果我们程序在运行的时候，B1挂了，只有B2是好的。你这个时候调用B1直接就返回了一个报错。这种怎么办？</p><p>引入注册中心后，B1和B2会注册到注册中心当中去，并且会维护一个服务列表。服务列表里面会记录那些服务是可用的。当B1服务挂掉了之后，会从这个注册列表中剔除掉B1。我们服务在调用的时候查询服务列表，不会查询到B1。只会调用B2</p><p><img src="/images/frame/springcloud/1-2.png"></p><h2 id="Nacos介绍"><a href="#Nacos介绍" class="headerlink" title="Nacos介绍"></a>Nacos介绍</h2><h3 id="1、什么是Nacos"><a href="#1、什么是Nacos" class="headerlink" title="1、什么是Nacos"></a>1、什么是Nacos</h3><p>Nacos是SpringCloud Alibaba里面的一个组件，可以用来作为注册中心。同时它也可以用来做配置中心。但是配置中心不是今天我们需要讨论的点，这里先放下不谈。对Nacos感兴趣可以访问Nacos官网，去官网查看Nacos的详细文档。<br>官方网址: <a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">https://nacos.io/zh-cn/docs/what-is-nacos.html</a></p><h3 id="2、Nacos下载和安装"><a href="#2、Nacos下载和安装" class="headerlink" title="2、Nacos下载和安装"></a>2、Nacos下载和安装</h3><p>Nacos下载地址: <a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>可以选择具体的Nacos版本。目前的话是以及更新到了2.3.2版本了。</p><p><img src="/images/frame/springcloud/1-3.png"></p><p>可以看到，这里是有两个版本的。一个是window环境下的。一个是Linux环境下的。Nacos是绿色版本，解压就可以用。不需要在额外安装其他东西。</p><p><img src="/images/frame/springcloud/1-4.png"><br>Nacos解压后的目录文件夹如上图展示这个样子。</p><p><img src="/images/frame/springcloud/1-5.png"></p><p>进入bin文件夹。window环境下点击 startup.cmd表示nacos启动成功。点击shutdowm.cmd表示关闭nacos</p><h2 id="SpringBoot集成Nacos"><a href="#SpringBoot集成Nacos" class="headerlink" title="SpringBoot集成Nacos"></a>SpringBoot集成Nacos</h2>]]></content>
      
      
      <categories>
          
          <category> 框架技术 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目启动端口占用问题处理</title>
      <link href="/p/78f15e.html"/>
      <url>/p/78f15e.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>微服务项目，有一个项目制定的server.port为10000端口，然后启动报端口占用，下面来看一下端口占用问题如何排查</p><h2 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h2><p>1、方式一：这种方式比较简单，直接更换微服务的指定端口号就行了。换成别的端口号重启一下微服务</p><p>2、方式二： 看看这个端口是被谁给占用了，主要是我这个微服务之前启动成功了，这次不知道为啥会报端口占用，所以就像看看是哪个占用了1000端口</p><p>步骤一： 先打开命令行窗口<br>步骤二：输入命令 </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -aon <span class="token operator">|</span> <span class="token function">find</span> <span class="token string">"10000"</span></code></pre><p><img src="/images/otherTechnology/4-1.png"></p><p>步骤三：通过进程id找到具体的应用程序</p><pre class="language-bash" data-language="bash"><code class="language-bash">tasklist<span class="token operator">|</span>findstr <span class="token string">"16260"</span></code></pre><p>回车之后，我们可以看到具体的占用端口的进程。我这里是：yundetectservice.exe 。我百度搜索了一下这个应用程序，是我的百度网盘占用了10000端口</p><p>步骤四：干掉这个进程</p><pre class="language-bash" data-language="bash"><code class="language-bash">taskkill -f -pid <span class="token number">16260</span></code></pre><p>后面正常启动</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在微服务项目中，这种端口被占用的情况还是挺常见的。需要注意，其他端口也是一样，同样的排查思路</p>]]></content>
      
      
      <categories>
          
          <category> 其他技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目启动报错踩坑</title>
      <link href="/p/c0e5b237.html"/>
      <url>/p/c0e5b237.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习尚硅谷的谷粒商城项目，就前端项目启动报了一些错误这里进行一个简单总结</p><h3 id="1、NodeJS版本不对"><a href="#1、NodeJS版本不对" class="headerlink" title="1、NodeJS版本不对"></a>1、NodeJS版本不对</h3><p>由于项目资源中Vue资料已经提供，并且Node-saas等已经制定了版本。我本地的版本是Node16，版本太高了，出现一些莫名奇妙的错误的。后来降低了Node的版本到14</p><h3 id="2、node-saas下载问题"><a href="#2、node-saas下载问题" class="headerlink" title="2、node-saas下载问题"></a>2、node-saas下载问题</h3><p>npm下载一般我们会配置阿里云镜像，但是之前的阿里云镜像已经过期了，我们需要给npm设置新的阿里云镜像，才能将一下包下载下来。虽然设置了阿里云镜像，但是node-sass我看还是从github下载，下载到一半下载失败了。然后就安装cnpm 重新下载了一次，下载成功</p><h3 id="3、npm-run-dev报错"><a href="#3、npm-run-dev报错" class="headerlink" title="3、npm run dev报错"></a>3、npm run dev报错</h3><p>项目资料提供的前端项目工程，缺少了Build文件夹，导致项目启动不成功。我是直接从Gitee上拉取的项目资料。他配置git忽略文件时，将Build文件夹也设置成为了忽略对象。导致拉取的代码没有build文件夹，导致报错。由于后台vue工程是基于renren-fast-vue来改造的，所以我拉取了renren-fast-vue的项目，把build文件夹直接复制了过来<br><img src="/images/otherTechnology/3-1.png"></p><h3 id="4、npm-run-dev抛异常"><a href="#4、npm-run-dev抛异常" class="headerlink" title="4、npm run dev抛异常"></a>4、npm run dev抛异常</h3><p>这个抛异常并不是报错，是语法检查问题。eslint检查语法特别严格，我们需要注释掉这一段代码就可以了<br><img src="/images/otherTechnology/3-2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 其他技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云开通对象存储服务</title>
      <link href="/p/893c0bcb.html"/>
      <url>/p/893c0bcb.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>通常情况下，我们的浏览器都是向服务器请求资源。例如下载图片，下载视频了这一类的。但是，有的时候，浏览器需要向服务器上传文件。那么上传文件的资源存储在哪里。在单体项目下，确实是可以将上传的文件资源存储到服务器本地。但是这样会存在问题。当我们的项目集群部署的时候，是没法共享这一部分数据的。所以我们需要一种云存储的服务，能够实现在项目集群下共享这一部分数据。这个时候就需要用到云存储了。<br>阿里云对象存储服务是一种云存储服务。文件上传阿里云后会返回一个资源url。我们通过这个url可以直接请求到资源。</p><h2 id="二、如何开通阿里云对象存储服务"><a href="#二、如何开通阿里云对象存储服务" class="headerlink" title="二、如何开通阿里云对象存储服务"></a>二、如何开通阿里云对象存储服务</h2><p>1、首先你得有一个阿里云账号，登录阿里云控制台。如果没有就注册一个,这个注册也十分简单，支付宝扫码就可以注册了</p><p>官网：<a href="https://www.aliyun.com/">https://www.aliyun.com/</a></p><p><img src="/images/otherTechnology/2-1.png"><br>登录之后，搜索对象存储，点击对象存储。如果没有开通过，会有一个开通功能按钮。由于我已经开通了，就直接跳转到对象存储控制台了<br><img src="/images/otherTechnology/2-2.png"><br><img src="/images/otherTechnology/2-3.png"></p><p>开通对象存储后，点击账号下的AcessKey管理，创建一个子账户，用于代码中访问对象存储OOS。直接使用自己的主账户的AcessKey不太安全</p><p><img src="/images/otherTechnology/2-4.png"></p><p>子账户创建好了，添加权限，由于我们这个账户只是用来项目中上传文件。所以只需要授予管理权限就可以了</p><p><img src="/images/otherTechnology/2-5.png"></p><p>权限授予知乎，另外要配置跨域访问，直接搜索跨域，点击跨域设置。我们本地启动项目，启动的端口一般都是localhost:8080这种的，前端页面直接往阿里云发送请求存储是会出现跨域问题的，所以需要配置一下跨域<br><img src="/images/otherTechnology/2-6.png"></p><p><img src="/images/otherTechnology/2-7.png"><br>对于我们后端开发来说，一般一个Bucket对应一个项目。不同Bucket存储不同项目的文件。对象存储功能是付费的，这个是根据你存储文件的占用的容量有关，我们只是学习使用，占用不了多少容量，可能最终的付费不会超过一两块钱。不像是那种企业级的项目，可能就得专门开通这一块的功能了。<br>阿里云对象存储设置好了之后，下面就去代码里面集成试一下吧</p><h2 id="三、代码集成"><a href="#三、代码集成" class="headerlink" title="三、代码集成"></a>三、代码集成</h2><p>开通了对象存储的功能，平时你写博客需要上传图片啥的，也可以存储到阿里云对象存储服务上，这样的好处是你可以根据他的url链接在浏览器里可以直接访问这张图片。但是我们现在是需要后端使用。就是在Java代码中实现上传图片的功能到我们的云对象存储服务上</p><p>以下步骤均来自官网：<a href="https://help.aliyun.com/zh/oss/getting-started/sdk-quick-start?spm=a2c4g.11186623.0.0.75db1d24lpgLkw">https://help.aliyun.com/zh/oss/getting-started/sdk-quick-start?spm=a2c4g.11186623.0.0.75db1d24lpgLkw</a></p><h3 id="1、先引入Maven依赖"><a href="#1、先引入Maven依赖" class="headerlink" title="1、先引入Maven依赖"></a>1、先引入Maven依赖</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-sdk-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.15.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>如果你的JDK版本在9以上，那么需要多引入两个包</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- no more than 2.3.3--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.glassfish.jaxb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="2、编写测试代码"><a href="#2、编写测试代码" class="headerlink" title="2、编写测试代码"></a>2、编写测试代码</h3><p>步骤一：创建存储空间</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">ClientException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span>OSS<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSClientBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>common<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span><span class="token class-name">CredentialsProviderFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>common<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span><span class="token class-name">EnvironmentVariableCredentialsProvider</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。</span>        <span class="token class-name">String</span> endpoint <span class="token operator">=</span> <span class="token string">"https://oss-cn-hangzhou.aliyuncs.com"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> accessKeyId <span class="token operator">=</span> <span class="token string">"LTAI4G66cCNM2t7LKE79RaY3"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> accessKeySecret <span class="token operator">=</span> <span class="token string">"wd0KVDLCO1vVXq4q9aIPTXY7AP7rdW"</span><span class="token punctuation">;</span>        <span class="token comment">// 创建OSSClient实例。</span>        <span class="token class-name">OSS</span> ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> bucketName <span class="token operator">=</span> <span class="token string">"examplebucket"</span><span class="token punctuation">;</span>              <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 创建存储空间。</span>            ossClient<span class="token punctuation">.</span><span class="token function">createBucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OSSException</span> oe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Caught an OSSException, which means your request made it to OSS, "</span>                    <span class="token operator">+</span> <span class="token string">"but was rejected with an error response for some reason."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Message:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getErrorMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Code:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request ID:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Host ID:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getHostId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> ce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Caught an ClientException, which means the client encountered "</span>                    <span class="token operator">+</span> <span class="token string">"a serious internal problem while trying to communicate with OSS, "</span>                    <span class="token operator">+</span> <span class="token string">"such as not being able to access the network."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Message:"</span> <span class="token operator">+</span> ce<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ossClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>步骤二：上传文件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">ClientException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span>OSS<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSClientBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>common<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span><span class="token class-name">CredentialsProviderFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>common<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span><span class="token class-name">EnvironmentVariableCredentialsProvider</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。</span>        <span class="token class-name">String</span> endpoint <span class="token operator">=</span> <span class="token string">"https://oss-cn-hangzhou.aliyuncs.com"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> accessKeyId <span class="token operator">=</span> <span class="token string">"LTAI4G66cCNM2t7LKE79RaY3"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> accessKeySecret <span class="token operator">=</span> <span class="token string">"wd0KVDLCO1vVXq4q9aIPTXY7AP7rdW"</span><span class="token punctuation">;</span>        <span class="token comment">// 创建OSSClient实例。</span>        <span class="token class-name">OSS</span> ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> bucketName <span class="token operator">=</span> <span class="token string">"examplebucket"</span><span class="token punctuation">;</span>        <span class="token comment">// 填写Object完整路径，例如exampledir/exampleobject.txt。Object完整路径中不能包含Bucket名称。</span>        <span class="token class-name">String</span> objectName <span class="token operator">=</span> <span class="token string">"exampledir/exampleobject.txt"</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">"Hello OSS"</span><span class="token punctuation">;</span>            ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OSSException</span> oe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Caught an OSSException, which means your request made it to OSS, "</span>                    <span class="token operator">+</span> <span class="token string">"but was rejected with an error response for some reason."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Message:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getErrorMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Code:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request ID:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Host ID:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getHostId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> ce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Caught an ClientException, which means the client encountered "</span>                    <span class="token operator">+</span> <span class="token string">"a serious internal problem while trying to communicate with OSS, "</span>                    <span class="token operator">+</span> <span class="token string">"such as not being able to access the network."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Message:"</span> <span class="token operator">+</span> ce<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ossClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>步骤三：下载文件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">ClientException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span>OSS<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSClientBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>common<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span><span class="token class-name">CredentialsProviderFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>common<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span><span class="token class-name">EnvironmentVariableCredentialsProvider</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">OSSObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。</span>        <span class="token class-name">String</span> endpoint <span class="token operator">=</span> <span class="token string">"https://oss-cn-hangzhou.aliyuncs.com"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> accessKeyId <span class="token operator">=</span> <span class="token string">"LTAI4G66cCNM2t7LKE79RaY3"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> accessKeySecret <span class="token operator">=</span> <span class="token string">"wd0KVDLCO1vVXq4q9aIPTXY7AP7rdW"</span><span class="token punctuation">;</span>        <span class="token comment">// 创建OSSClient实例。</span>        <span class="token class-name">OSS</span> ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 填写Bucket名称，例如examplebucket。</span>        <span class="token class-name">String</span> bucketName <span class="token operator">=</span> <span class="token string">"examplebucket"</span><span class="token punctuation">;</span>        <span class="token comment">// 填写Object完整路径，例如exampledir/exampleobject.txt。Object完整路径中不能包含Bucket名称。</span>        <span class="token class-name">String</span> objectName <span class="token operator">=</span> <span class="token string">"exampledir/exampleobject.txt"</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 调用ossClient.getObject返回一个OSSObject实例，该实例包含文件内容及文件元数据。</span>            <span class="token class-name">OSSObject</span> ossObject <span class="token operator">=</span> ossClient<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用ossObject.getObjectContent获取文件输入流，可读取此输入流获取其内容。</span>            <span class="token class-name">InputStream</span> content <span class="token operator">=</span> ossObject<span class="token punctuation">.</span><span class="token function">getObjectContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>content <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>line <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 数据读取完成后，获取的流必须关闭，否则会造成连接泄漏，导致请求无连接可用，程序无法正常工作。</span>                content<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OSSException</span> oe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Caught an OSSException, which means your request made it to OSS, "</span>                    <span class="token operator">+</span> <span class="token string">"but was rejected with an error response for some reason."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Message:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getErrorMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Code:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request ID:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Host ID:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getHostId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> ce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Caught an ClientException, which means the client encountered "</span>                    <span class="token operator">+</span> <span class="token string">"a serious internal problem while trying to communicate with OSS, "</span>                    <span class="token operator">+</span> <span class="token string">"such as not being able to access the network."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Message:"</span> <span class="token operator">+</span> ce<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ossClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>步骤四：列举文件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">ClientException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span>OSS<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSClientBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>common<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span><span class="token class-name">CredentialsProviderFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>common<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span><span class="token class-name">EnvironmentVariableCredentialsProvider</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">OSSObjectSummary</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">ObjectListing</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。</span>         <span class="token class-name">String</span> endpoint <span class="token operator">=</span> <span class="token string">"https://oss-cn-hangzhou.aliyuncs.com"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> accessKeyId <span class="token operator">=</span> <span class="token string">"LTAI4G66cCNM2t7LKE79RaY3"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> accessKeySecret <span class="token operator">=</span> <span class="token string">"wd0KVDLCO1vVXq4q9aIPTXY7AP7rdW"</span><span class="token punctuation">;</span>        <span class="token comment">// 创建OSSClient实例。</span>        <span class="token class-name">OSS</span> ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> bucketName <span class="token operator">=</span> <span class="token string">"examplebucket"</span><span class="token punctuation">;</span>             <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// ossClient.listObjects返回ObjectListing实例，包含此次listObject请求的返回结果。</span>            <span class="token class-name">ObjectListing</span> objectListing <span class="token operator">=</span> ossClient<span class="token punctuation">.</span><span class="token function">listObjects</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// objectListing.getObjectSummaries获取所有文件的描述信息。</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OSSObjectSummary</span> objectSummary <span class="token operator">:</span> objectListing<span class="token punctuation">.</span><span class="token function">getObjectSummaries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" - "</span> <span class="token operator">+</span> objectSummary<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span>                        <span class="token string">"(size = "</span> <span class="token operator">+</span> objectSummary<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OSSException</span> oe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Caught an OSSException, which means your request made it to OSS, "</span>                    <span class="token operator">+</span> <span class="token string">"but was rejected with an error response for some reason."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Message:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getErrorMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Code:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request ID:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Host ID:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getHostId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> ce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Caught an ClientException, which means the client encountered "</span>                    <span class="token operator">+</span> <span class="token string">"a serious internal problem while trying to communicate with OSS, "</span>                    <span class="token operator">+</span> <span class="token string">"such as not being able to access the network."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Message:"</span> <span class="token operator">+</span> ce<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ossClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>步骤五：删除文件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">ClientException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span>OSS<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSClientBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>common<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span><span class="token class-name">CredentialsProviderFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>common<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span><span class="token class-name">EnvironmentVariableCredentialsProvider</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。</span>        <span class="token class-name">String</span> endpoint <span class="token operator">=</span> <span class="token string">"https://oss-cn-hangzhou.aliyuncs.com"</span><span class="token punctuation">;</span>             <span class="token class-name">String</span> accessKeyId <span class="token operator">=</span> <span class="token string">"LTAI4G66cCNM2t7LKE79RaY3"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> accessKeySecret <span class="token operator">=</span> <span class="token string">"wd0KVDLCO1vVXq4q9aIPTXY7AP7rdW"</span><span class="token punctuation">;</span>        <span class="token comment">// 创建OSSClient实例。</span>        <span class="token class-name">OSS</span> ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 填写Bucket名称，例如examplebucket。</span>        <span class="token class-name">String</span> bucketName <span class="token operator">=</span> <span class="token string">"examplebucket"</span><span class="token punctuation">;</span>        <span class="token comment">// 填写Object完整路径，例如exampledir/exampleobject.txt。Object完整路径中不能包含Bucket名称。</span>        <span class="token class-name">String</span> objectName <span class="token operator">=</span> <span class="token string">"exampledir/exampleobject.txt"</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 删除文件。</span>            ossClient<span class="token punctuation">.</span><span class="token function">deleteObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OSSException</span> oe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Caught an OSSException, which means your request made it to OSS, "</span>                    <span class="token operator">+</span> <span class="token string">"but was rejected with an error response for some reason."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Message:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getErrorMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Code:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request ID:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Host ID:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getHostId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> ce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Caught an ClientException, which means the client encountered "</span>                    <span class="token operator">+</span> <span class="token string">"a serious internal problem while trying to communicate with OSS, "</span>                    <span class="token operator">+</span> <span class="token string">"such as not being able to access the network."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Message:"</span> <span class="token operator">+</span> ce<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ossClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>以上的代码示例，只是简单的测试使用，真正项目中使用阿里云存储的时候，一般是单独建立一个文件上传的Controler。如果是微服务项目的话可能会创建一个OSS的微服务供其他微服务使用。</p>]]></content>
      
      
      <categories>
          
          <category> 其他技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Window11环境下安装Maven</title>
      <link href="/p/d78ae831.html"/>
      <url>/p/d78ae831.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载安装Maven"><a href="#一、下载安装Maven" class="headerlink" title="一、下载安装Maven"></a>一、下载安装Maven</h2><p>官网下载Maven。官网地址:<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p><img src="/images/toolanddeploy/enviroment_setup/2-1.jpg"></p><p>我目前下载的时候，Maven已经到了3.9.3的版本了</p><h2 id="二、配置环境变量"><a href="#二、配置环境变量" class="headerlink" title="二、配置环境变量"></a>二、配置环境变量</h2><p>由于Maven是绿色版本，只需要我们解压缩就可以使用了</p><p>创建一个MAVEN_HOME 的环境变量，变量值为具体的maven安装路径</p><p><img src="/images/toolanddeploy/enviroment_setup/2-2.jpg"></p><p>在path系统变量中添加上Maven的配置</p><p><img src="/images/toolanddeploy/enviroment_setup/2-3.jpg"></p><p>执行mvn -v 命令，测试Maven是否安装成功</p><p><img src="/images/toolanddeploy/enviroment_setup/2-4.jpg"></p><h2 id="三、修改镜像仓库"><a href="#三、修改镜像仓库" class="headerlink" title="三、修改镜像仓库"></a>三、修改镜像仓库</h2><p>修改Maven配置中的setting.xml文件的镜像地址</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具与部署 </category>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Window11环境下安装JDK8</title>
      <link href="/p/543376ec.html"/>
      <url>/p/543376ec.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载JDK"><a href="#一、下载JDK" class="headerlink" title="一、下载JDK"></a>一、下载JDK</h2><p>下载安装JDK目前有两种方式，第一种方式是去官网下载。第二种方式是直接JDK8百度网盘在线下载。一般是能搜到那种压缩包的，解压即可</p><p>方式一：在JDK官网下载<br><a href="https://www.oracle.com/java/technologies/downloads/archive/">https://www.oracle.com/java/technologies/downloads/archive/</a></p><p>方式二：百度搜索JDK压缩包百度网盘资源</p><h2 id="二、配置环境变量"><a href="#二、配置环境变量" class="headerlink" title="二、配置环境变量"></a>二、配置环境变量</h2><h3 id="2-1-新建JAVA-HOME系统变量"><a href="#2-1-新建JAVA-HOME系统变量" class="headerlink" title="2.1 新建JAVA_HOME系统变量"></a>2.1 新建JAVA_HOME系统变量</h3><p><img src="/images/toolanddeploy/enviroment_setup/1-1.jpg"></p><p>变量名称: JAVA_HOME<br>变量值 : 具体你安装JDK环境目录</p><h3 id="2-2-配置Path系统环境"><a href="#2-2-配置Path系统环境" class="headerlink" title="2.2 配置Path系统环境"></a>2.2 配置Path系统环境</h3><p><img src="/images/toolanddeploy/enviroment_setup/1-2.jpg"></p><p>找到Path环境变量，在Path变量中，添加下面两行</p><h3 id="2-3-验证JDK是否安装成功"><a href="#2-3-验证JDK是否安装成功" class="headerlink" title="2.3 验证JDK是否安装成功"></a>2.3 验证JDK是否安装成功</h3><p>打开命令行窗口，输入命令 java -version。如果输出具体的版本，则证明安装成功。注意我们开启的命令行窗口需要环境变量配置好了再开启。如果你是配置前开启的命令行窗口，很有可能环境变量配置好了，输入java -version 也没有展示</p><p><img src="/images/toolanddeploy/enviroment_setup/1-3.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 工具与部署 </category>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis批量插入数据的几种方法</title>
      <link href="/p/16439a24.html"/>
      <url>/p/16439a24.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在开发的过程中，经常会对数据库进行批量插入数据的处理。今天刚好来说说这个MyBatis框架批量插入数据的几种方法，以及来对比一下他们之间的效率。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>1、使用idea开发工具创建一个SpringBoot工程。这个就不用多说了吧<br>2、pom.xml添加依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xuzhi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>3、创建数据库，我使用的是mysql数据库，直接新建一个数据库，再建一张user表就可以了，我们甚至可以连SQL语句都不需要。字段包括id,username,password。其中id字段是自增的。</p><p>4、编写User实体类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>5、编写UserMapper类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Param</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"userList"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>6、编写UserMapper.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xuzhi.demo.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xuzhi.demo.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAllUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xuzhi.demo.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xuzhi.demo.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into user(username,password) value(#&#123;username&#125;,#&#123;password&#125;)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertBatch<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into user(username,password)        values        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userList<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            (#&#123;user.username&#125;,#&#123;user.password&#125;)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>7、启动类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.xuzhi.demo.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>8、application.yml</p><pre class="language-yml" data-language="yml"><code class="language-yml">spring:  datasource:    username: root    password: root    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;true&amp;serverTimezone&#x3D;UTC    driver-class-name: com.mysql.jdbc.Drivermybatis:  mapper-locations: classpath:mapper&#x2F;*Mapper.xml  type-aliases-package: com.xuzhi.demo.entity</code></pre><p>这里我们基本的环境就算是搭好了。我们来编写一个测试类来测试一下我们的环境是否搭建正确<br>9、测试类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">ExecutorType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSession</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Transactional</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_getAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> allUser <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">test_insertBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        userMapper<span class="token punctuation">.</span><span class="token function">insertBatch</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>以上这个三个测试方法，主要是用于测试我们的xml文件中的SQL语句是否编写正确</p><h2 id="批量插入数据的方法"><a href="#批量插入数据的方法" class="headerlink" title="批量插入数据的方法"></a>批量插入数据的方法</h2><h3 id="方法一：单纯for循环遍历插入"><a href="#方法一：单纯for循环遍历插入" class="headerlink" title="方法一：单纯for循环遍历插入"></a>方法一：单纯for循环遍历插入</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 方法一：使用for循环批量插入     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert_batch_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"name"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"password"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span> <span class="token operator">+</span><span class="token punctuation">(</span>end <span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--------------"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p><img src="/images/frame/mybatis/1-1.png"></p><p>使用for循环插入1000条数据大概是花费了44839ms的时间。</p><h3 id="方法二：使用for循环-但是用到了MyBatis框架自带的批量处理器"><a href="#方法二：使用for循环-但是用到了MyBatis框架自带的批量处理器" class="headerlink" title="方法二：使用for循环,但是用到了MyBatis框架自带的批量处理器"></a>方法二：使用for循环,但是用到了MyBatis框架自带的批量处理器</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 方法二：使用for循环,但是用到了MyBatis框架自带的批量处理器     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert_batch_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionTemplate<span class="token punctuation">.</span><span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span>BATCH<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//跟上述sql区别</span>        <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"name_batch"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"password_batch"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>使用Batch处理器之后，快了一点，花费了43527ms。</p><p><img src="/images/frame/mybatis/1-2.png"></p><h3 id="方法三：使用foreach标签"><a href="#方法三：使用foreach标签" class="headerlink" title="方法三：使用foreach标签"></a>方法三：使用foreach标签</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 方法三：使用foreach标签    */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert_batch_three</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"name_foreach"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>           user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"password_forrach"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>           userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       userMapper<span class="token punctuation">.</span><span class="token function">insertBatch</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><p><img src="/images/frame/mybatis/1-3.png"><br>这种方式最快，只用了1724ms。但是有一个问题。使用foreach标签后SQL语句会很长。如果说我们的数据量太大，可能会造成内存溢出。所以当数据量太大的时候，我们需要分批次处理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们使用MyBatis框架批量插入数据，一般最好是分批次来处理，一次处理的数据量太大，很容易造成内存溢出等等各种问题。</p>]]></content>
      
      
      <categories>
          
          <category> 框架技术 </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro实战教程</title>
      <link href="/p/9cde3973.html"/>
      <url>/p/9cde3973.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="权限的管理"><a href="#权限的管理" class="headerlink" title="权限的管理"></a>权限的管理</h2><h3 id="什么是权限管理"><a href="#什么是权限管理" class="headerlink" title="什么是权限管理"></a>什么是权限管理</h3><p>权限管理这个名词好理解，就是不同身份的用户拥有着不同的权限，那生活中的案例来举例子吧，比方说你上班，某一天需要请假。那你的开请假条，要你领导签字吧。领导就拥有批假的权限。那么我们做系统也是一样，需要对参与系统的用户进行权限管理，就拿普通的影视网站来举例，最直接的表示就是网站会员。你只有开了会员，你才能享受什么叫做免广告，什么是高清蓝光，什么是会员免费看。很多影片都只正对会员用户才开放。<br>现在的网站，哪一个没有设置会员。所以说，权限管理在系统运用上十分的常见。那么，如何去实现系统的权限管理呢。也就是说对用户访问系统进行控制呢?这也就是我们学习的目的所在。<br>权限管理，它包含了身份认证和授权两个部分。简称认证授权。系统对需要访问控制的资源首先进行身份认证，认证通过后具有该资源的访问权限。</p><h3 id="什么是身份认证"><a href="#什么是身份认证" class="headerlink" title="什么是身份认证"></a>什么是身份认证</h3><p>身份认证，官方的解释就是判断一个用户是否为合法用户。其实身份认证这个东西，这个我们每天都在接触。只是你可能没有发觉。最基础常见的身份认证就是输入用户名和密码登录某系统，这就是一个身份认证的过程，有时候我们需要手机验证码来完成登录系统，这个目的也是为了身份认证。包括我们生活中使用支付宝的指纹支付，刷脸支付。这些都是身份认证。</p><h3 id="什么是授权"><a href="#什么是授权" class="headerlink" title="什么是授权"></a>什么是授权</h3><p>授权，就是访问控制，控制谁能访问哪些资源。你之后通过身份认证之后，才会授予你相应的权限。我所住的小区是刷脸出入的，你通过刷脸进行身份认证，认证成功后，就有了开门的权限。</p><h2 id="什么是Shiro"><a href="#什么是Shiro" class="headerlink" title="什么是Shiro"></a>什么是Shiro</h2><p>Shiro官网：<a href="https://shiro.apache.org/">https://shiro.apache.org/</a></p><p>Shiro是apache旗下的一款开源框架，他将软件系统的安全认证相关功能抽取出来，实现用户身份认证，权限授权，加密，会话管理等功能，组成了一个通用的安全认证框架。</p><h2 id="Shiro的核心框架结构"><a href="#Shiro的核心框架结构" class="headerlink" title="Shiro的核心框架结构"></a>Shiro的核心框架结构</h2><p><img src="/images/shiro/1-1.png" alt="Shiro核心架构图"></p><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><p>Subject即主体，外部应用与Subject交互,subject记录当前操作用户，将用户的概念理解为当前操作的主体，可能是一个通过浏览器请求的用户，也可能是一个运行的程序。Subject在Shiro中是一个接口，接口中定义了很多认证授权相关的方法，外部程序通过subject进行认证授权，而subject是通过SecurityManager安全管理器进行认证授权</p><h3 id="SecurityManager"><a href="#SecurityManager" class="headerlink" title="SecurityManager"></a>SecurityManager</h3><p>SecurityManger即安全管理器，对全部的subject进行安全管理，它是shiro的核心，负责对所有的subject进行安全管理。通过SecurityManager可以完成subject的认证和授权等。实质上，SecurityManager是通过Authenticator进行认证，通过Authorize进行授权，通过SessionManager进行会话管理等。</p><p>SecurityManager是一个接口，继承了Authenticator，Authorizer，SessionManager这三个接口。</p><h3 id="Authenticator"><a href="#Authenticator" class="headerlink" title="Authenticator"></a>Authenticator</h3><p>Authenticator即认证器，对用户身份进行认证，Authenticator是一个接口，shiro提供ModularRealAuthenticator实现类，通过odularRealAuthenticator基本上可以满足大多数的需求，也可以自定义认证器。</p><h3 id="Authorizer"><a href="#Authorizer" class="headerlink" title="Authorizer"></a>Authorizer</h3><p>Authorizer即授权器，用户通过认证器认证通过，在访问功能时需要通过授权器判断用户是否有此功能的操作权限。</p><h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h3><p>Realm即领域，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限的数据，比如：某个用户身份数据在数据库，那么realm就需要从数据库获取用户身份认证信息。<br>注意：不要把realm理解成只是从数据源取数据，在realm中还有认证授权校验的相关代码</p><h3 id="SessionManager"><a href="#SessionManager" class="headerlink" title="SessionManager"></a>SessionManager</h3><p>sessionManager即会话管理器，shiro框架定义了一套会话管理，它不依赖web容器的session，所以shiro可以使用在非web应用上，也可以将分布式应用的会话集中在一点管理，此特性可以使他实现单点登录。</p><h3 id="SessionDao"><a href="#SessionDao" class="headerlink" title="SessionDao"></a>SessionDao</h3><p>SessionDao即会话Dao，是对会话操作的一套接口，比如要将session存储到数据库，可以通过jdbc将会话存储到数据库</p><h3 id="CacheManager"><a href="#CacheManager" class="headerlink" title="CacheManager"></a>CacheManager</h3><p>CacheManager即缓存管理，将用户权限数据存储在缓存，这样可以提高性能</p><h3 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h3><p>Cryptography即密码管理器，shiro提供了一套加密、解密的组件，方便开发，比如提供常用的散列，加密和解密功能</p><h2 id="Shiro中的认证"><a href="#Shiro中的认证" class="headerlink" title="Shiro中的认证"></a>Shiro中的认证</h2><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>身份认证，就是判断一个用户是否为合法用户的处理过程，最常用简单的认证方式就是系统通过核对用户输入的用户名和密码与数据库中存储的数据库和密码是否一致来进行认证。</p><h3 id="shiro中认证的关键对象"><a href="#shiro中认证的关键对象" class="headerlink" title="shiro中认证的关键对象"></a>shiro中认证的关键对象</h3><p>subject：主体<br>访问系统的用户，主体可以是用户、程序等，进行认证的都称为主体</p><p>Principal：身份信息、<br>是主体进行身份认证的标识，标识必须具有唯一性，如用户名，手机号，邮箱地址等，一个主体可以有多个身份，但必须要有一个主身份</p><p>credential：凭证信息<br>只有主体自己知道的安全信息，如密码，证书等。</p><h3 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h3><p><img src="/images/shiro/1-2.png" alt="认证流程图"></p><h3 id="认证的开发"><a href="#认证的开发" class="headerlink" title="认证的开发"></a>认证的开发</h3><p>1、创建一个idea工程maven项目，这个不用多说什么。配置好你本地的jdk和maven。<br>2、在pom.xml文件中添加如下依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>3、在项目工程的resource文件夹下增加一个shiro.ini文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>users<span class="token punctuation">]</span><span class="token assign-left variable">xuzhi</span><span class="token operator">=</span><span class="token number">123</span><span class="token assign-left variable">zhangsan</span><span class="token operator">=</span><span class="token number">123</span><span class="token assign-left variable">lisi</span><span class="token operator">=</span><span class="token number">123</span></code></pre><p>4、编写一个测试类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span></span><span class="token class-name">SecurityUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span></span><span class="token class-name">IncorrectCredentialsException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span></span><span class="token class-name">UnknownAccountException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span></span><span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span></span><span class="token class-name">DefaultSecurityManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>realm<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">IniRealm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span></span><span class="token class-name">Subject</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAuthenticator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.创建安全管理器对象</span>        <span class="token class-name">DefaultSecurityManager</span> securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.给安全管理器设置realm</span>        securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IniRealm</span><span class="token punctuation">(</span><span class="token string">"classpath:shiro.ini"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.SecurityUtils  给全局安全工具类设置安全管理器</span>        <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.关键对象 subject 主体</span>        <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.创建令牌</span>        <span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"xuzhi"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证状态："</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//用户认证</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证状态："</span><span class="token operator">+</span>subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证失败，用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证失败，密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行main方法<br><img src="/images/shiro/1-3.png"></p><h3 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h3><p><img src="/images/shiro/1-4.png"></p>]]></content>
      
      
      <categories>
          
          <category> 框架技术 </category>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java定时任务与quartz框架使用</title>
      <link href="/p/bf5f1898.html"/>
      <url>/p/bf5f1898.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于工作上的需要，需要做一个定时任务的这么一个功能。接触到了Quartz框架。这里就想着写一篇博客来记录一下，这个框架如何使用以及一些相关的知识点。Java本身也是支持相关的定时任务，当都是那种较为简单的逻辑的。比如说每隔多久执行一次了，不能让我们有选择。比如说我想每个月的1号执行，那这样使用Java当中的定时任务就不太好实现，就得依赖相关的框架了。</p><h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h1><h2 id="小顶堆"><a href="#小顶堆" class="headerlink" title="小顶堆"></a>小顶堆</h2><p>什么是小顶堆？有些人可能并不了解，它是一种数据结构。小顶堆是一种经过排序的完全二叉树。注意是这里说的完全二叉树。</p><p>那么什么是完全二叉树呢？官方给出的答案是，假设一棵二叉树的深度为h，那么除了第h层外，其他各层的节点数量都要达到最大。并且第h层的所有节点都需要连续集中在最左边。<br><img src="/images/frame/springboot/1-1.png"></p><p><img src="/images/frame/springboot/1-2.png"></p><p>说到这里，大家对完全二叉树应该已经有所了解了。那么我们再来说会小顶堆。</p><p>小顶堆有两个特点：<br>1、完全二叉树<br>2、每个节点的值都比父节点的值要大</p><p><img src="/images/frame/springboot/1-3.png"></p><p>堆是一种逻辑上的数据结构，我们一般是可以用数组或者链表来实现这个数据结构。这里就不展开讲述。关于堆中插入和删除元素，堆的内部是如何进行堆化的，大家有兴趣的话可以自行去了解一下。对于小顶堆来说，无论我们删除或者插入节点。根节点永远是最小的。这就是小顶堆的特性。</p><p>那么为什么要先说小顶堆呢？很多人可能并不理解，我们在应用定时任务的时候，大多都是会有多个定时任务的。那么这些定时任务的执行先后顺序是需要有一个排序的。比如说A任务8点执行，B任务8点10分执行，C任务11点执行。系统需要根据任务执行的先后顺序来进行一个排序。而小顶堆的优势就是它的父节点永远是最小的。我们要执行的时候，只需要将父节点取出来即可。取出之后小顶堆会有一个“堆化”的这么一个过程。又会选出最小的节点放在父节点的位置上。</p><h2 id="时间轮算法"><a href="#时间轮算法" class="headerlink" title="时间轮算法"></a>时间轮算法</h2><p>说完小顶堆，我们来说一说时间轮算法。比喻说我们要执行一个定时任务，那么怎么做到这个定时呢。这里就涉及到了一些算法。一般来说，我们的定时任务可以分为两种，一种是约定一段时间后执行，另一种是约定某个时间点执行。这两者之间也是可以相互转换的。比如说现在是上午八点，我希望这个任务在下午一点执行，我也可以说这个任务在五小时后执行。</p><h3 id="链表和数组实现时间轮"><a href="#链表和数组实现时间轮" class="headerlink" title="链表和数组实现时间轮"></a>链表和数组实现时间轮</h3><p>使用数组和链表来实现时间轮，这个方式是最简单的。比如说一天是24个小时，那么我们就可以创建一个长度为24的数组。数组的下标用来表示时间的点数0-23嘛，数组里存放的内容是链表，链表的节点放置任务。当我们在某一个时间点有多个任务的时候，我们可以增加链表的长度。</p><p><img src="/images/frame/springboot/1-4.png"></p><p><strong>分析</strong><br>看完这个，你会发现这种方式是存在问题的，我只有24个格子，每个格子对应整点。那么如果我有任务想在10:05分执行怎么办？对吧。这样我们只能增加格子的数量，来提高精度。如果说我们有任务想在两天后执行，那么我们也要去增加格子的长度。此时，相信你已经发现问题所在了，这种方式是不是非常的不灵活，当我们的格子数量越多，存储空间会变得更大，利用率变得更低。</p><h3 id="round时间轮"><a href="#round时间轮" class="headerlink" title="round时间轮"></a>round时间轮</h3><p>比如说我现在有三个任务需要执行，任务一：周二上午九点。任务二：周四上午九点。任务三：周五12点执行。这次我们还是使用24个格子，不增加格子数量。但是在原来的数组和链表的基础之上，我们在任务上记录一个round值，遍历到了就减一，到0就取出执行。假设当前是周一，那么任务一的表示就是round=1,加上九个刻度。任务二是round=3,加上九个刻度。任务三是round=4，加上12个刻度。round表示的是天数。</p><p><strong>分析</strong><br>虽然这种方法，较上面一种要好一点，但是依然存在问题，我们每次都需要遍历所有的任务，效率极低，还增加耗时。因此在大多数的情况下不适用。</p><h3 id="分层时间轮"><a href="#分层时间轮" class="headerlink" title="分层时间轮"></a>分层时间轮</h3><p>使用多个不同维度的时间轮。<br>天轮：时间刻度是小时，记录几点执行。<br>周轮：时间刻度是天，记录周几执行。<br>月轮：时间刻度是天，记录几号执行。</p><p>月轮遍历到了，将任务取出放到天轮里面。即可实现几号几点执行。同理也可以实现周几几点执行。</p><h1 id="定时任务的几种实现方法"><a href="#定时任务的几种实现方法" class="headerlink" title="定时任务的几种实现方法"></a>定时任务的几种实现方法</h1><h2 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h2><p>Timer是JDK自带的定时任务执行类，不论任何项目都可以使用timer来实现定时任务，所以Timer的优点是使用方便。<br>首先我们的定义一个任务</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>timer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TimerTask</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooTimerTask</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">FooTimerTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//定义任务的内容</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",startTime="</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",endTime="</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>timer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Timer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TimerTask</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimerTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Timer</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//计数器，任务启动</span><span class="token comment">//通过循环创建了两个任务，一个是foo0,一个是foo1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimerTask</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FooTimerTask</span><span class="token punctuation">(</span><span class="token string">"foo"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//每两秒执行一次此任务</span>            t<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//任务添加</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/images/frame/springboot/1-5.png"></p><p>以上就是Timer类的一个简单的应用。从上述的运行结果我们发现问题。我的定时任务是每两秒执行一次。但是执行一次任务需要三秒的时间。这样我们发现，任务在调度的时候，时间间隔不止两秒，也就是说我们的任务延期执行了。第二点，我们有两个任务，这两个任务的执行是单线程执行的，并不是并发执行。这样的会，如果其中一个任务抛出了异常，那么另外一个任务也会受到影响。</p><p><strong>小结</strong><br>Timer 类实现定时任务的优点是方便，因为它是 JDK 自定的定时任务，但缺点是任务如果执行时间太长或者是任务执行异常，会影响其他任务调度，所以在生产环境下建议谨慎使用。</p><h2 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h2><p>ScheduledExecutorService 也是 JDK 1.5 自带的 API，我们可以使用它来实现定时任务的功能，也就是说 ScheduledExecutorService 可以实现 Timer 类具备的所有功能，并且它可以解决了 Timer 类存在的所有问题。</p><p>定义一个任务的内容</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>pool</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",startTime="</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",endTime="</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>pool</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ScheduledExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleThreadPoolTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScheduledExecutorService</span> scheduledThreadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            scheduledThreadPool<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token string">"task"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/images/frame/springboot/1-6.png"><br>这个代码和上面的代码实现的功能一样。每两秒执行一次定时任务，定时任务执行一次需要三秒。也会出现延迟执行的问题。但是我们可以返现，两个任务是并发执行的。也就是说这两个任务之间并不影响，即使其中的一个任务抛出了异常，另外一个任务也会继续走下去。</p><h2 id="Quartz框架"><a href="#Quartz框架" class="headerlink" title="Quartz框架"></a>Quartz框架</h2><p>终于要开始说这个Quartz框架了。我们在idea中创建一个SpringBoot项目。引入相关的依赖。毕竟后面会进行SpringBoot整合Quartz框架。创建SpringBoot的项目会方便一点。<br>先引入下面依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>quatrz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>下图是Quartz的框架图<br><img src="/images/frame/springboot/1-7.png"></p><p>1.Quartz是一个开源的任务调度框架。基于定时、定期的策略来执行任务是它的核心功能，比如x年x月的每个星期五上午8点到9点，每隔10分钟执行1次。</p><p>2.Quartz有3个核心要素：调度器(Scheduler)、任务(Job)、触发器(Trigger)。</p><p>2.1.Job（任务）：是一个接口，有一个方法void execute()，可以通过实现该接口来定义需要执行的任务（具体的逻辑代码）。<br>2.2.JobDetail:Quartz每次执行job时，都重新创建一个Job实例，会接收一个Job实现类，以便运行的时候通过newInstance()的反射调用机制去实例化Job.JobDetail是用来描述Job实现类以及相关静态信息，比如任务在scheduler中的组名等信息。<br>2.3.Trigger（触发器）：描述触发Job执行的时间触发规则实现类SimpleTrigger和CronTrigger可以通过crom表达式定义出各种复杂的调度方案。<br>2.4.Calendar：是一些日历特定时间的集合。一个Trigger可以和多个 calendar关联,比如每周一早上10:00执行任务，法定假日不执行，则可以通过calendar进行定点排除。<br>2.5.Scheduler（调度器）：代表一个Quartz的独立运行容器。Trigger和JobDetail可以注册到Scheduler中。Scheduler可以将Trigger绑定到某一JobDetail上，这样当Trigger被触发时，对应的Job就会执行。一个Job可以对应多个Trigger，但一个Trigger只能对应一个Job.</p><p>先写一个简单的案例来演示一下Quartz框架的使用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>quartz</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">JobExecutionContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">JobExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"myjob 执行"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>quartz</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJob</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JobDetail</span> jobDetail<span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">MyJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span><span class="token string">"group1"</span><span class="token punctuation">)</span>   <span class="token comment">//任务名称，分组</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//触发器</span>        <span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span><span class="token string">"trigger1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">SimpleScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span>trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/images/frame/springboot/1-8.png"><br>以上这就是Quartz框架的一个简单的应用。</p><h3 id="jobDataMap如何使用"><a href="#jobDataMap如何使用" class="headerlink" title="jobDataMap如何使用"></a>jobDataMap如何使用</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>quartz</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">JobDataMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">JobExecutionContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">JobExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JobDataMap</span> jobDetailMap <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JobDataMap</span> triggerMap <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jobDetailMap"</span><span class="token operator">+</span>jobDetailMap<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"triggerMap"</span><span class="token operator">+</span>triggerMap<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>quartz</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJob</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JobDetail</span> jobDetail<span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">MyJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span><span class="token string">"group1"</span><span class="token punctuation">)</span>   <span class="token comment">//任务名称，分组</span>                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"job"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//触发器</span>        <span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span><span class="token string">"trigger1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"trigger"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">SimpleScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span><span class="token function">getDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span>trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/images/frame/springboot/1-9.png"></p><h3 id="Job并发以及持久化"><a href="#Job并发以及持久化" class="headerlink" title="Job并发以及持久化"></a>Job并发以及持久化</h3><p>Scheduler每次执行，都会根据JobDetail创建一个新的Job实例。这样可以规避并发访问的问题。我们修改一下MyJob类，看看每次创建的Job的HashCode</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>quartz</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">JobDataMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">JobExecutionContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">JobExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jobDetail:"</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>jobExecutionContext<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"job:"</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>jobExecutionContext<span class="token punctuation">.</span><span class="token function">getJobInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/images/frame/springboot/1-10.png"></p><p>@DisallowConcurrentException  此注解用于关闭并发执行，放在MyJob类</p><p>@PersistJobDataAfterExecution   将我们的JobDataMap进行持久化，对TriggerMap无效</p><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>触发器是用于指定执行时间，开始结束时间等。</p><p>触发器中有一个优先级的概念，同时触发的trigger之间会进行比较优先级。如果trigger是可以恢复的，在恢复是在调度时，优先级不变。</p><p>错过触发：Job到达了触发时间却没有被执行。<br>可能原因：<br>1、当Job到达触发时间时，所有线程被其他的Job占用，没有可用的线程<br>2、在Job需要触发的时间点，scheduler停止了<br>3、job使用了@DisallowConcurrentException注解，job不能并发执行，当达到下一个job执行点的时候，上一个任务还没有完成<br>4、Job指定了过去的开始执行时间，例如当前时间时8点0分，指定的开始时间为7点</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是相关的Java定时任务以及Quartz框架的基本使用了。关于SpringBoot整合Quartz框架以及实现持久化存储放在下一篇文章里面吧。</p>]]></content>
      
      
      <categories>
          
          <category> 框架技术 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> quartz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础介绍</title>
      <link href="/p/a28f19f9.html"/>
      <url>/p/a28f19f9.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这里使用的redis环境是在docker上拉取的一个redis镜像。使用起来方便一些。当然了，如果你只是为了学习使用，也可以采用window环境下的redis来使用。Redis 作者没有为 Windows 编写 Redis 服务端，微软自行编写了一个 Redis 服务端，<br>可用于基本的测试和学习。不过版本较低。</p><h1 id="Redis定位与特性"><a href="#Redis定位与特性" class="headerlink" title="Redis定位与特性"></a>Redis定位与特性</h1><h2 id="SQL与NOSQL"><a href="#SQL与NOSQL" class="headerlink" title="SQL与NOSQL"></a>SQL与NOSQL</h2><p>很多时候，我们首先会考虑使用关系型数据库来存储我们的数据。比较常见的就是MySQL和Oracle数据库。</p><p>关系型数据库特点：<br>1、以表格的形式展示，基于行存储数据，是二维的结构<br>2、它存储的是结构化的数据，数据存储有固定的模式，数据需要适应表结构<br>3、表与表之间存在关联<br>4、大部分关系型数据库都支持SQL操作，支持复杂的关联查询<br>5、通过支持事务来提供严格或者实时的数据一致性</p><p>关系型数据库限制：<br>1、实现扩容只能是垂直扩容。比如说磁盘限制了数据的存储，就需要扩大磁盘的容量，不支持动态的扩缩容。水平扩容需要复杂的技术来实现，比如分库分表。<br>2、表结构修改困难，存储数据受到限制。<br>3、在高并发高数据量的情况下，关系型数据库通常会数据持久化到磁盘，基于磁盘的读写压力较大。</p><p>为了规避关系型数据库的一系列问题，就出现了非关系型数据库。<br>非关系型数据库特点：<br>1、存储非结构化的数据，比如说文本、图片、音频、视频。<br>2、表与表之间没有关联，可扩展性强<br>3、保证数据的最终一致性<br>4、支持海量数据的存储和高并发的高效读写<br>5、支持分布式，能够对数据进行分片存储，扩缩容简单</p><h2 id="Redis特性"><a href="#Redis特性" class="headerlink" title="Redis特性"></a>Redis特性</h2><p>1、丰富的数据类型<br>2、进程内跨进程；单机与分布式<br>3、支持持久化机制，过期策略<br>4、支持多种编程语言<br>5、高可用，集群</p><h1 id="Redis相关的基本操作"><a href="#Redis相关的基本操作" class="headerlink" title="Redis相关的基本操作"></a>Redis相关的基本操作</h1><p>这里先列举一下Redis数据库的一些基础命令</p><pre class="language-txt" data-language="txt"><code class="language-txt">1、Redis默认有16个数据库（编号0-15），我们可以在配置文件中修改，默认使用的是第一个db0。数据库之间没有完全的隔离2、切换数据库select 03、清空当前数据库flushdb4、清空所有数据库flushall5、存值set key value6、取值get key7、查看所有的键keys *8、获取键的总数量dbsize9、查看键是否存在exists key10、删除键del key11、重命名键rename key newkey12、查看类型type key</code></pre><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><h1 id="特殊数据结构"><a href="#特殊数据结构" class="headerlink" title="特殊数据结构"></a>特殊数据结构</h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是Redis的入门介绍以及基本数据类型的介绍。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle中表结构如何复制</title>
      <link href="/p/84b3f9c5.html"/>
      <url>/p/84b3f9c5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天需要创建一个request临时表，这个request正式表已经在Oracle数据库中存在了，我需要将正式表的表结构复制下来，然后用这个表结构来创建一个临时表。刚开始的想法是找到建表语句，复制一份，改一下表名称就可以。可是没有找到。后来想到Oracle数据库直接可以复制表结构和数据。我们直接写SQL语句来实现</p><h2 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h2><p><strong>1、创建一张新表，这个表和原来的表结构一样</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> new_table <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> old_table  <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>这种创建方式，仅仅只是复制了表结构，不会将表中的数据复制过来。也就是说新创建的这张表里是没有数据的</p><p><strong>2、创建一张新表，这个表里有原来表中的数据</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> new_table <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> old_table<span class="token punctuation">;</span></code></pre><p>这种创建方式是直接将旧表的表结构和数据全部都放到新表当中</p><p><strong>3、复制一个表的数据到另外一张表中</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> new_table <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> old_table<span class="token punctuation">;</span></code></pre><p>这个语句不涉及建表。而是这两张表在数据库中已经存在，并且表结构一样。才能将A表的数据复制到B表当中</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>工作当中，我们会发现，一个普通的request表，可能会有临时表request_tmp，历史表request_history表。这三张表的表结构是一样的，但对应业务场景时，确实有区别的。比如说，我们在接受到申请后，将所有的申请数据全部存入request_tmp临时表当中，然后对临时表中的数据进行校验或者其他操作，检验通过后放入request正式表。至于历史表，则存放历史申请数据，方便出现问题的时候，我们可以查询历史数据</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL中的exist关键字用法</title>
      <link href="/p/81ee767f.html"/>
      <url>/p/81ee767f.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在编写SQL语句的时候，我们难免会用到exist关键字。而这个exist关键字在某些场景下和in关键字又有一点像，很多人可能分不清楚，那么就来看看他们之间的区别是什么。</p><h1 id="exist-与-not-exist"><a href="#exist-与-not-exist" class="headerlink" title="exist 与 not exist"></a>exist 与 not exist</h1><p>首先来说exist关键字，这个单词的意思翻译成中文就是“存在”的意思。使用exist关键字，它返回的结果是一个布尔值。我们来看一下效果。先来执行一下<br>select t.* from user t 来看看表中的数据。<br><img src="/images/database/base/1-1.png"></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">and</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> <span class="token keyword">user</span> t <span class="token keyword">where</span> t<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">'xuzhi'</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">and</span> <span class="token boolean">TRUE</span></code></pre><p>我们来执行以上两条SQL。它们的返回结果是一样的。因为表中存在username=’xuzhi’的数据，所以EXISTS (select 1 from user t where t.username = ‘xuzhi’)返回的结果是true。我们可以理解为上述两条SQL是等效的。如果exist里面的查询语句没有查询到数据，那么返回的结果就是false。</p><p>同样的道理，not exist的用法是一样的。它只不过是exist的一个取反的逻辑。</p><h1 id="in-与-not-in"><a href="#in-与-not-in" class="headerlink" title="in 与 not in"></a>in 与 not in</h1><p>我们再来看看in和Not in。这个也比较好理解，in关键字返回的结果一般是一个集合。它主要是对某一个字段进行限制，表示这个字段的值只能在这个范围内取值。多用于子查询，但是数据量大的情况下。效率不算太好。看看SQL来演示一下。</p><p><img src="/images/database/base/1-2.png"></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> a<span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">and</span> a<span class="token punctuation">.</span>id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> t<span class="token punctuation">.</span>id <span class="token keyword">from</span> <span class="token keyword">user</span> t <span class="token keyword">where</span> t<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">'xuzhi'</span><span class="token punctuation">)</span><span class="token comment">//查询用户表中，id值为1,2,3,4的数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> a<span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">and</span> a<span class="token punctuation">.</span>id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">)</span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在某些情况下，exist关键字和in关键字达到的效果是一样的。但是不太推荐in这种写法，当数据量比较大的时候，也就是说返回集合中的数据量多的时候，in关键字的效率是非常低的，查询起来比较耗时间。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据库理论基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库explain关键字讲解</title>
      <link href="/p/1a5032ce.html"/>
      <url>/p/1a5032ce.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在使用MySQL数据库的时候，当数据库的数据量大了之后，一个查询很可能就会耗费非常长的时间。这个时候，我们知道给字段的加索引。但是有时候建立了索引，查询语句不一定会走索引。这个时候就需要开发人员来分析，处理，调优了。</p><h2 id="MySQL-Query-Qptimizer"><a href="#MySQL-Query-Qptimizer" class="headerlink" title="MySQL Query Qptimizer"></a>MySQL Query Qptimizer</h2><p>1、MySql中有专门负责优化的select 语句的优化器模块，主要功能：通过计算分析系统中收集到的统计信息，为客户端请求的Query提供它认为最优的执行计划（它认为最优的数据检索方式，但不见得是DBA认为最优的）</p><p>2、当客户端向Mysql请求一条Query，命令解析器模块完成请求分类，区别出是select然后转发给Mysql Query Optimizer，Mysql Query Optimizer首先会对整条Query进行优化，处理掉一些常量表达式的预算，直接换算成常量值。并对Query中的查询条件进行简化和转换，如去掉一些无用或显而易见的条件、结构调整等。然后分析Query中Hint信息，看显示的Hint信息是否可以完全确定该Query的执行计划，如果没哟Hint或Hint还不足以完全确定执行计划，则会读取所涉及的对象的统计信息，根据Query进行写相应的计算分析，然后得出最后的执行计划。</p><h2 id="MySQL常见瓶颈"><a href="#MySQL常见瓶颈" class="headerlink" title="MySQL常见瓶颈"></a>MySQL常见瓶颈</h2><p>造成MySQL性能常见瓶颈的主要有以下三个方面：</p><p>1、CPU：CPU在饱和的时候一般发生在数据装入内存或者从磁盘上读取数据的时候</p><p>2、IO：磁盘I/O瓶颈发生在装入数据远大于内存容量的时候</p><p>3、服务器硬件的性能瓶颈：top,free,iostat和vmstat来查看系统的性能状态</p><h2 id="Explaian"><a href="#Explaian" class="headerlink" title="Explaian"></a>Explaian</h2><h3 id="explain是什么"><a href="#explain是什么" class="headerlink" title="explain是什么"></a>explain是什么</h3><p>使用Explain关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是如何处理你的SQL语句。分析你的查询语句或是表结构的性能瓶颈。我们根据自己的分析后，去调整SQL语句，或者做一些其他的操作来提升SQL性能。</p><p>并不是使用了这个关键字之后，SQL语句的性能就提升了。</p><h3 id="explain怎么使用"><a href="#explain怎么使用" class="headerlink" title="explain怎么使用"></a>explain怎么使用</h3><p>使用方式：Explain+SQL语句<br><img src="/images/database/mysql/4-1.png"></p><h3 id="explain能干啥"><a href="#explain能干啥" class="headerlink" title="explain能干啥"></a>explain能干啥</h3><p>使用exlpain关键字之后，我们可以了解到：</p><p>表的读取顺序</p><p>数据读取操作的数据类型</p><p>哪些索引可以使用</p><p>哪些索引被实际使用</p><p>表之间的引用</p><p>每张表有多少行被优化器查询</p><h3 id="字段解释"><a href="#字段解释" class="headerlink" title="字段解释"></a>字段解释</h3><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>select查询的序列号，包含一组数字，表示查询中执行的select字句或者操作表的顺序.</p><p>三种情况：<br><strong>1、id相同，执行顺序由上而下</strong><br><img src="/images/database/mysql/4-2.png"></p><p><strong>2、id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</strong><br><img src="/images/database/mysql/4-3.png"></p><p><strong>3、id相同不同，同时存在。id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行</strong><br><img src="/images/database/mysql/4-4.png"></p><h4 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h4><p><img src="/images/database/mysql/4-5.png"><br>查询类型，主要适用于区别普通查询、联合查询、子查询等复杂查询</p><p>1、SIMPLE：简单的select查询，查询中不包含子查询或者UNION</p><p>2、PRIMARY：查询中包含任何复杂的字部分，最外层查询被标记为PRIMARY</p><p>3、SUBQUERY：在SELECT或WHERE列表中包含子查询</p><p>4、DERIVED：在FROM列表中包含的子查询被标记为DERIVED，MySQL会递归执行这些子查询，把结果放在临时表里</p><p>5、UNION：若第二个SELECT出现在UNION之后，则被标记为UNION；若UNION包含在FROM字句的子查询中，外层的SELECT将被标记为DERIVED</p><p>6、UNION REDULT：从UNION表中获取结果的SELECT</p><h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><p>显示这一行数据属于那张表</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>type字段显示查询使用了何种类型<br><img src="/images/database/mysql/4-6.png"><br>从最好到最差的依次是：</p><p>system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL</p><p>1、system：表中只有一行记录，这是const类型的特例，平时不会出现，可以忽略不计</p><p>2、const：表示通过索引一次就找到了，const用于比较primary key或者unique索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL将该查询转换成为一个常量</p><p>3、eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条数据与之匹配。常见于主键或唯一索引的扫描</p><p>4、ref：非唯一性索引扫描，返回匹配某个单独值的所有行，本质上也是一种索引访问，它返回的所有匹配某个单独值的行，然而，他可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体</p><p>5、range：只检索给定的范围行，使用一个索引来选择行。key列显示使用了哪个索引，一般就是在你的where语句中出现了between、&lt;、&gt;、in等查询，这种范围扫描索引要比全表扫描要好，因为它只需开始于索引的某一点，结束于另一点，不用扫描全部索引</p><p>6、index：全索引扫描，Index和all区别是index只遍历索引树，这通常比all快，因为索引文件通常比数据文件小</p><p>7、all：全表扫描，将遍历全表以找到匹配的行</p><p><strong>一般来说，得保证查询至少达到range级别，最好是ref</strong></p><h4 id="possible-key"><a href="#possible-key" class="headerlink" title="possible_key"></a>possible_key</h4><p>显示可能应用在这张表中的索引，一个或者多个。查询涉及到的字段上若存在索引，则该索引被列出，但不一定被查询实际使用</p><h4 id="key"><a href="#key" class="headerlink" title="key"></a>key</h4><p>实际使用的索引，如果为null,则没有使用索引</p><p>查询中若使用了覆盖索引，则该索引仅出现在key的列表中 </p><h4 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h4><p>表示索引中使用的字节数，可通过该列计算擦讯中使用的索引长度。在不损失精度的情况下，长度越短越好，key_len显示的值为索引字段的最大可能长度，并非实际使用的长度，即key_len是根据表定义计算而得的，不是通过表内检索出的</p><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p>显示索引的那一列被使用了，如果可能的话，最好是一个常数，哪些列或常量被用于查找索引上的值</p><h4 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h4><p>根据表统计信息及索引选用情况，大致估算出找到所需记录要读取的行数.<br><img src="/images/database/mysql/4-7.png"></p><h4 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h4><p>包含不适合在其他列展示但又十分重要的信息</p><p>1、Using filesort：说明mysql会对数据使用一个外部索引的排序，而不是按照表内的索引顺序进行读取。MySQL中无法利用索引完成的排序操作称为“文件排序”</p><p>2、Using temporary：使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于排序order by 和分组group by<br><img src="/images/database/mysql/4-8.png"></p><p>3、Using index</p><p>表示相应的select操作中使用了覆盖索引，避免访问了表的数据行，效率不错。如果同时出现using where，表明索引被用来执行索引键值的查找；如果没有同时出现using where，表明索引用来读取数据而非执行查找操作<br><img src="/images/database/mysql/4-9.png"></p><p>覆盖索引：查询列被所建的索引覆盖</p><p>注意：</p><p>如果要使用覆盖索引，一定要注意select列表中只取出需要的列，不可select *</p><p>因为如果将所有的字段一起做索引会导致索引文件过大，查询性能下降</p><p>4、Using where</p><p>使用了where过滤</p><p>5、Using join buffer</p><p>使用了连接缓存</p><p>6、impossible where</p><p>where子句的值总是false，不能用来获取任何元组</p><p><img src="/images/database/mysql/4-10.png"><br>7、select tables optimized away</p><p>在没有group by子句的情况下，基于索引优化的MIN/MAX操作或者对于MyISAM存储引擎优化的count(*) 操作，不必等到执行阶段在进行计算，查询执行计划生成的阶段即完成优化</p><p>8、distinct</p><p>优化distinct操作，在找到第一匹配的元组后停止找同样值的动作</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>explain关键字是非常重要的一个关键字呢。我们需要掌握如何使用explain关键字来分析SQL语句</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL架构与执行流程</title>
      <link href="/p/ce0a1d6a.html"/>
      <url>/p/ce0a1d6a.html</url>
      
        <content type="html"><![CDATA[<h2 id="一条查询SQL语句是如何执行的？"><a href="#一条查询SQL语句是如何执行的？" class="headerlink" title="一条查询SQL语句是如何执行的？"></a>一条查询SQL语句是如何执行的？</h2><p>我们使用JDBC访问数据库的步骤：<br>1、获取连接<br>2、加载驱动<br>3、编写SQL<br>4、执行SQL<br>5、获取结果集</p><p><img src="/images/database/mysql/5-1.png"></p><h3 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h3><p>首先，MySQL 必须要运行一个服务，监听默认的 3306 端口。</p><p>在我们开发系统跟第三方对接的时候，必须要弄清楚的有两件事。</p><p>第一个就是通信协议，比如我们是用 HTTP 还是 WebService 还是 TCP？</p><p>第二个是消息格式，比如我们用 XML 格式，还是 JSON 格式，还是定长格式？报文头长度多少，包含什么内容，每个字段的详细含义。</p><p>比如我们跟银联对接，银联的银行卡联网规范，约定了一种比较复杂的通讯协<br>议叫做：四进四出单工异步长连接（为了保证稳定性和性能）</p><p><img src="/images/database/mysql/5-2.png"></p><h4 id="通信协议-1"><a href="#通信协议-1" class="headerlink" title="通信协议"></a>通信协议</h4><p>MySQL 是支持多种通信协议的，可以使用同步/异步的方式，支持长连接/短连接。这里我们拆分来看。第一个是通信类型。</p><p><strong>通信类型：同步或者异步</strong><br>同步通信的特点：<br>1、同步通信依赖于被调用方，受限于被调用方的性能。也就是说，应用操作数据库，<br>线程会阻塞，等待数据库的返回。<br>2、一般只能做到一对一，很难做到一对多的通信。</p><p>异步通信特点：<br>1、异步可以避免应用阻塞等待，但是不能节省 SQL 执行的时间。<br>2、如果异步存在并发，每一个 SQL 的执行都要单独建立一个连接，避免数据混乱。<br>但是这样会给服务端带来巨大的压力（一个连接就会创建一个线程，线程间切换会占用<br>大量 CPU 资源）。另外异步通信还带来了编码的复杂度，所以一般不建议使用。如果要<br>异步，必须使用连接池，排队从连接池获取连接而不是创建新连接。<br>一般来说我们连接数据库都是同步连接。</p><p><strong>连接方式：长连接或者短连接</strong><br>MySQL 既支持短连接，也支持长连接。短连接就是操作完毕以后，马上 close 掉。<br>长连接可以保持打开，减少服务端创建和释放连接的消耗，后面的程序访问的时候还可<br>以使用这个连接。一般我们会在连接池中使用长连接。</p><p>保持长连接会消耗内存。长时间不活动的连接，MySQL 服务器会断开。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'wait_timeout'</span><span class="token punctuation">;</span> <span class="token comment">-- 非交互式超时时间，如 JDBC 程序</span><span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'interactive_timeout'</span><span class="token punctuation">;</span> <span class="token comment">-- 交互式超时时间，如数据库工具</span></code></pre><p>默认都是 28800 秒，8 小时。<br>我们怎么查看 MySQL 当前有多少个连接？<br>可以用 show status 命令：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Thread%'</span><span class="token punctuation">;</span></code></pre><p>Threads_cached：缓存中的线程连接数。<br>Threads_connected：当前打开的连接数。<br>Threads_created：为处理连接创建的线程数。<br>Threads_running：非睡眠状态的连接数，通常指并发连接数。</p><p>每产生一个连接或者一个会话，在服务端就会创建一个线程来处理。反过来，如果要<br>杀死会话，就是 Kill 线程。</p><p>有了连接数，怎么知道当前连接的状态？<br>也可以使用 SHOW PROCESSLIST; （root 用户）查看 SQL 的执行状态。<br><img src="/images/database/mysql/5-3.png"></p><p>一些常见的状态：<br><img src="/images/database/mysql/5-4.png"><br>MySQL 服务允许的最大连接数是多少呢？<br>在 5.7 版本中默认是 151 个，最大可以设置成 16384（2^14）</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'max_connection'</span><span class="token punctuation">;</span></code></pre><p>show 的参数说明：<br>1、级别：会话 session 级别（默认）；全局 global 级别<br>2、动态修改：set，重启后失效；永久生效，修改配置文件/etc/my.cnf</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> max_connections <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span></code></pre><p><strong>通信协议</strong><br>MySQL 支持哪些通信协议呢？<br>第一种是 Unix Socket。<br>比如我们在 Linux 服务器上，如果没有指定-h 参数，它就用 socket 方式登录（省略<br>了-S /var/lib/mysql/mysql.sock）。</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql</code></pre><p>它不用通过网络协议，也可以连接到 MySQL 的服务器，它需要用到服务器上的一个<br>物理文件（/var/lib/mysql/mysql.sock）</p><p>如果指定-h 参数，就会用第二种方式，TCP/IP 协议。</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>h192<span class="token punctuation">.</span><span class="token number">168.8</span><span class="token number">.211</span> <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456</code></pre><p>我们的编程语言的连接模块都是用 TCP 协议连接到 MySQL 服务器的，比如<br>mysql-connector-java-x.x.xx.jar。<br><img src="/images/database/mysql/5-5.png"><br>另外还有命名管道（Named Pipes）和内存共享（Share Memory）的方式，这两种<br>通信方式只能在 Windows 上面使用，一般用得比较少。</p><h4 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h4><p>第二个是通信方式。<br><img src="/images/database/mysql/5-6.png"><br>单工：<br>在两台计算机通信的时候，数据的传输是单向的。生活中的类比：遥控器。</p><p>半双工：<br>在两台计算机之间，数据传输是双向的，你可以给我发送，我也可以给你发送，<br>但是在这个通讯连接里面，同一时间只能有一台服务器在发送数据，也就是你要给我发<br>的话，也必须等我发给你完了之后才能给我发。生活中的类比：对讲机</p><p>全双工：<br>数据的传输是双向的，并且可以同时传输。生活中的类比：打电话。</p><p>MySQL 使用了半双工的通信方式？</p><p>要么是客户端向服务端发送数据，要么是服务端向客户端发送数据，这两个动作不能<br>同时发生。所以客户端发送 SQL 语句给服务端的时候，（在一次连接里面）数据是不能<br>分成小块发送的，不管你的 SQL 语句有多大，都是一次性发送。</p><p>比如我们用 MyBatis 动态 SQL 生成了一个批量插入的语句，插入 10 万条数据，values<br>后面跟了一长串的内容，或者 where 条件 in 里面的值太多，会出现问题。</p><p>这个时候我们必须要调整 MySQL 服务器配置 max_allowed_packet 参数的值（默认<br>是 4M），把它调大，否则就会报错。</p><p>另一方面，对于服务端来说，也是一次性发送所有的数据，不能因为你已经取到了想<br>要的数据就中断操作，这个时候会对网络和内存产生大量消耗。</p><p>所以，我们一定要在程序里面避免不带 limit 的这种操作，比如一次把所有满足条件<br>的数据全部查出来，一定要先 count 一下。如果数据量的话，可以分批查询。</p><p>执行一条查询语句，客户端跟服务端建立连接之后呢？下一步要做什么？</p><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>MySQL 内部自带了一个缓存模块。<br>缓存的作用我们应该很清楚了，把数据以 KV 的形式放到内存里面，可以加快数据的读取速度，也可以减少服务器处理的时间。但是 MySQL 的缓存我们好像比较陌生，从来没有去配置过，也不知道它什么时候生效？</p><p>比如 user_innodb表 有 500 万行数据，没有索引。我们在没有索引的字段上执行同样<br>的查询，大家觉得第二次会快吗？</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_innodb <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'小敏'</span><span class="token punctuation">;</span></code></pre><p>缓存没有生效，为什么？MySQL 的缓存默认是关闭的。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'query_cache'</span><span class="token punctuation">;</span></code></pre><p>默认关闭的意思就是不推荐使用，为什么 MySQL 不推荐使用它自带的缓存呢？</p><p>主要是因为 MySQL 自带的缓存的应用场景有限，第一个是它要求 SQL 语句必须一模一样，中间多一个空格，字母大小写不同都被认为是不同的的 SQL。</p><p>第二个是表里面任何一条数据发生变化的时候，这张表所有缓存都会失效，所以对于有大量数据更新的应用，也不适合。</p><p>所以缓存这一块，我们还是交给 ORM 框架（比如 MyBatis 默认开启了一级缓存），或者独立的缓存服务，比如 Redis 来处理更合适。</p><p>在 MySQL 8.0 中，查询缓存已经被移除了。</p><h3 id="语法解析和预处理"><a href="#语法解析和预处理" class="headerlink" title="语法解析和预处理"></a>语法解析和预处理</h3><p>我们没有使用缓存的话，就会跳过缓存的模块，下一步我们要做什么呢？OK，这里我会有一个疑问，为什么我的一条 SQL 语句能够被识别呢？假如我随便执行一个字符串 penyuyan，服务器报了一个 1064 的错：</p><pre class="language-txt" data-language="txt"><code class="language-txt">[Err] 1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for theright syntax to use near 'penyuyan' at line 1</code></pre><p>MySQL它是怎么知道我输入的内容是错误的?<br>这个就是 MySQL 的 Parser 解析器和 Preprocessor 预处理模块。<br>这一步主要做的事情是对语句基于 SQL 语法进行词法和语法分析和语义的解析。</p><h4 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h4><p>词法分析就是把一个完整的 SQL 语句打碎成一个个的单词。<br>比如一个简单的 SQL 语句：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> wher id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>它会打碎成 8 个符号，每个符号是什么类型，从哪里开始到哪里结束。</p><h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><p>第二步就是语法分析，语法分析会对 SQL 做一些语法检查，比如单引号有没有闭合，<br>然后根据 MySQL 定义的语法规则，根据 SQL 语句生成一个数据结构。这个数据结构我<br>们把它叫做解析树（select_lex）。<br><img src="/images/database/mysql/5-7.png"><br>任何数据库的中间件，比如 Mycat，Sharding-JDBC（用到了 Druid Parser），都必须要有词法和语法分析功能，在市面上也有很多的开源的词法解析的工具（比如 LEX，Yacc)。</p><h4 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h4><p>问题：如果我写了一个词法和语法都正确的 SQL，但是表名或者字段不存在，会在哪里报错？是在数据库的执行层还是解析器？比如：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> penyuyan<span class="token punctuation">;</span></code></pre><p>解析器可以分析语法，但是它怎么知道数据库里面有什么表，表里面有什么字段呢？实际上还是在解析的时候报错，解析 SQL 的环节里面有个预处理器。</p><p>它会检查生成的解析树，解决解析器无法解析的语义。比如，它会检查表和列名是否存在，检查名字和别名，保证没有歧义。</p><p>预处理之后得到一个新的解析树。</p><h3 id="查询优化与查询执行计划"><a href="#查询优化与查询执行计划" class="headerlink" title="查询优化与查询执行计划"></a>查询优化与查询执行计划</h3><h4 id="什么是优化器"><a href="#什么是优化器" class="headerlink" title="什么是优化器"></a>什么是优化器</h4><p>得到解析树之后，是不是执行 SQL 语句了呢？</p><p>这里我们有一个问题，一条 SQL 语句是不是只有一种执行方式？或者说数据库最终执行的 SQL 是不是就是我们发送的 SQL？</p><p>这个答案是否定的。一条 SQL 语句是可以有很多种执行方式的，最终返回相同的结果，他们是等价的。但是如果有这么多种执行方式，这些执行方式怎么得到的？最终选择哪一种去执行？根据什么判断标准去选择？</p><p>这个就是 MySQL 的查询优化器的模块（Optimizer）。</p><p>查询优化器的目的就是根据解析树生成不同的执行计划（Execution Plan），然后选择一种最优的执行计划，MySQL 里面使用的是基于开销（cost）的优化器，那种执行计划开销最小，就用哪种。<br>可以使用这个命令查看查询的开销：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Last_query_cost'</span><span class="token punctuation">;</span></code></pre><h4 id="优化器可以做什么？"><a href="#优化器可以做什么？" class="headerlink" title="优化器可以做什么？"></a>优化器可以做什么？</h4><p>MySQL 的优化器能处理哪些优化类型呢？<br>举两个简单的例子：<br>1、当我们对多张表进行关联查询的时候，以哪个表的数据作为基准表。<br>2、有多个索引可以使用的时候，选择哪个索引。</p><p>实际上，对于每一种数据库来说，优化器的模块都是必不可少的，他们通过复杂的算法实现尽可能优化查询效率的目标。</p><p>但是优化器也不是万能的，并不是再垃圾的 SQL 语句都能自动优化，也不是每次都能选择到最优的执行计划，大家在编写 SQL 语句的时候还是要注意。</p><p>如果我们想知道优化器是怎么工作的，它生成了几种执行计划，每种执行计划的 cost是多少，应该怎么做？</p><h4 id="优化器是怎么得到执行计划的？"><a href="#优化器是怎么得到执行计划的？" class="headerlink" title="优化器是怎么得到执行计划的？"></a>优化器是怎么得到执行计划的？</h4><p>首先我们要启用优化器的追踪（默认是关闭的）：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'optimizer_trace'</span><span class="token punctuation">;</span><span class="token keyword">set</span> optimizer_trace<span class="token operator">=</span><span class="token string">'enabled=on'</span><span class="token punctuation">;</span></code></pre><p>注意开启这开关是会消耗性能的，因为它要把优化分析的结果写到表里面，所以不要轻易开启，或者查看完之后关闭它（改成 off）。</p><p>注意：参数分为 session 和 global 级别。</p><p>接着我们执行一个 SQL 语句，优化器会生成执行计划:</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> t<span class="token punctuation">.</span>tcid <span class="token keyword">from</span> teacher t<span class="token punctuation">,</span>teacher_contact tc <span class="token keyword">where</span> t<span class="token punctuation">.</span>tcid <span class="token operator">=</span> tc<span class="token punctuation">.</span>tcid<span class="token punctuation">;</span></code></pre><p>这个时候优化器分析的过程已经记录到系统表里面了，我们可以查询：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>optimizer_trace\G</code></pre><p>它是一个 JSON 类型的数据，主要分成三部分，准备阶段、优化阶段和执行阶段。<br><img src="/images/database/mysql/5-8.png"><br>expanded_query 是优化后的 SQL 语句。<br>considered_execution_plans 里面列出了所有的执行计划。<br>分析完记得关掉它：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> optimizer_trace<span class="token operator">=</span><span class="token string">"enabled=off"</span><span class="token punctuation">;</span><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'optimizer_trace'</span><span class="token punctuation">;</span></code></pre><h4 id="优化器得到的结果"><a href="#优化器得到的结果" class="headerlink" title="优化器得到的结果"></a>优化器得到的结果</h4><p>优化完之后，得到一个什么东西呢？<br>优化器最终会把解析树变成一个查询执行计划，查询执行计划是一个数据结构。<br>当然，这个执行计划是不是一定是最优的执行计划呢？不一定，因为 MySQL 也有可<br>能覆盖不到所有的执行计划。<br>我们怎么查看 MySQL 的执行计划呢？比如多张表关联查询，先查询哪张表？在执行<br>查询的时候可能用到哪些索引，实际上用到了什么索引？<br>MySQL 提供了一个执行计划的工具。我们在 SQL 语句前面加上 EXPLAIN，就可以<br>看到执行计划的信息。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>*注意 Explain 的结果也不一定最终执行的方式。</p><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>得到执行计划以后，SQL 语句是不是终于可以执行了？<br>问题又来了：<br>1、从逻辑的角度来说，我们的数据是放在哪里的，或者说放在一个什么结构里面？<br>2、执行计划在哪里执行？是谁去执行？</p><h4 id="存储引擎基本介绍"><a href="#存储引擎基本介绍" class="headerlink" title="存储引擎基本介绍"></a>存储引擎基本介绍</h4><p>我们先回答第一个问题：在关系型数据库里面，数据是放在什么结构里面的？<br>（放在表 Table 里面的）<br>我们可以把这个表理解成 Excel 电子表格的形式。所以我们的表在存储数据的同时，<br>还要组织数据的存储结构，这个存储结构就是由我们的存储引擎决定的，所以我们也可<br>以把存储引擎叫做表类型。<br>在 MySQL 里面，支持多种存储引擎，他们是可以替换的，所以叫做插件式的存储引<br>擎。为什么要搞这么多存储引擎呢？一种还不够用吗？</p><h4 id="查看存储引擎"><a href="#查看存储引擎" class="headerlink" title="查看存储引擎"></a>查看存储引擎</h4><p>比如我们数据库里面已经存在的表，我们怎么查看它们的存储引擎呢？</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">table</span> <span class="token keyword">status</span> <span class="token keyword">from</span> <span class="token punctuation">`</span>test<span class="token punctuation">`</span><span class="token punctuation">;</span></code></pre><p><img src="/images/database/mysql/5-9.png"><br>或者通过 DDL 建表语句来查看。</p><p>在 MySQL 里面，我们创建的每一张表都可以指定它的存储引擎，而不是一个数据库只能使用一个存储引擎。存储引擎的使用是以表为单位的。而且，创建表之后还可以修改存储引擎。</p><p>我们说一张表使用的存储引擎决定我们存储数据的结构，那在服务器上它们是怎么<br>存储的呢？我们先要找到数据库存放数据的路径：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'datadir'</span><span class="token punctuation">;</span></code></pre><p>默认情况下，每个数据库有一个自己文件夹，以 gupao 数据库为例。<br>任何一个存储引擎都有一个 frm 文件，这个是表结构定义文件<br><img src="/images/database/mysql/5-10.png"><br>不同的存储引擎存放数据的方式不一样，产生的文件也不一样，innodb 是 1 个，<br>memory 没有，myisam 是两个。<br>这些存储引擎的差别在哪呢？</p><h4 id="存储引擎比较"><a href="#存储引擎比较" class="headerlink" title="存储引擎比较"></a>存储引擎比较</h4><p><strong>常见存储引擎</strong><br>MyISAM 和 InnoDB 是我们用得最多的两个存储引擎，在 MySQL 5.5 版本之前，<br>默认的存储引擎是 MyISAM，它是 MySQL 自带的。我们创建表的时候不指定存储引擎，<br>它就会使用 MyISAM 作为存储引擎。<br>MyISAM 的前身是 ISAM（Indexed Sequential Access Method：利用索引，顺序<br>存取数据的方法）。<br>5.5 版本之后默认的存储引擎改成了 InnoDB，它是第三方公司为 MySQL 开发的。<br>为什么要改呢？最主要的原因还是 InnoDB 支持事务，支持行级别的锁，对于业务一致<br>性要求高的场景来说更适合。<br>这个里面又有 Oracle 和 MySQL 公司的一段恩怨情仇。<br>InnoDB 本来是 InnobaseOy 公司开发的，它和 MySQL AB 公司合作开源了 InnoDB<br>的代码。但是没想到 MySQL 的竞争对手 Oracle 把 InnobaseOy 收购了。<br>后来 08 年 Sun 公司（开发 Java 语言的 Sun）收购了 MySQL AB，09 年 Sun 公司<br>又被 Oracle 收购了，所以 MySQL，InnoDB 又是一家了。有人觉得 MySQL 越来越像<br>Oracle，其实也是这个原因。<br><img src="/images/database/mysql/5-11.png"><br>那么除了这两个我们最熟悉的存储引擎，数据库还支持其他哪些常用的存储引擎<br>呢？</p><p><strong>数据库支持的存储引擎</strong><br>我们可以用这个命令查看数据库对存储引擎的支持情况：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> engines <span class="token punctuation">;</span></code></pre><p>其中有存储引擎的描述和对事务、XA 协议和 Savepoints 的支持。</p><p>XA 协议用来实现分布式事务（分为本地资源管理器，事务管理器）。</p><p>Savepoints 用来实现子事务（嵌套事务）。创建了一个 Savepoints 之后，事务就可以回滚到这个点，不会影响到创建 Savepoints 之前的操做。<br><img src="/images/database/mysql/5-12.png"><br>这些数据库支持的存储引擎，分别有什么特性呢？</p><p><strong>MyISAM(三个文件)</strong><br>应用范围比较小。表级锁定限制了读/写的性能，因此在 Web 和数据仓库配置中，<br>它通常用于只读或以读为主的工作。<br>特点：<br>支持表级别的锁（插入和更新会锁表）。不支持事务。<br>拥有较高的插入（insert）和查询（select）速度。<br>存储了表的行数（count 速度更快）。<br>（怎么快速向数据库插入 100 万条数据？我们有一种先用 MyISAM 插入数据，然后<br>修改存储引擎为 InnoDB 的操作。）<br>适合：只读之类的数据分析的项目。</p><p><strong>InnoDB(2个文件)</strong><br>mysql 5.7 中的默认存储引擎。InnoDB 是一个事务安全（与 ACID 兼容）的 MySQL存储引擎，它具有提交、回滚和崩溃恢复功能来保护用户数据。InnoDB 行级锁（不升级为更粗粒度的锁）和 Oracle 风格的一致非锁读提高了多用户并发性和性能。InnoDB 将用户数据存储在聚集索引中，以减少基于主键的常见查询的 I/O。为了保持数据完整性，InnoDB 还支持外键引用完整性约束。<br>特点：<br>支持事务，支持外键，因此数据的完整性、一致性更高。<br>支持行级别的锁和表级别的锁。<br>支持读写并发，写不阻塞读（MVCC）。<br>特殊的索引存放方式，可以减少 IO，提升查询效率。<br>适合：经常更新的表，存在并发读写或者有事务处理的业务系统。</p><p><strong>Memory(1个文件)</strong><br>将所有数据存储在 RAM 中，以便在需要快速查找非关键数据的环境中快速访问。这<br>个引擎以前被称为堆引擎。其使用案例正在减少；InnoDB 及其缓冲池内存区域提供了一<br>种通用、持久的方法来将大部分或所有数据保存在内存中，而 ndbcluster 为大型分布式<br>数据集提供了快速的键值查找。<br>特点：<br>把数据放在内存里面，读写的速度很快，但是数据库重启或者崩溃，数据会全部消<br>失。只适合做临时表。<br>将表中的数据存储到内存中。</p><p><strong>CSV(3个文件)</strong><br>它的表实际上是带有逗号分隔值的文本文件。csv表允许以csv格式导入或转储数据，<br>以便与读写相同格式的脚本和应用程序交换数据。因为 csv 表没有索引，所以通常在正<br>常操作期间将数据保存在 innodb 表中，并且只在导入或导出阶段使用 csv 表。<br>特点：不允许空行，不支持索引。格式通用，可以直接编辑，适合在不同数据库之<br>间导入导出。</p><p><strong>Archive(2个文件)</strong><br>这些紧凑的未索引的表用于存储和检索大量很少引用的历史、存档或安全审计信息。<br>特点：不支持索引，不支持 update delete。<br>这是 MySQL 里面常见的一些存储引擎，我们看到了，不同的存储引擎提供的特性都<br>不一样，它们有不同的存储机制、索引方式、锁定水平等功能。<br>我们在不同的业务场景中对数据操作的要求不同，就可以选择不同的存储引擎来满<br>足我们的需求，这个就是 MySQL 支持这么多存储引擎的原因。</p><h4 id="如何选择存储引擎？"><a href="#如何选择存储引擎？" class="headerlink" title="如何选择存储引擎？"></a>如何选择存储引擎？</h4><p>如果对数据一致性要求比较高，需要事务支持，可以选择 InnoDB。<br>如果数据查询多更新少，对查询性能要求比较高，可以选择 MyISAM。<br>如果需要一个用于查询的临时表，可以选择 Memory。<br>如果所有的存储引擎都不能满足你的需求，并且技术能力足够，可以根据官网内部<br>手册用 C 语言开发一个存储引擎：</p><h3 id="执行引擎，返回结果"><a href="#执行引擎，返回结果" class="headerlink" title="执行引擎，返回结果"></a>执行引擎，返回结果</h3><p>OK，存储引擎分析完了，它是我们存储数据的形式，继续第二个问题，是谁使用执<br>行计划去操作存储引擎呢？<br>这就是我们的执行引擎，它利用存储引擎提供的相应的 API 来完成操作。<br>为什么我们修改了表的存储引擎，操作方式不需要做任何改变？因为不同功能的存<br>储引擎实现的 API 是相同的。<br>最后把数据返回给客户端，即使没有结果也要返回。</p><h2 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h2><h3 id="模块详解"><a href="#模块详解" class="headerlink" title="模块详解"></a>模块详解</h3><p><img src="/images/database/mysql/5-13.png"><br>1、 Connector：用来支持各种语言和 SQL 的交互，比如 PHP，Python，Java 的JDBC；<br>2、 Management Serveices &amp; Utilities：系统管理和控制工具，包括备份恢复MySQL 复制、集群等等；<br>3、 Connection Pool：连接池，管理需要缓冲的资源，包括用户密码权限线程等等；<br>4、 SQL Interface：用来接收用户的 SQL 命令，返回用户需要的查询结果<br>5、 Parser：用来解析 SQL 语句；<br>6、 Optimizer：查询优化器；<br>7、 Cache and Buffer：查询缓存，除了行记录的缓存之外，还有表缓存，Key 缓<br>存，权限缓存等等；<br>8、 Pluggable Storage Engines：插件式存储引擎，它提供 API 给服务层使用，<br>跟具体的文件打交道。</p><h3 id="架构分层"><a href="#架构分层" class="headerlink" title="架构分层"></a>架构分层</h3><p>总体上，我们可以把 MySQL 分成三层，跟客户端对接的连接层，真正执行操作的服<br>务层，和跟硬件打交道的存储引擎层。<br><img src="/images/database/mysql/5-14.png"></p><h4 id="连接层"><a href="#连接层" class="headerlink" title="连接层"></a>连接层</h4><p>我们的客户端要连接到 MySQL 服务器 3306 端口，必须要跟服务端建立连接，那么管理所有的连接，验证客户端的身份和权限，这些功能就在连接层完成。</p><h4 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h4><p>连接层会把 SQL 语句交给服务层，这里面又包含一系列的流程：<br>比如查询缓存的判断、根据 SQL 调用相应的接口，对我们的 SQL 语句进行词法和语法的解析（比如关键字怎么识别，别名怎么识别，语法有没有错误等等）。<br>然后就是优化器，MySQL 底层会根据一定的规则对我们的 SQL<br>语句进行优化，最后再交给执行器去执行。</p><h4 id="存储引擎-1"><a href="#存储引擎-1" class="headerlink" title="存储引擎"></a>存储引擎</h4><p>存储引擎就是我们的数据真正存放的地方，在 MySQL 里面支持不同的存储引擎。再往下就是内存或者磁盘。</p><h2 id="一条更新SQL语句是如何执行的"><a href="#一条更新SQL语句是如何执行的" class="headerlink" title="一条更新SQL语句是如何执行的"></a>一条更新SQL语句是如何执行的</h2><p>在数据库里面，我们说的更新操作其实包括了更新、插入和删除。如果有看过 MyBatis 的源码，应该知道 Executor 里面也只有 doQuery()和 doUpdate()的方法，没有 doDelete()和 doInsert()。</p><p>更新流程和查询流程有什么不同呢？<br>基本流程也是一致的，也就是说，它也要经过解析器、优化器的处理，最后交给执行器。区别就在于拿到符合条件的数据之后的操作。</p><h3 id="缓冲池"><a href="#缓冲池" class="headerlink" title="缓冲池"></a>缓冲池</h3><p>首先，InnnoDB 的数据都是放在磁盘上的，InnoDB 操作数据有一个最小的逻辑单位，叫做页（索引页和数据页）。我们对于数据的操作，不是每次都直接操作磁盘，因为磁盘的速度太慢了。InnoDB 使用了一种缓冲池的技术，也就是把磁盘读到的页放到一块内存区域里面。这个内存区域就叫 Buffer Pool<br><img src="/images/database/mysql/5-15.png"><br>下一次读取相同的页，先判断是不是在缓冲池里面，如果是，就直接读取，不用再次访问磁盘。</p><p>修改数据的时候，先修改缓冲池里面的页。内存的数据页和磁盘数据不一致的时候，我们把它叫做脏页。InnoDB 里面有专门的后台线程把 Buffer Pool 的数据写入到磁盘，每隔一段时间就一次性地把多个修改写入磁盘，这个动作就叫做刷脏。</p><p>Buffer Pool 是 InnoDB 里面非常重要的一个结构，它的内部又分成几块区域。这里我们趁机到官网来认识一下 InnoDB 的内存结构和磁盘结构。</p><h3 id="InnoDB内存结构和磁盘结构"><a href="#InnoDB内存结构和磁盘结构" class="headerlink" title="InnoDB内存结构和磁盘结构"></a>InnoDB内存结构和磁盘结构</h3><p><img src="/images/database/mysql/5-16.png"></p><h4 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h4><p>Buffer Pool 主要分为 3 个部分： Buffer Pool、Change Buffer、Adaptive Hash<br>Index，另外还有一个（redo）log buffer。</p><p><strong>1、Buffer Pool</strong><br>Buffer Pool 缓存的是页面信息，包括数据页、索引页。<br>查看服务器状态，里面有很多跟 Buffer Pool 相关的信息；</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'%innodb_buffer_pool%'</span></code></pre><p><img src="/images/database/mysql/5-17.png"><br>Buffer Pool 默认大小是 128M（134217728 字节），可以调整</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">like</span> <span class="token string">'%innodb_buffer_pool%'</span></code></pre><p><img src="/images/database/mysql/5-18.png"><br>内存的缓冲池写满了怎么办？（Redis 设置的内存满了怎么办？）InnoDB 用 LRU算法来管理缓冲池（链表实现，不是传统的 LRU，分成了 young 和 old），经过淘汰的数据就是热点数据。</p><p>内存缓冲区对于提升读写性能有很大的作用。思考一个问题：<br>当需要更新一个数据页时，如果数据页在 Buffer Pool 中存在，那么就直接更新好了。否则的话就需要从磁盘加载到内存，再对内存的数据页进行操作。也就是说，如果没有命中缓冲池，至少要产生一次磁盘 IO，有没有优化的方式呢？</p><p><strong>2、Change Buffer 写缓冲</strong><br>如果这个数据页不是唯一索引，不存在数据重复的情况，也就不需要从磁盘加载索引页判断数据是不是重复（唯一性检查）。这种情况下可以先把修改记录在内存的缓冲池中，从而提升更新语句（Insert、Delete、Update）的执行速度。</p><p>这一块区域就是 Change Buffer。5.5 之前叫 Insert Buffer 插入缓冲，现在也能支持 delete 和 update。</p><p>最后把 Change Buffer 记录到数据页的操作叫做 merge。什么时候发生 merge？有几种情况：在访问这个数据页的时候，或者通过后台线程、或者数据库 shut down、<br>redo log 写满时触发。</p><p>如果数据库大部分索引都是非唯一索引，并且业务是写多读少，不会在写数据后立刻读取，就可以使用 Change Buffer（写缓冲）。写多读少的业务，调大这个值：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'innodb_change_buffer_max_size'</span><span class="token punctuation">;</span></code></pre><p>代表 Change Buffer 占 Buffer Pool 的比例，默认 25</p><p><strong>3、Adaptive Hash Index</strong><br>索引应该是放在磁盘的，哈希的索引放到内存</p><p><strong>4、（redo）Log Buffer</strong><br>如果 Buffer Pool 里面的脏页还没有刷入磁盘时，数据库宕机或者重启，这些数据丢失。如果写操作写到一半，甚至可能会破坏数据文件导致数据库不可用。</p><p>为了避免这个问题，InnoDB 把所有对页面的修改操作专门写入一个日志文件，并且在数据库启动时从这个文件进行恢复操作（实现 crash-safe）——用它来实现事务的持久性<br><img src="/images/database/mysql/5-19.png"><br>这个文件就是磁盘的 redo log（叫做重做日志），对应于/var/lib/mysql/目录下的<br>ib_logfile0 和 ib_logfile1，每个 48M。<br>这 种 日 志 和 磁 盘 配 合 的 整 个 过 程 ， 其 实 就 是 MySQL 里 的 WAL 技 术<br>（Write-Ahead Logging），它的关键点就是先写日志，再写磁盘。</p><p>问题：<br>同样是写磁盘，为什么不直接写到 db file 里面去？为什么先写日志再写磁盘？<br>我们先来了解一下随机 I/O 和顺序 I/O 的概念。<br>磁盘的最小组成单元是扇区，通常是 512 个字节。<br>操作系统和内存打交道，最小的单位是页 Page。<br>操作系统和磁盘打交道，读写磁盘，最小的单位是块 Block。<br><img src="/images/database/mysql/5-20.png"></p><p>如果我们所需要的数据是随机分散在不同页的不同扇区中，那么找到相应的数据需要等到磁臂旋转到指定的页，然后盘片寻找到对应的扇区，才能找到我们所需要的一块数据，一次进行此过程直到找完所有数据，这个就是随机 IO，读取数据速度较慢。假设我们已经找到了第一块数据，并且其他所需的数据就在这一块数据后边，那么就不需要重新寻址，可以依次拿到我们所需的数据，这个就叫顺序 IO。</p><p>刷盘是随机 I/O，而记录日志是顺序 I/O，顺序 I/O 效率更高。因此先把修改写入日<br>志，可以延迟刷盘时机，进而提升系统吞吐。</p><p>当然 redo log 也不是每一次都直接写入磁盘，在 Buffer Pool 里面有一块内存区域<br>（Log Buffer）专门用来保存即将要写入日志文件的数据，默认 16M，它一样可以节省<br>磁盘 IO。</p><p><img src="/images/database/mysql/5-21.png"></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'innodb_log_buffer_size'</span><span class="token punctuation">;</span></code></pre><p>需要注意：redo log 的内容主要是用于崩溃恢复。磁盘的数据文件，数据来自 buffer pool。redo log 写入磁盘，不是写入数据文件。<br>那么，Log Buffer 什么时候写入 log file？<br>在我们写入数据到磁盘的时候，操作系统本身是有缓存的。flush 就是把操作系统缓冲区写入到磁盘。<br>log buffer 写入磁盘的时机，由一个参数控制，默认是 1。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'innodb_flush_log_at_trx_commit'</span><span class="token punctuation">;</span></code></pre><p><img src="/images/database/mysql/5-22.png"></p><p>这是内存结构的第 4 块内容，redo log，它又分成内存和磁盘两部分。redo log 有<br>什么特点？<br>1、redo log 是 InnoDB 存储引擎实现的，并不是所有存储引擎都有。<br>2、不是记录数据页更新之后的状态，而是记录这个页做了什么改动，属于物理日志。<br>3、redo log 的大小是固定的，前面的内容会被覆盖</p><p><img src="/images/database/mysql/5-23.png"><br>check point 是当前要覆盖的位置。如果 write pos 跟 check point 重叠，说明 redo<br>log 已经写满，这时候需要同步 redo log 到磁盘中。<br>这是 MySQL 的内存结构，总结一下，分为：<br>Buffer pool、change buffer、Adaptive Hash Index、 log buffer。<br>磁盘结构里面主要是各种各样的表空间，叫做 Table space</p><h4 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h4><p>表空间可以看做是 InnoDB 存储引擎逻辑结构的最高层，所有的数据都存放在表空<br>间中。InnoDB 的表空间分为 5 大类。<br>系统表空间 system tablespace<br>在默认情况下 InnoDB 存储引擎有一个共享表空间（对应文件/var/lib/mysql/<br>ibdata1），也叫系统表空间。<br>InnoDB 系统表空间包含 InnoDB 数据字典和双写缓冲区，Change Buffer 和 Undo Logs），如果没有指定 file-per-table，也包含用户创建的表和索引数据。<br>1、undo 在后面介绍，因为有独立的表空间。<br>2、数据字典：由内部系统表组成，存储表和索引的元数据（定义信息）。<br>3、双写缓冲（InnoDB 的一大特性）：<br>InnoDB 的页和操作系统的页大小不一致，InnoDB 页大小一般为 16K，操作系统页<br>大小为 4K，InnoDB 的页写入到磁盘时，一个页需要分 4 次写</p><p><img src="/images/database/mysql/5-24.png"><br>如果存储引擎正在写入页的数据到磁盘时发生了宕机，可能出现页只写了一部分的<br>情况，比如只写了 4K，就宕机了，这种情况叫做部分写失效（partial page write），可<br>能会导致数据丢失。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'innodb_doublewrite'</span><span class="token punctuation">;</span></code></pre><p>我们不是有 redo log 吗？但是有个问题，如果这个页本身已经损坏了，用它来做崩<br>溃恢复是没有意义的。所以在对于应用 redo log 之前，需要一个页的副本。如果出现了<br>写入失效，就用页的副本来还原这个页，然后再应用 redo log。这个页的副本就是 double<br>write，InnoDB 的双写技术。通过它实现了数据页的可靠性。<br>跟 redo log 一样，double write 由两部分组成，一部分是内存的 double write,一个部分是磁盘上的 double write。因为 double write 是顺序写入的，不会带来很大的<br>开销。<br>在默认情况下，所有的表共享一个系统表空间，这个文件会越来越大，而且它的空<br>间不会收缩。</p><p><strong>独占表空间 file-per-table tablespaces</strong><br>我们可以让每张表独占一个表空间。这个开关通过 innodb_file_per_table 设置，默<br>认开启。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'innodb_file_per_table'</span><span class="token punctuation">;</span></code></pre><p>开启后，则每张表会开辟一个表空间，这个文件就是数据目录下的 ibd 文件（例如/var/lib/mysql/gupao/user_innodb.ibd），存放表的索引和数据。</p><p>但是其他类的数据，如回滚（undo）信息，插入缓冲索引页、系统事务信息，二次写缓冲（Double write buffer）等还是存放在原来的共享表空间内。</p><p><strong>通用表空间general tablespaces</strong><br>通用表空间也是一种共享的表空间，跟 ibdata1 类似。<br>可以创建一个通用的表空间，用来存储不同数据库的表，数据路径和文件可以自定<br>义。语法：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">tablespace</span> ts2673 <span class="token keyword">add</span> datafile <span class="token string">'/var/lib/mysql/ts2673.ibd'</span> file_block_size<span class="token operator">=</span><span class="token number">16</span>K <span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span><span class="token punctuation">;</span></code></pre><p>在创建表的时候可以指定表空间，用 ALTER 修改表空间可以转移表空间</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t2673<span class="token punctuation">(</span>id <span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token keyword">tablespace</span> ts2673<span class="token punctuation">;</span></code></pre><p>不同表空间的数据是可以移动的。<br>删除表空间需要先删除里面的所有表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> t2673<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">tablespace</span> ts2673<span class="token punctuation">;</span></code></pre><p><strong>临时表空间 temporary tablespaces</strong><br>存储临时表的数据，包括用户创建的临时表，和磁盘的内部临时表。对应数据目录<br>下的 ibtmp1 文件。当数据服务器正常关闭时，该表空间被删除，下次重新产生。<br>Redo log<br>磁盘结构里面的 redo log，在前面已经介绍过了。<br>undo log tablespace<br>undo log（撤销日志或回滚日志）记录了事务发生之前的数据状态（不包括 select）。<br>如果修改数据时出现异常，可以用 undo log 来实现回滚操作（保持原子性）。<br>在执行 undo 的时候，仅仅是将数据从逻辑上恢复至事务之前的状态，而不是从物<br>理页面上操作实现的，属于逻辑格式的日志。<br>redo Log 和 undo Log 与事务密切相关，统称为事务日志。<br>undo Log 的数据默认在系统表空间 ibdata1 文件中，因为共享表空间不会自动收<br>缩，也可以单独创建一个 undo 表空间</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'%undo%'</span><span class="token punctuation">;</span></code></pre><p>有了这些日志之后，我们来总结一下一个更新操作的流程，这是一个简化的过程。<br>name 原值是 qingsha.</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'penyuyan'</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>1、事务开始，从内存或磁盘取到这条数据，返回给 Server 的执行器；<br>2、执行器修改这一行数据的值为 penyuyan；<br>3、记录 name=qingshan 到 undo log；<br>4、记录 name=penyuyan 到 redo log；<br>5、调用存储引擎接口，在内存（Buffer Pool）中修改 name=penyuyan；<br>6、事务提交。<br>内存和磁盘之间，工作着很多后台线程。</p><h4 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h4><p>后台线程的主要作用是负责刷新内存池中的数据和把修改的数据页刷新到磁盘。后<br>台线程分为：master thread，IO thread，purge thread，page cleaner thread。<br>master thread 负责刷新缓存数据到磁盘并协调调度其它后台进程。<br>IO thread 分为 insert buffer、log、read、write 进程。分别用来处理 insert buffer、<br>重做日志、读写请求的 IO 回调。<br>purge thread 用来回收 undo 页。</p><p>page cleaner thread 用来刷新脏页。<br>除了 InnoDB 架构中的日志文件，MySQL 的 Server 层也有一个日志文件，叫做<br>binlog，它可以被所有的存储引擎使用。</p><h3 id="Binlog"><a href="#Binlog" class="headerlink" title="Binlog"></a>Binlog</h3><p>binlog 以事件的形式记录了所有的 DDL 和 DML 语句（因为它记录的是操作而不是<br>数据值，属于逻辑日志），可以用来做主从复制和数据恢复。<br>跟 redo log 不一样，它的文件内容是可以追加的，没有固定大小限制。<br>在开启了 binlog 功能的情况下，我们可以把 binlog 导出成 SQL 语句，把所有的操<br>作重放一遍，来实现数据的恢复。<br>binlog 的另一个功能就是用来实现主从复制，它的原理就是从服务器读取主服务器<br>的 binlog，然后执行一遍。</p><p>有了这两个日志之后，我们来看一下一条更新语句是怎么执行的：<br><img src="/images/database/mysql/5-25.png"><br>例如一条语句：update teacher set name=’盆鱼宴’ where id=1;<br>1、先查询到这条数据，如果有缓存，也会用到缓存。<br>2、把 name 改成盆鱼宴，然后调用引擎的 API 接口，写入这一行数据到内存，同时<br>记录 redo log。这时 redo log 进入 prepare 状态，然后告诉执行器，执行完成了，可<br>以随时提交。<br>3、执行器收到通知后记录 binlog，然后调用存储引擎接口，设置 redo log为 commit<br>状态。<br>4、更新完成。</p><p>1、先记录到内存，再写日志文件<br>2、记录 redo log 分为两个阶段。<br>3、存储引擎和 Server 记录不同的日志。<br>3、先记录 redo，再记录 binlog。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库备份与恢复问题</title>
      <link href="/p/e8ea48c0.html"/>
      <url>/p/e8ea48c0.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>今天有一个任务就涉及到线上远程数据库的备份与恢复问题，今天写这篇博客来记录一下关于Oracle数据库的备份和恢复。数据库的备份与恢复是非常在项目开发是重要，不做好备份的话，万一哪天数据库崩了，那损失可不是一点两点。劳民伤财又费力。</p><h2 id="二、Oracle数据库备份介绍"><a href="#二、Oracle数据库备份介绍" class="headerlink" title="二、Oracle数据库备份介绍"></a>二、Oracle数据库备份介绍</h2><p>Oracle数据库备份方式有很多，可以直接通过CMD来导出，也可以使用一些连接工具例如PLSQL。我在这里主要讲解的是最基础的exp/imp方式。也就是命令行的方式。而这种命令行的方式又有三个小分类。分别是全量导出，根据用户导出，导出指定表</p><h3 id="1、全量导出-导入"><a href="#1、全量导出-导入" class="headerlink" title="1、全量导出\导入"></a>1、全量导出\导入</h3><pre class="language-cmd" data-language="cmd"><code class="language-cmd">exp 用户名&#x2F;密码@orcl file&#x3D;d:\test.dmp log&#x3D;D:\test.log full&#x3D;y</code></pre><pre class="language-cmd" data-language="cmd"><code class="language-cmd">imp 用户名&#x2F;密码@orcl file&#x3D;d:\test.dmp log&#x3D;log&#x3D;D:\test.log ingore</code></pre><p>file指定的是文件导出名<br>log指定的是文件导出日志<br>full = y 表示是全量导出。如果说你的用户名是system的话，全量导出就会将所有的数据库都到出来。一般在Oracle里面，一个用户代表一个数据库。还mysql有一些区别<br>orcl表示的是本地数据库实例名。如果你要导出的是远程Oracle数据库，那么这里就应该是 用户名/密码@IP地址/数据库实例名称</p><h3 id="2、根据指定用户导出-导入"><a href="#2、根据指定用户导出-导入" class="headerlink" title="2、根据指定用户导出\导入"></a>2、根据指定用户导出\导入</h3><pre class="language-cmd" data-language="cmd"><code class="language-cmd">exp username&#x2F;password@orcl file&#x3D;d:\user_owner.dmp  owner&#x3D;(username);</code></pre><pre class="language-cmd" data-language="cmd"><code class="language-cmd">imp base&#x2F;base@orcl  file&#x3D;d:\ac.dmp  fromuser&#x3D;导出用户名  touser&#x3D;导入用户名</code></pre><p>根据用户导出和导入，最核心的就是再导入导出命令后面加上用户的名称。导出数据库指定用户名的字段为owner。而导入的话需要指定导出用户和导入用户名</p><h3 id="3、导出-导入指定表"><a href="#3、导出-导入指定表" class="headerlink" title="3、导出\导入指定表"></a>3、导出\导入指定表</h3><pre class="language-cmd" data-language="cmd"><code class="language-cmd">exp system&#x2F;manager file&#x3D;tank log&#x3D;tank tables&#x3D;(seapark.tank,amy.artist)</code></pre><pre class="language-cmd" data-language="cmd"><code class="language-cmd">imp system&#x2F;manager file&#x3D;tank log&#x3D;tank fromuser&#x3D;seapark TABLES&#x3D;(a,b)</code></pre><p>导入指定表的话，核心就是需要指定表的名称了。不然的话怎么导出指定表呢。你说是吧。</p><p>以上命令都是默认导出的就是本地Oracle数据库，如果是远程的则需要加上IP地址</p><h2 id="数据库导出注意事项"><a href="#数据库导出注意事项" class="headerlink" title="数据库导出注意事项"></a>数据库导出注意事项</h2><h2 id="1、授权"><a href="#1、授权" class="headerlink" title="1、授权"></a>1、授权</h2><p>如果我们是根据用户来做数据库导出的，那么这个用户，你首先需要给他授予导出数据库的权限</p><h2 id="2、本地有Oracle环境"><a href="#2、本地有Oracle环境" class="headerlink" title="2、本地有Oracle环境"></a>2、本地有Oracle环境</h2><p>在CMD中执行exp或者imp命令时，你本地需要安装Oracle的环境。安装环境后还需要配置一个环境变量，这样才能在命令行中使用这两个命令。</p><h2 id="3、数据库版本一致"><a href="#3、数据库版本一致" class="headerlink" title="3、数据库版本一致"></a>3、数据库版本一致</h2><p>比如说我们从Oracle11g版本中导出数据库，生成了一个dmp文件，这个时候我们把它导入到Oracle12版本的数据库中去，那么就会有很大的概率发生问题。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastMock工具的使用</title>
      <link href="/p/2ca52dbd.html"/>
      <url>/p/2ca52dbd.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>fastMock是一款简单好用的在线接口平台，在如今我们现在前后端分离开发的项目里，这种在线接口平台作用是十分重大的。前后端分离开发，一般都要实现前后端接口联调，但是呢，有时候前端人员接口编写完后，后端的接口还没开发好，前端人员就没办法去测试自己编写的前端代码是否正确，后端返回的数据格式是否和自己匹配。这时候，这种在线mock平台就显得非常的重要的。</p><p>我们可以在fastMock平台上创建一套接口，定义返回的数据类型，只要前端一发送请求，就将数据返回回去。这样，即使后端人员没有完成接口的开发，也并不影响前端人员进行测试。</p><h2 id="fastMock的介绍和使用"><a href="#fastMock的介绍和使用" class="headerlink" title="fastMock的介绍和使用"></a>fastMock的介绍和使用</h2><p>官网：<a href="https://www.fastmock.site/#/">https://www.fastmock.site/#/</a></p><p>首先，登录fastMock平台，没有账号的话，先注册一个账号。<br><img src="/images/toolanddeploy/othertool/2-1.png"><br>我们可以先创建一个项目，一个项目当中的所有接口放在一起。项目下也可以创建目录来帮助我们进行分类。<br><img src="/images/toolanddeploy/othertool/2-2.png"><br>接口根地址就是我们在测试的时候外部请求的地址，可以直接使用Postman工具来发送请求的，根地址+具体的接口地址，就可以具体访问某一个接口</p><p><img src="/images/toolanddeploy/othertool/2-3.png"><br>接口的请求方式，url,以及响应的数据我们都需要自己进行定义。定义完成之后，我们就可以使用postman工具来进行测试了。没有问题的话，就可以直接启动前端的项目，发送请求后也有数据返回了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这款在线Mock平台还是非常好用的，对于前端开发人员来说有了这个工具，能方便不少，而且定义了返回数据类型后，为后面的前后端联调也节省了不少时间。提高效率。当然了，还有其他的在线Mock平台，但是使用起来都是大同小异的。</p>]]></content>
      
      
      <categories>
          
          <category> 工具与部署 </category>
          
          <category> 其他工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastMock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL百万级别数据优化</title>
      <link href="/p/cca74932.html"/>
      <url>/p/cca74932.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>我们经常一谈到数据库的优化，那就是加索引，加索引可以大大提高我们数据库查询的效率。这句话不全对，事实上，只有当数据量达到一定的级别之后，加索引才能体现出它的优势来。给表增加了索引列，我们的也需要付出相应的维护成本。例如数据库资源成本了，磁盘成本了，等等。在表中数据量不大的情况下，加索引有可能弊大于利。</p><h2 id="二、百万数据测试环境搭建"><a href="#二、百万数据测试环境搭建" class="headerlink" title="二、百万数据测试环境搭建"></a>二、百万数据测试环境搭建</h2><p>今天我们来测试一下，百万级别的数据量查询速度究竟是怎么样的。要往一张表里面存入百万条数据，以人工方式一条一条的查那肯定是不可能的，我们这里编写一个存储过程来帮助我们完成这件事。</p><p><strong>1、创建两张表，一张普通表，一张内存表。</strong></p><p>所谓的内存表，就是指存储引擎为Memory的表。MySQL数据库除了InnoDB和MYISAM两个主流查存储引擎外，还支持其他的存储引擎。这里我就不一一列举了。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#创建内存表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>test_user_memory<span class="token punctuation">`</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">comment</span> <span class="token string">'主键id'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token keyword">comment</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">comment</span> <span class="token string">'用户名称'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>phone<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">comment</span> <span class="token string">'手机号码'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>lan_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">comment</span> <span class="token string">'本地网'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>region_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">comment</span> <span class="token string">'区域'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">comment</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_user_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>MEMORY <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span><span class="token comment">#创建普通表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>test_user<span class="token punctuation">`</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">comment</span> <span class="token string">'主键id'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token keyword">comment</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">comment</span> <span class="token string">'用户名称'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>phone<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">comment</span> <span class="token string">'手机号码'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>lan_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">comment</span> <span class="token string">'本地网'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>region_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">comment</span> <span class="token string">'区域'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">comment</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_user_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span></code></pre><p><strong>2、创建函数和存储过程</strong></p><p>打开我们的Navicat工具，新建一个查询。将下面的SQL脚本依次执行。</p><p>创建生成n个数字的函数</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#生成n个随机数字</span><span class="token keyword">DELIMITER</span> $$<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> randNum<span class="token punctuation">(</span>n <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">DECLARE</span> chars_str <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0123456789'</span><span class="token punctuation">;</span>    <span class="token keyword">DECLARE</span> return_str <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">WHILE</span> i <span class="token operator">&lt;</span> n <span class="token keyword">DO</span>        <span class="token keyword">SET</span> return_str <span class="token operator">=</span> concat<span class="token punctuation">(</span>return_str<span class="token punctuation">,</span>substring<span class="token punctuation">(</span>chars_str <span class="token punctuation">,</span> FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>    <span class="token keyword">RETURN</span> return_str<span class="token punctuation">;</span><span class="token keyword">END</span> $$<span class="token keyword">DELIMITER</span><span class="token punctuation">;</span></code></pre><p>创建生成号码的函数</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#生成随机手机号码</span><span class="token comment"># 定义常用的手机头 130 131 132 133 134 135 136 137 138 139 186 187 189 151 157</span><span class="token comment">#SET starts = 1+floor(rand()*15)*4;   截取字符串的开始是从 1、5、9、13 ...开始的。floor(rand()*15)的取值范围是0~14</span><span class="token comment">#SET head = substring(bodys,starts,3);在字符串bodys中从starts位置截取三位</span><span class="token keyword">DELIMITER</span> $$<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> generatePhone<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">DECLARE</span> head <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">DECLARE</span> phone <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">DECLARE</span> bodys <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"130 131 132 133 134 135 136 137 138 139 186 187 189 151 157"</span><span class="token punctuation">;</span><span class="token keyword">DECLARE</span> starts <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token keyword">SET</span> starts <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">SET</span> head <span class="token operator">=</span> trim<span class="token punctuation">(</span>substring<span class="token punctuation">(</span>bodys<span class="token punctuation">,</span>starts<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">SET</span> phone <span class="token operator">=</span> trim<span class="token punctuation">(</span>concat<span class="token punctuation">(</span>head<span class="token punctuation">,</span>randNum<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">RETURN</span> phone<span class="token punctuation">;</span><span class="token keyword">END</span> $$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><p>创建随机字符串和随机时间的函数</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#创建随机字符串和随机时间的函数</span><span class="token keyword">DELIMITER</span> $$<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> <span class="token punctuation">`</span>randStr<span class="token punctuation">`</span><span class="token punctuation">(</span>n <span class="token keyword">INT</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARSET</span> utf8mb4<span class="token keyword">DETERMINISTIC</span><span class="token keyword">BEGIN</span> <span class="token keyword">DECLARE</span> chars_str <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span><span class="token punctuation">;</span> <span class="token keyword">DECLARE</span> return_str <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token punctuation">;</span> <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">WHILE</span> i <span class="token operator">&lt;</span> n <span class="token keyword">DO</span>  <span class="token keyword">SET</span> return_str <span class="token operator">=</span> concat<span class="token punctuation">(</span>return_str<span class="token punctuation">,</span> substring<span class="token punctuation">(</span>chars_str<span class="token punctuation">,</span> FLOOR<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">62</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span> <span class="token keyword">RETURN</span> return_str<span class="token punctuation">;</span> <span class="token keyword">END</span>$$ <span class="token keyword">DELIMITER</span><span class="token punctuation">;</span></code></pre><p>创建插入内存表的存储过程</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建插入内存表数据存储过程   入参n是多少就插入多少条数据</span><span class="token keyword">DELIMITER</span> $$<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">`</span>add_test_user_memory<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token operator">IN</span> n <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">BEGIN</span> <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">WHILE</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token keyword">DO</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_user_memory <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> lan_id<span class="token punctuation">,</span>region_id<span class="token punctuation">,</span> create_time<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>uuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> randStr<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> generatePhone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span> <span class="token keyword">END</span> $$ <span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><p>创建内存表数据插入普通表存储过程</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#循环从内存表获取数据插入普通表</span><span class="token comment">#参数描述 n表示循环调用几次；count表示每次插入内存表和普通表的数据量</span> <span class="token keyword">DELIMITER</span> $$ <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">`</span>add_test_user_memory_to_outside<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token operator">IN</span> n <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token operator">IN</span> count <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">BEGIN</span> <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">WHILE</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token keyword">DO</span>  <span class="token keyword">CALL</span> add_test_user_memory<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_user <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_user_memory<span class="token punctuation">;</span> <span class="token keyword">delete</span> <span class="token keyword">from</span> test_user_memory<span class="token punctuation">;</span> <span class="token keyword">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span> <span class="token keyword">END</span> $$ <span class="token keyword">DELIMITER</span> </code></pre><p><strong>3、执行存储过程</strong></p><p>下面我们来测试一下，插入一万条数据需要耗费多长时间</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#先调用存储过程往内存表插入一万条数据，然后再把内存表的一万条数据插入普通表</span><span class="token keyword">CALL</span> add_test_user_memory<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#一次性把内存表的数据插入到普通表，这个过程是很快的</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_user <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_user_memory<span class="token punctuation">;</span><span class="token comment">#清空内存表数据</span><span class="token keyword">delete</span> <span class="token keyword">from</span> test_user_memory<span class="token punctuation">;</span></code></pre><p>往内存表中插入一万条数据，大概需要7.3秒<br><img src="/images/database/mysql/2-1.png"></p><p>将内存表中的一万条数据转移到普通表当中需要1.98秒<br><img src="/images/database/mysql/2-2.png"></p><p>现在我们要调用存储过程插入一百万条数据。首先需要设置一下内存表的最大内存支持。修改为2048M。我们先执行如下修改参数语句。不然可能在往内存表中插入百万数据的时候报内存不够的数据。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> tmp_table_size<span class="token operator">=</span><span class="token number">2147483648</span><span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> max_heap_table_size<span class="token operator">=</span><span class="token number">2147483648</span><span class="token punctuation">;</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#循环100次，每次生成10000条数据 总共生成一百万条数据</span><span class="token keyword">CALL</span> add_test_user_memory_to_outside<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这一句命令执行的时间要相对久一点，大概需要几分钟的样子，耐心等待。<br><img src="/images/database/mysql/2-3.png"><br>执行一下查询，表中确实有了一百万条数据。这就是我们如何往数据库中造百万条数据的详细过程。</p><h2 id="三、查询优化"><a href="#三、查询优化" class="headerlink" title="三、查询优化"></a>三、查询优化</h2><p>首先我们执行一下下面这条SQL语句,这条数据是我在表中随便摘取的一条。可以看到，查询花费了4.1秒</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#SQL_NO_CACHE指的是不走缓存，一般这就是真是的sql执行时间</span><span class="token keyword">select</span> SQL_NO_CACHE <span class="token operator">*</span> <span class="token keyword">from</span> test_user <span class="token keyword">where</span> phone<span class="token operator">=</span><span class="token string">'13598323643'</span> <span class="token operator">and</span> lan_id <span class="token operator">=</span> <span class="token number">486</span> <span class="token operator">and</span> region_id <span class="token operator">=</span> <span class="token string">'26'</span><span class="token punctuation">;</span></code></pre><p><img src="/images/database/mysql/2-4.png"><br>下面我们新建要给复合索引，来看看同样的SQL查询时间是多少。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> test_user <span class="token keyword">add</span> <span class="token keyword">index</span> idx_phone_lan_region<span class="token punctuation">(</span>phone<span class="token punctuation">,</span>lan_id<span class="token punctuation">,</span>region_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>加了索引之后，查询时间变成了0.1秒，这效果是立竿见影呐<br><img src="/images/database/mysql/2-5.png"></p><p>所以在我们为表增加了索引之后，我们后续编写的查询SQL语句要尽可能的用到索引。所以我们在编写SQL语句的时候，需要注意以下几点。</p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>最左前缀原则。我们的查询条件顺序需要遵守索引列的创建顺序。比如说test_user表。我们创建了一个复合索引idx_phone_lan_region(phone,lan_id,region_id)。索引列的顺序是phone,lan_id,region_id。所以当我们的查询条件也遵循这个顺序的时候就会走索引。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> SQL_NO_CACHE <span class="token operator">*</span> <span class="token keyword">from</span> test_user <span class="token keyword">where</span> phone<span class="token operator">=</span><span class="token string">'13598323643'</span> <span class="token operator">and</span> lan_id <span class="token operator">=</span> <span class="token number">486</span> <span class="token operator">and</span> region_id <span class="token operator">=</span> <span class="token string">'26'</span><span class="token punctuation">;</span></code></pre><p>但是如果说你的顺序是</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> SQL_NO_CACHE <span class="token operator">*</span> <span class="token keyword">from</span> test_user <span class="token keyword">where</span> lan_id <span class="token operator">=</span> <span class="token number">486</span> <span class="token operator">and</span> phone<span class="token operator">=</span><span class="token string">'13598323643'</span>   <span class="token operator">and</span> region_id <span class="token operator">=</span> <span class="token string">'26'</span><span class="token punctuation">;</span><span class="token keyword">select</span> SQL_NO_CACHE <span class="token operator">*</span> <span class="token keyword">from</span> test_user <span class="token keyword">where</span> region_id <span class="token operator">=</span> <span class="token string">'26'</span> <span class="token operator">and</span> phone<span class="token operator">=</span><span class="token string">'13598323643'</span> <span class="token operator">and</span> lan_id <span class="token operator">=</span> <span class="token number">486</span><span class="token punctuation">;</span><span class="token keyword">select</span> SQL_NO_CACHE <span class="token operator">*</span> <span class="token keyword">from</span> test_user <span class="token keyword">where</span> region_id <span class="token operator">=</span> <span class="token string">'26'</span> <span class="token keyword">select</span> SQL_NO_CACHE <span class="token operator">*</span> <span class="token keyword">from</span> test_user <span class="token keyword">where</span> lan_id <span class="token operator">=</span> <span class="token number">486</span><span class="token punctuation">;</span></code></pre><p>以上这些SQL语句都不会走idx_phone_lan_region索引，因为它们并不满足最左前缀原则。如果说你创建了一个复合索引，只要查询条件第一个字段，也就where后面第一个字段不是索引列的第一个字段，那么就不会走这个索引。</p><h3 id="不要对索引进行如下处理"><a href="#不要对索引进行如下处理" class="headerlink" title="不要对索引进行如下处理"></a>不要对索引进行如下处理</h3><p>例如： +、 -、 *、 /、 != 、&lt;&gt; 、is null、 is not null 、or</p><p>函数：sum round</p><p>以上这些操作都不会走索引</p><h3 id="索引字段不要放在范围查询的右边"><a href="#索引字段不要放在范围查询的右边" class="headerlink" title="索引字段不要放在范围查询的右边"></a>索引字段不要放在范围查询的右边</h3><p>这一条建议其实是跟MySQL索引的数据结构有关，索引会进行排序，你的字段使用范围查询后，后面的部分没有办法根据索引排序直接查找</p><h3 id="减少select-使用"><a href="#减少select-使用" class="headerlink" title="减少select * 使用"></a>减少select * 使用</h3><p>select * 做查询是不会走索引的，但是如果说我们查询的字段和索引的字段刚好一致的时候，我们其实是可以走覆盖索引的。</p><h3 id="like模糊查询优化"><a href="#like模糊查询优化" class="headerlink" title="like模糊查询优化"></a>like模糊查询优化</h3><p>我们使用模糊查询的时候，如果字段的左侧有%，那么这条SQL语句在执行的时候也不会走索引</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引原理深入解析</title>
      <link href="/p/664e3ec4.html"/>
      <url>/p/664e3ec4.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数据库的索引我们都不陌生，那么索引是什么呢？官方给出的答案是，索引是数据库管理系统中一个排序的数据结构，以协助快速查询更新表中的数据。那么索引究竟是一种什么样的数据结构呢。我们来一起了解一下吧。</p><h2 id="索引数据结构推演"><a href="#索引数据结构推演" class="headerlink" title="索引数据结构推演"></a>索引数据结构推演</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>二分查找也叫折半查找。这个相信大家都不陌生。使用二分查找，我们每次都会把候选数据筛除一般，当然了，前提是这个数据已经排过序。</p><p>所以，我们首先可以想到使用有序数组来作为索引的数据结构。有序数组的等值查询和比较查询效率非常高，但是更新数据的时候会出现问题，可能会挪动大量的数据。所以只适合存储静态数据。</p><p>那么，为了解决这个问题，我们可以采用链表作为索引的数据结构来支持数据的更新操作。但如果是单链表的话，那它的查询效率就掉下来了。</p><p>那有没有可以使用二分查找的链表呢？这里就是我们所说的二叉查找树。</p><h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><p>二分查找树(BST Binary Search Tree)。<br>首先，二分查找树的特点：<br>左子树所有的节点都小于父节点，右子树所有的节点都大于父节点。投影到平面以后，这就是一个有序的线性表。<br><img src="/images/database/mysql/3-1.png"></p><p>二叉查找树既能够实现快速查找，又能够实现快速插入。<br>但是二叉查找树有一个问题：<br>就是它的查找耗时是和这棵树的深度相关的，在最坏的情况下时间复杂度会退化成O(n)。</p><p>那什么情况是最坏的情况呢？<br>比如说，我们插入的数据是有序的，2,6,11,13,17,22。那么这个时候，我们的二叉树就变成了链表。这种情况下是不能达到加快检索速度的目的的。<br><img src="/images/database/mysql/3-2.png"><br>正是因为二叉查找树的这一缺点。那么有没有什么更好的方法呢。这个就是平衡二叉树。</p><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>平衡二叉树的定义：左右子树深度差绝对值不能超过1。<br>我们按照顺序插入1,2,3,4,5,6，就会变成下面这个树。<br><img src="/images/database/mysql/3-3.png"></p><p>那么，平衡二叉树是怎么保证左右子树的深度差不能超过1呢？<br>我们插入1,2,3之后，按照二叉查找树的定义，3肯定是在2的右边的，这个时候根节点1的右子树深度会变成2，但是左子树的深度为0。这就违反了平衡二叉树的定义。</p><p>这个时候，平衡二叉树会做一个左旋的操作。<br><img src="/images/database/mysql/3-4.png"><br>如果我们插入7，6，5。平衡二叉树会发生右旋操作。<br><img src="/images/database/mysql/3-5.png"><br>为了保持平衡，平衡二叉树在插入和更新数据的时候执行了一系列的计算和调整操作。平衡问题解决了，那么平衡二叉树作为索引如何查询数据？</p><p>在平衡二叉树中，一个节点，它的大小是一个固定的单位，作为索引应该存储什么内容？</p><p>它应该存储三块的内容：<br>第一个是索引的键值。比如我们在id上面创建了一个索引，我们在用where id =1 的条件查询的时候就会找到索引里面的id的这个键值。<br>第二个是数据的磁盘地址，因为索引的作用就是查找数据的存放地址<br>第三个，由于是二叉树，它必须还要有左子节点和右子节点的引用，这样我们才能找到下一个节点，比如大于26的时候，走右边，到下一个树的节点，继续判断。</p><p>这样存储数据，会存在问题。我们来看看会出现什么问题？在此，我们需要先了解一下InnoDB存储引擎的逻辑存储结构。</p><h4 id="InnoDB逻辑存储结构"><a href="#InnoDB逻辑存储结构" class="headerlink" title="InnoDB逻辑存储结构"></a>InnoDB逻辑存储结构</h4><p>MySQL的存储结构分为5级：表结构、段、簇、页、行。<br><img src="/images/database/mysql/3-6.png"></p><p><strong>表空间 Table Space</strong><br>表空间可以看做是 InnoDB 存储引擎逻辑结构的最高层，所有的数据都存放在表空间中。分为：系统表空间、独占表空间、通用表空间、临时表空间、Undo 表空间。</p><p><strong>段 Segment</strong><br>表空间是由各个段组成的，常见的段有数据段、索引段、回滚段等，段是一个逻辑的概念。一个 ibd 文件（独立表空间文件）里面会由很多个段组成。</p><p>创建一个索引会创建两个段，一个是索引段：leaf node segment，一个是数据段：non-leaf node segment。索引段管理非叶子节点的数据。数据段管理叶子节点的数据。也就是说，一个表的段数，就是索引的个数乘以 2</p><p><strong>簇 Extent</strong><br>一个段（Segment）又由很多的簇（也可以叫区）组成，每个区的大小是 1MB（64<br>个连续的页）。</p><p>每一个段至少会有一个簇，一个段所管理的空间大小是无限的，可以一直扩展下去，<br>但是扩展的最小单位就是簇。</p><p><strong>页 Page</strong><br>为了高效管理物理空间，对簇进一步细分，就得到了页。簇是由连续的页（Page）<br>组成的空间，一个簇中有 64 个连续的页。 （1MB／16KB=64）。这些页面在物理上和<br>逻辑上都是连续的。</p><p>跟大多数数据库一样，InnoDB 也有页的概念（也可以称为块），每个页默认 16KB。<br>页是 InnoDB 存储引擎磁盘管理的最小单位，通过 innodb_page_size 设置。</p><p>一个表空间最多拥有 2^32 个页，默认情况下一个页的大小为 16KB，也就是说一个<br>表空间最多存储 64TB 的数</p><p>注意，文件系统中，也有页的概念。<br>操作系统和内存打交道，最小的单位是页 Page。文件系统的内存页通常是 4K。<br><img src="/images/database/mysql/3-7.png"></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'innodb_page_size'</span><span class="token punctuation">;</span></code></pre><p>假设一行数据大小是 1K，那么一个数据页可以放 16 行这样的数据。<br>举例：一个页放 3 行数据<br><img src="/images/database/mysql/3-8.png"><br>往表中插入数据时，如果一个页面已经写完，产生一个新的叶页面。如果一个簇的所有的页面都被用完，会从当前页面所在段新分配一个簇。<br>如果数据不是连续的，往已经写满的页中插入数据，会导致叶页面分裂：<br><img src="/images/database/mysql/3-9.png"></p><p><strong>行 Row</strong><br>这里不做过多的介绍。</p><h4 id="多路平衡查找树-B-Tree-分裂、合并"><a href="#多路平衡查找树-B-Tree-分裂、合并" class="headerlink" title="多路平衡查找树(B Tree)(分裂、合并)"></a>多路平衡查找树(B Tree)(分裂、合并)</h4><p>这个就是我们的多路平衡查找树，叫做 B Tree（B 代表平衡）。<br>跟 AVL 树一样，B 树在枝节点和叶子节点存储键值、数据地址、节点引用。<br>它有一个特点：分叉数（路数）永远比关键字数多 1。比如我们画的这棵树，每个节点存储两个关键字，那么就会有三个指针指向三个子节点。<br><img src="/images/database/mysql/3-10.png"></p><p>B Tree 的查找规则是什么样的呢？<br>比如我们要在这张表里面查找 15。<br>因为 15 小于 17，走左边。<br>因为 15 大于 12，走右边。<br>在磁盘块 7 里面就找到了 15，只用了 3 次 IO。<br>这个是不是比 AVL 树效率更高呢？<br>那 B Tree 又是怎么实现一个节点存储多个关键字，还保持平衡的呢？跟 AVL 树有什<br>么区别？</p><p>比如 Max Degree（路数）是 3 的时候，我们插入数据 1、2、3，在插入 3 的时候，<br>本来应该在第一个磁盘块，但是如果一个节点有三个关键字的时候，意味着有 4 个指针，<br>子节点会变成 4 路，所以这个时候必须进行分裂。把中间的数据 2 提上去，把 1 和 3 变<br>成 2 的子节点。</p><p>如果删除节点，会有相反的合并的操作。注意这里是分裂和合并，跟 AVL 树的左旋和右旋是不一样的。我们继续插入 4 和 5，B Tree 又会出现分裂和合并的操作<br><img src="/images/database/mysql/3-11.png"><br>从这个里面我们也能看到，在更新索引的时候会有大量的索引的结构的调整，所以解释了为什么我们不要在频繁更新的列上建索引，或者为什么不要更新主键。节点的分裂和合并，其实就是 InnoDB 页的分裂和合并。</p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p>B Tree 的效率已经很高了，为什么 MySQL 还要对 B Tree 进行改良，最终使用了<br>B+Tree 呢？<br>总体上来说，这个 B 树的改良版本解决的问题比 B Tree 更全面。<br>我们来看一下 InnoDB 里面的 B+树的存储结构。<br><img src="/images/database/mysql/3-12.png"><br>MySQL 中的 B+Tree 有几个特点：<br>1、它的关键字的数量是跟路数相等的；<br>2、B+Tree 的根节点和枝节点中都不会存储数据，只有叶子节点才存储数据。搜索<br>到关键字不会直接返回，会到最后一层的叶子节点。比如我们搜索 id=28，虽然在第一<br>层直接命中了，但是全部的数据在叶子节点上面，所以我还要继续往下搜索，一直到叶<br>子节点。<br>举个例子：假设一条记录是 1K，一个叶子节点（一页）可以存储 16 条记录。非叶<br>子节点可以存储多少个指针？<br>假设索引字段是 bigint 类型，长度为 8 字节。指针大小在 InnoDB 源码中设置为<br>6 字节，这样一共 14 字节。非叶子节点（一页）可以存储 16384/14=1170 个这样的<br>单元（键值+指针），代表有 1170 个指针。<br>树 深 度 为 2 的 时 候 ， 有 1170^2 个 叶 子 节 点 ， 可 以 存 储 的 数 据 为<br>1170<em>1170</em>16=21902400。</p><p><img src="/images/database/mysql/3-13.png"><br>在查找数据时一次页的查找代表一次 IO，也就是说，一张 2000 万左右的表，查询<br>数据最多需要访问 3 次磁盘。<br>所以在 InnoDB 中 B+ 树深度一般为 1-3 层，它就能满足千万级的数据存储。<br>3、B+Tree 的每个叶子节点增加了一个指向相邻叶子节点的指针，它的最后一个数<br>据会指向下一个叶子节点的第一个数据，形成了一个有序链表的结构。<br>4、它是根据左闭右开的区间 [ )来检索数据。<br>我们来看一下 B+Tree 的数据搜寻过程：<br>1）比如我们要查找 28，在根节点就找到了键值，但是因为它不是页子节点，所以<br>会继续往下搜寻，28 是[28,66)的左闭右开的区间的临界值，所以会走中间的子节点，然<br>后继续搜索，它又是[28,34)的左闭右开的区间的临界值，所以会走左边的子节点，最后<br>在叶子节点上找到了需要的数据。<br>2）第二个，如果是范围查询，比如要查询从 22 到 60 的数据，当找到 22 之后，只<br>需要顺着节点和指针顺序遍历就可以一次性访问到所有的数据节点，这样就极大地提高<br>了区间查询效率（不需要返回上层父节点重复遍历查找）。<br>总结一下，InnoDB 中的 B+Tree 的特点：<br>1)它是 B Tree 的变种，B Tree 能解决的问题，它都能解决。B Tree 解决的两大问题<br>是什么？（每个节点存储更多关键字；路数更多）<br>2)扫库、扫表能力更强（如果我们要对表进行全表扫描，只需要遍历叶子节点就可以<br>了，不需要遍历整棵 B+Tree 拿到所有的数据）<br>3) B+Tree 的磁盘读写能力相对于 B Tree 来说更强（根节点和枝节点不保存数据区，<br>所以一个节点可以保存更多的关键字，一次磁盘加载的关键字更多）<br>4)排序能力更强（因为叶子节点上有下一个数据区的指针，数据形成了链表）<br>5)效率更加稳定（B+Tree 永远是在叶子节点拿到数据，所以 IO 次数是稳定的）</p><h3 id="为什么不用红黑树"><a href="#为什么不用红黑树" class="headerlink" title="为什么不用红黑树"></a>为什么不用红黑树</h3><p>红黑树也是 BST 树，但是不是严格平衡的。<br>必须满足 5 个约束：<br>1、节点分为红色或者黑色。<br>2、根节点必须是黑色的。<br>3、叶子节点都是黑色的 NULL 节点。<br>4、红色节点的两个子节点都是黑色（不允许两个相邻的红色节点）。<br>5、从任意节点出发，到其每个叶子节点的路径中包含相同数量的黑色节点。<br>插入：60、56、68、45、64、58、72、43、49<br><img src="/images/database/mysql/3-14.png"><br>基于以上规则，可以推导出：<br>从根节点到叶子节点的最长路径（红黑相间的路径）不大于最短路径（全部是黑色<br>节点）的 2 倍。<br>为什么不用红黑树？1、只有两路；2、不够平衡。<br>红黑树一般只放在内存里面用。例如 Java 的 TreeMap。</p><h3 id="索引方式：真的是用的B-Tree吗？"><a href="#索引方式：真的是用的B-Tree吗？" class="headerlink" title="索引方式：真的是用的B+Tree吗？"></a>索引方式：真的是用的B+Tree吗？</h3><p>在 Navicat 的工具中，创建索引，索引方式有两种，Hash 和 B Tree。<br>HASH：以 KV 的形式检索数据，也就是说，它会根据索引字段生成哈希码和指针，<br>指针指向数据。</p><p><img src="/images/database/mysql/3-15.png"><br>哈希索引有什么特点呢？<br>第一个，它的时间复杂度是 O(1)，查询速度比较快。因为哈希索引里面的数据不是<br>按顺序存储的，所以不能用于排序。<br>第二个，我们在查询数据的时候要根据键值计算哈希码，所以它只能支持等值查询<br>（= IN），不支持范围查询（&gt; &lt; &gt;= &lt;= between and）。<br>另外一个就是如果字段重复值很多的时候，会出现大量的哈希冲突（采用拉链法解<br>决），效率会降低</p><p><strong>问题：InnoDB 可以在客户端创建一个索引，使用哈希索引吗？</strong><br>直接翻译过来就是：InnoDB 内部使用哈希索引来实现自适应哈希索引特性。<br>这句话的意思是 InnoDB 只支持显式创建 B+Tree 索引，对于一些热点数据页，<br>InnoDB 会自动建立自适应 Hash 索引，也就是在 B+Tree 索引基础上建立 Hash 索引，<br>这个过程对于客户端是不可控制的，隐式的。<br>我们在 Navicat 工具里面选择索引方法是哈希，但是它创建的还是 B+Tree 索引，这<br>个不是我们可以手动控制的。<br>上次课我们说到 buffer pool 里面有一块区域是 Adaptive Hash Index 自适应哈希<br>索引，就是这个。<br>这个开关默认是 ON：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'innodb_adaptive_hash_index'</span><span class="token punctuation">;</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">engine</span> <span class="token keyword">innodb</span> <span class="token keyword">status</span>\G</code></pre><p><img src="/images/database/mysql/3-16.png"><br>因为B Tree 和B+Tree 的特性，它们广泛地用在文件系统和数据库中，例如Windows<br>的 HPFS 文件系统，Oracel、MySQL、SQLServer 数据库</p><h2 id="B-Tree落地形式"><a href="#B-Tree落地形式" class="headerlink" title="B+Tree落地形式"></a>B+Tree落地形式</h2><h3 id="MYSQL架构"><a href="#MYSQL架构" class="headerlink" title="MYSQL架构"></a>MYSQL架构</h3><p>MySQL 是一个支持插件式存储引擎的数据库。在 MySQL里面，每个表在创建的时候都可以指定它所使用的存储引擎。这里我们主要关注一下最常用的两个存储引擎，MyISAM 和 InnoDB 的索引的实现</p><h3 id="MYSQL数据存储文件"><a href="#MYSQL数据存储文件" class="headerlink" title="MYSQL数据存储文件"></a>MYSQL数据存储文件</h3><p>首先，MySQL 的数据都是文件的形式存放在磁盘中的，我们可以找到这个数据目录<br>的地址。在 MySQL 中有这么一个参数，我们来看一下：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'datadir'</span><span class="token punctuation">;</span></code></pre><p>每个数据库有一个目录，我们新建了一个叫做 gupao 的数据库，那么这里就有一个<br>gupao 的文件夹。<br>这个数据库里面我们又建了 5 张表：archive、innodb、memory、myisam、csv。<br>我们进入 gupao 的目录，发现这里面有一些跟我们创建的表名对应的文件。</p><p>在这里我们能看到，每张 InnoDB 的表有两个文件（.frm 和.ibd），MyISAM 的表<br>有三个文件（.frm、.MYD、.MYI）。<br><img src="/images/database/mysql/3-17.png"><br>有一个是相同的文件，.frm。 .frm 是 MySQL 里面表结构定义的文件，不管你建表<br>的时候选用任何一个存储引擎都会生成。<br>我们主要看一下其他两个文件是怎么实现 MySQL 不同的存储引擎的索引的。</p><h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><p>在 MyISAM 里面，另外有两个文件：<br>一个是.MYD 文件，D 代表 Data，是 MyISAM 的数据文件，存放数据记录，比如我<br>们的 user_myisam 表的所有的表数据。<br>一个是.MYI 文件，I 代表 Index，是 MyISAM 的索引文件，存放索引，比如我们在<br>id 字段上面创建了一个主键索引，那么主键索引就是在这个索引文件里面。<br>也就是说，在 MyISAM 里面，索引和数据是两个独立的文件。<br>那我们怎么根据索引找到数据呢？<br>MyISAM 的 B+Tree 里面，叶子节点存储的是数据文件对应的磁盘地址。所以从索<br>引文件.MYI 中找到键值后，会到数据文件.MYD 中获取相应的数据记录<br><img src="/images/database/mysql/3-18.png"><br>这里是主键索引，如果是辅助索引，有什么不一样呢？<br>在 MyISAM 里面，辅助索引也在这个.MYI 文件里面。<br>辅助索引跟主键索引存储和检索数据的方式是没有任何区别的，一样是在索引文件<br>里面找到磁盘地址，然后到数据文件里面获取数据。<br><img src="/images/database/mysql/3-19.png"></p><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><p>InnoDB 只有一个文件（.ibd 文件），那索引放在哪里呢？<br>在 InnoDB 里面，它是以主键为索引来组织数据的存储的，所以索引文件和数据文<br>件是同一个文件，都在.ibd 文件里面。<br>在 InnoDB 的主键索引的叶子节点上，它直接存储了我们的数据。<br><img src="/images/database/mysql/3-20.png"><br>什么叫做聚集索引（聚簇索引）？<br>就是索引键值的逻辑顺序跟表数据行的物理存储顺序是一致的。（比如字典的目录<br>是按拼音排序的，内容也是按拼音排序的，按拼音排序的这种目录就叫聚集索引）。<br>在 InnoDB 里面，它组织数据的方式叫做叫做（聚集）索引组织表（clustered index<br>organize table），所以主键索引是聚集索引，非主键都是非聚集索引。<br>如果 InnoDB 里面主键是这样存储的，那主键之外的索引，比如我们在 name 字段<br>上面建的普通索引，又是怎么存储和检索数据的呢？<br><img src="/images/database/mysql/3-21.png"><br>InnoDB 中，主键索引和辅助索引是有一个主次之分的。<br>辅助索引存储的是辅助索引和主键值。如果使用辅助索引查询，会根据主键值在主<br>键索引中查询，最终取得数据。<br>比如我们用 name 索引查询 name= ‘青山’，它会在叶子节点找到主键值，也就是<br>id=1，然后再到主键索引的叶子节点拿到数据。<br>为什么在辅助索引里面存储的是主键值而不是主键的磁盘地址呢？如果主键的数据<br>类型比较大，是不是比存地址更消耗空间呢？<br>我们前面说到 B Tree 是怎么实现一个节点存储多个关键字，还保持平衡的呢？<br>是因为有分叉和合并的操作，这个时候键值的地址会发生变化，所以在辅助索引里<br>面不能存储地址。<br>另一个问题，如果一张表没有主键怎么办？<br>1、如果我们定义了主键(PRIMARY KEY)，那么 InnoDB 会选择主键作为聚集索引。<br>2、如果没有显式定义主键，则 InnoDB 会选择第一个不包含有 NULL 值的唯一索引<br>作为主键索引。<br>3、如果也没有这样的唯一索引，则 InnoDB 会选择内置 6 字节长的 ROWID 作为隐<br>藏的聚集索引，它会随着行记录的写入而主键递增</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> _rowid name <span class="token keyword">from</span> t2<span class="token punctuation">;</span></code></pre><h2 id="索引使用原则"><a href="#索引使用原则" class="headerlink" title="索引使用原则"></a>索引使用原则</h2><p>很多人认为既然索引能够提高我们SQL语句的查询效率，那么我们是不是在经常使用的查询条件上建立索引，索引越多越好。是不是这样的呢？</p><h3 id="列的散列度"><a href="#列的散列度" class="headerlink" title="列的散列度"></a>列的散列度</h3><p>我们首先说说列的散列度。列的散列度公式：count(distinct(column_name)) : count(*),列的全部不同值和所有数据行的比例。数据行数相同的情况下，分子越大，列的散列度就越高。<br><img src="/images/database/mysql/3-22.png"><br>简单的理解，就是列的重复值越多，散列度就越低，重复值越小，散列度就越高。<br>了解散列度概念，我们name上面建立索引和gender上面会有怎样的区别。</p><p>当我们用在gender上面建立的索引去检索数据的时候，由于重复值太多，需要扫描的行数也就更多。我们现在在gender上面创建一个索引，然后看一下执行计划</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_innodb <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> idx_user_gender<span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_innodb <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> idx_user_gender <span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 耗时比较久</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>user_innodb<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> gender <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><p><img src="/images/database/mysql/3-23.png"></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> indexes <span class="token keyword">from</span> user_innodb<span class="token punctuation">;</span></code></pre><p>name的离散度更高，比如我们查询一个名字，只需要扫描一行。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_innodb <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> idx_user_name<span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_innodb <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> idx_user_name <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>user_innodb<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'青山'</span><span class="token punctuation">;</span></code></pre><p><img src="/images/database/mysql/3-24.png"></p><p>我们可以执行以下SQL语句来查看以下索引的基数。索引的基数与表的总行数越接近，列的散列度就越高。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> indexes <span class="token keyword">from</span> user_innodb<span class="token punctuation">;</span></code></pre><p>如果在B+Tree里面的重复值太多，MYSQL的优化器发现走索引和走全表扫描差不多的时候，就算建立的了索引。也不一定会走索引的。<br><img src="/images/database/mysql/3-25.png"></p><p>这也就说明，建立索引，要是用离散度高的字段。</p><h3 id="联合索引最左匹配原则"><a href="#联合索引最左匹配原则" class="headerlink" title="联合索引最左匹配原则"></a>联合索引最左匹配原则</h3><p>前面我们说的都是针对单列创建的索引，但有的时候我们的多条件查询的时候，也会建立联合索引。单列索引可以看成是特殊的联合索引。比如我们在 user 表上面，给 name 和 phone 建立了一个联合索引</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_innodb <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> comidx_name_phone<span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_innodb <span class="token keyword">add</span> <span class="token keyword">INDEX</span> comidx_name_phone <span class="token punctuation">(</span>name<span class="token punctuation">,</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/images/database/mysql/3-26.png"><br>联合索引在 B+Tree 中是复合的数据结构，它是按照从左到右的顺序来建立搜索树的（name 在左边，phone 在右边）。</p><p>从这张图可以看出来，name 是有序的，phone 是无序的。当 name 相等的时候，phone 才是有序的。</p><p>这个时候我们使用 where name= ‘青山’ and phone = ‘136xx ‘去查询数据的时候，B+Tree 会优先比较 name 来确定下一步应该搜索的方向，往左还是往右。如果 name相同的时候再比较phone。但是如果查询条件没有 name，就不知道第一步应该查哪个节点，因为建立搜索树的时候 name 是第一个比较因子，所以用不到索引。</p><h4 id="什么时候用到联合索引"><a href="#什么时候用到联合索引" class="headerlink" title="什么时候用到联合索引"></a>什么时候用到联合索引</h4><p>我们在建立联合索引的时候，一定要把最常用的列放在最左边。比如下面的三条语句，能用到联合索引吗？</p><p>1）使用两个字段，可以用到联合索引</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_innodb <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">'权亮'</span> <span class="token operator">AND</span> phone <span class="token operator">=</span> '<span class="token number">15204</span><span class="token punctuation">;</span></code></pre><p><img src="/images/database/mysql/3-27.png"><br>2）使用左边的 name 字段，可以用到联合索引</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_innodb <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">'权亮'</span> <span class="token punctuation">;</span></code></pre><p><img src="/images/database/mysql/3-28.png"></p><p>3)使用右边的 phone 字段，无法使用索引，全表扫描</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_innodb <span class="token keyword">WHERE</span> phone <span class="token operator">=</span> <span class="token string">'152046618'</span><span class="token punctuation">;</span></code></pre><p><img src="/images/database/mysql/3-29.png"></p><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>回表：<br>非主键索引，我们先通过索引找到主键索引的键值，再通过主键值查出索引里面没有的数据，它比基于主键索引的查询多扫描了一棵索引树，这个过程就叫回表。</p><pre class="language-sql" data-language="sql"><code class="language-sql">例如：<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_innodb <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'青山'</span><span class="token punctuation">;</span></code></pre><p><img src="/images/database/mysql/3-30.png"></p><p>在辅助索引里面，不管是单列索引还是联合索引，如果 select 的数据列只用从索引中就能够取得，不必从数据区中读取，这时候使用的索引就叫做覆盖索引，这样就避免了回表。</p><p>我们先来创建一个联合索引：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建联合索引</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_innodb <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> comixd_name_phone<span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_innodb <span class="token keyword">add</span> <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>comixd_name_phone<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>phone<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这三个查询语句都用到了覆盖索引</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>phone <span class="token keyword">FROM</span> user_innodb <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">'青山'</span> <span class="token operator">AND</span> phone <span class="token operator">=</span> <span class="token string">' 13666666666'</span><span class="token punctuation">;</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> user_innodb <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">'青山'</span> <span class="token operator">AND</span> phone <span class="token operator">=</span> <span class="token string">' 13666666666'</span><span class="token punctuation">;</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> phone <span class="token keyword">FROM</span> user_innodb <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">'青山'</span> <span class="token operator">AND</span> phone <span class="token operator">=</span> <span class="token string">' 13666666666'</span><span class="token punctuation">;</span></code></pre><p>Extra 里面值为“Using index”代表使用了覆盖索引。<br><img src="/images/database/mysql/3-31.png"><br>select * ，用不到覆盖</p><h3 id="索引条件下推"><a href="#索引条件下推" class="headerlink" title="索引条件下推"></a>索引条件下推</h3><p>我们先看这张表，在last_name和first_name上面创建联合索引。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> employees<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>last_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>gender<span class="token punctuation">`</span> <span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>latin1<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> employees <span class="token keyword">add</span> <span class="token keyword">index</span> idx_lastname_firstname<span class="token punctuation">(</span>last_name<span class="token punctuation">,</span>first_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>gender<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'698'</span><span class="token punctuation">,</span> <span class="token string">'liu'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>gender<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'d99'</span><span class="token punctuation">,</span> <span class="token string">'zheng'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>gender<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'e08'</span><span class="token punctuation">,</span> <span class="token string">'huang'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>gender<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'59d'</span><span class="token punctuation">,</span> <span class="token string">'lu'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>gender<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'0dc'</span><span class="token punctuation">,</span> <span class="token string">'yu'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>gender<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'989'</span><span class="token punctuation">,</span> <span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>gender<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'e38'</span><span class="token punctuation">,</span> <span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>gender<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'0zi'</span><span class="token punctuation">,</span> <span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>gender<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'dc9'</span><span class="token punctuation">,</span> <span class="token string">'xie'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>gender<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'5ba'</span><span class="token punctuation">,</span> <span class="token string">'zhou'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>关闭ICP:</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> optimizer_switch<span class="token operator">=</span><span class="token string">'index_condition_pushdown=off'</span><span class="token punctuation">;</span></code></pre><p>查看参数</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'optimizer_switch'</span><span class="token punctuation">;</span></code></pre><p>现在我们要查询所有姓 wang，并且名字最后一个字是 zi 的员工，比如王胖子，王瘦子。查询的 SQL：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> last_name<span class="token operator">=</span><span class="token string">'wang'</span> <span class="token operator">and</span> first_name <span class="token operator">LIKE</span> '<span class="token operator">%</span><span class="token punctuation">;</span></code></pre><p>这条 SQL 有两种执行方式：<br>1、根据联合索引查出所有姓 wang 的二级索引数据，然后回表，到主键索引上查询<br>全部符合条件的数据（3 条数据）。然后返回给 Server 层，在 Server 层过滤出名字以<br>zi 结尾的员工。<br>2、根据联合索引查出所有姓 wang 的二级索引数据（3 个索引），然后从二级索引<br>中筛选出 first_name 以 zi 结尾的索引（1 个索引），然后再回表，到主键索引上查询全<br>部符合条件的数据（1 条数据），返回给 Server 层。<br><img src="/images/database/mysql/3-32.png"><br>很明显，第二种方式到主键索引上查询的数据更少。</p><p>注意，索引的比较是在存储引擎进行的，数据记录的比较，是在 Server 层进行的。而当 first_name 的条件不能用于索引过滤时，Server 层不会把 first_name 的条件传递给存储引擎，所以读取了两条没有必要的记录。</p><p>这时候，如果满足 last_name=’wang’的记录有 100000 条，就会有 99999 条没有必要读取的记录。<br>执行以下SQL</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> last_name<span class="token operator">=</span><span class="token string">'wang'</span> <span class="token operator">and</span> first_name <span class="token operator">LIKE</span> <span class="token string">'%zi'</span><span class="token punctuation">;</span></code></pre><p><img src="/images/database/mysql/3-33.png"><br>Using Where 代表从存储引擎取回的数据不全部满足条件，需要在 Server 层过滤。</p><p>先用 last_name 条件进行索引范围扫描，读取数据表记录，然后进行比较，检查是否符合 first_name LIKE ‘%zi’ 的条件。此时 3 条数据中只要1条符合条件。</p><p>开启ICP</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> optimizer_switch<span class="token operator">=</span><span class="token string">'index_condition_pushdown=on'</span><span class="token punctuation">;</span></code></pre><p>此时的执行计划，Using index condition：<br><img src="/images/database/mysql/3-34.png"></p><p>把 first_name LIKE ‘%zi’下推给存储引擎后，只会从数据表读取所需的 1 条记录。索引条件下推（Index Condition Pushdown），5.6版本 以后完善的功能。只适用于二<br>级索引。ICP 的目标是减少访问表的完整行的读数量从而减少 I/O 操作</p><h2 id="索引的创建与使用"><a href="#索引的创建与使用" class="headerlink" title="索引的创建与使用"></a>索引的创建与使用</h2><p>因为索引对于改善查询性能的作用是巨大的，所以我们的目标是尽量使用索引。</p><h3 id="索引的创建"><a href="#索引的创建" class="headerlink" title="索引的创建"></a>索引的创建</h3><p>1、在用于 where 判断 order 排序和 join 的（on）字段上创建索引<br>2、索引的个数不要过多<br>——浪费空间，更新变慢。<br>3、区分度低的字段，例如性别，不要建索引。 ——离散度太低，导致扫描行数过多。<br>4、频繁更新的值，不要作为主键或者索引。 ——页分裂<br>5、组合索引把散列性高（区分度高）的值放在前面。<br>6、创建复合索引，而不是修改单列索引。<br>7、过长的字段，怎么建立索引？<br>8、为什么不建议用无序的值（例如身份证、UUID ）作为索引？</p><h3 id="什么时候用不到索引"><a href="#什么时候用不到索引" class="headerlink" title="什么时候用不到索引"></a>什么时候用不到索引</h3><p>1、索引列上使用函数（replace\SUBSTR\CONCAT\sum count avg）、表达式、<br>计算（+ - * /）</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>t2<span class="token punctuation">`</span> <span class="token keyword">where</span> id<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></code></pre><p>2、字符串不加引号，出现隐式转换</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_innodb <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> comidx_name_phone<span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_innodb <span class="token keyword">add</span> <span class="token keyword">INDEX</span> comidx_name_phone <span class="token punctuation">(</span>name<span class="token punctuation">,</span>phon</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>user_innodb<span class="token punctuation">`</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token number">136</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>user_innodb<span class="token punctuation">`</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'136'</span><span class="token punctuation">;</span></code></pre><p>3、like 条件中前面带%<br>where 条件中 like abc%，like %2673%，like %888 都用不到索引吗？为什么？</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> user_innodb <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'wang%'</span><span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> user_innodb <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%wang'</span><span class="token punctuation">;</span></code></pre><p>过滤的开销太大，所以无法使用索引。这个时候可以用全文索引。</p><p>4、负向查询<br>NOT LIKE 不能：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employees <span class="token keyword">where</span> last_name <span class="token operator">not</span> <span class="token operator">like</span> <span class="token string">'wang'</span><span class="token punctuation">;</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employees <span class="token keyword">where</span> emp_no <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employees <span class="token keyword">where</span> emp_no <span class="token operator">&lt;></span> <span class="token number">1</span></code></pre><p>注意一个 SQL 语句是否使用索引，跟数据库版本、数据量、数据选择度都有关系。<br>其实，用不用索引，最终都是优化器说了算。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MySQL选择B+Tree作为索引的数据结构还是非常巧妙的。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引基本介绍</title>
      <link href="/p/8a8ed9e2.html"/>
      <url>/p/8a8ed9e2.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h2><p>索引，说到底是一种帮助MySQL提交查询效率的数据结构。运用现实生活的中的案例，可以理解为书的目录。比如说我们要看一本书的某个章节在第几页，我们不会一页一页的去翻，而是先查目录，查到章节在第几页后，就可以直接跳到那一页。比一页一页的翻效率高太多了。</p><p><strong>索引的优点</strong><br>大大加快数据的查询效率</p><p><strong>索引的缺点</strong><br>1、维护索引需要耗费数据库的资源<br>2、索引需要占用磁盘空间<br>3、当对表的数据进行修改的时候，因为要维护索引，速度会受到影响</p><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><p>主键索引</p><p>设定为主键后数据库会自动建立索引，innodb为聚簇索引。主键索引索引列的值不能为空</p><p>单值索引（普通索引，单列索引）<br>即一个索引只包含单个列，一个表可以有多个单列索引</p><p>唯一索引<br>索引列的值必须唯一，但允许有空值。空值只能存在一个</p><p>复合索引<br>一个索引包含多个列</p><p>Full Text全文索引 （5.7版本之前，只能由MYISAM存储引擎）<br>全文索引的类型为FullText，在定义索引的列上支持值的全文查找，允许在这些索引列中插入重复值和空值。全文索引可以在CHAR,VARCHAR、TEXT列类型上创建，MYSQL只有MYISAM存储引擎支持全文索引。</p><h2 id="索引的基本类型"><a href="#索引的基本类型" class="headerlink" title="索引的基本类型"></a>索引的基本类型</h2><p>1、主键索引，我们指定主键的时候会自动创建，无需我们操心</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--创建一个t_user表，指定主键</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--查看t_user表的索引</span><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> t_user<span class="token punctuation">;</span></code></pre><p><img src="/images/database/mysql/1-1.png"></p><p>2、单值索引<br>两种创建方式：建表时创建，建表之后创建</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--建表之后创建</span><span class="token keyword">create</span> <span class="token keyword">index</span> name_index <span class="token keyword">on</span> t_user<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--建表的同时创建索引，建表时不能指定索引名称，默认就是字段名</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">key</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3、唯一索引</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--建表之后创建</span><span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> name_index <span class="token keyword">on</span> t_user<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--建表的同时创建索引，建表时不能指定索引名称，默认就是字段名</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">unique</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4、复合索引</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span>  <span class="token keyword">index</span> name_index <span class="token keyword">on</span> t_user<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--建表的同时创建索引，建表时不能指定索引名称，默认就是字段名</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user3<span class="token punctuation">(</span>id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">key</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最左前缀原则</p><h2 id="索引的底层原理"><a href="#索引的底层原理" class="headerlink" title="索引的底层原理"></a>索引的底层原理</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_emp<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>1、插入id无序<br>2、查询得到的结果有序</p><p>3、主键索引进行了排序</p><h2 id="聚簇索引与非聚簇索引"><a href="#聚簇索引与非聚簇索引" class="headerlink" title="聚簇索引与非聚簇索引"></a>聚簇索引与非聚簇索引</h2><p>聚簇索引：将数据存储与索引放到了一块，<br>非聚簇缩影：将数据与索引分开存放</p><p>聚簇索引需要注意什么？<br>当使用主键为聚簇索引的时候，主键最好不要使用UUID，应为UUID的值太过离散，不适合排序。并且新增记录的UUID可能会插在索引中间树的位置上导致索引树调整复杂度变大，消耗更多的时间和资源<br>建议使用int类型自增，方便排序并且花在索引树的末尾增加主键值，对索引树的结构影响最小，而且主键占用空间越大，辅助索引中保存的主键值也会跟着变大，占用存储空间。也会影响到IO操作读取到的值。</p><p>为什么主键通常建议使用自增id<br>聚簇索引的数据的物理存放顺序与索引顺序是一致的，也就是说只要索引是相邻的，那么对应的数据也一定是相邻的存放在磁盘上，如果主键不是自增id,那么将会不断调整数据的物理地址，分裂。</p><p>什么情况下无法使用索引呢<br>1、查询语句中使用Like语句<br>在查询的过程中使用Like关键字进行查询的时候，如果匹配字符串的第一个字符为%，那么索引便不会被使用<br>2、查询语句中使用多列索引<br>多列索引是在表的多个字段上创建了一个索引，只有再查询条件上使用了第一个字段，索引才会被使用<br>查询语句中使用了or关键字<br>查询语句中只有or关键字，如果or前后两个条件的列都是索引，那么查询中将使用索引，如果or前后有一个不是索引，那么查询中将不使用索引</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Redis</title>
      <link href="/p/24c94d92.html"/>
      <url>/p/24c94d92.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>redis可以下载压缩包后在虚拟机上安装，不过需要通过c语言环境编译一下redis才能使用。这里就直接使用docker拉取一下redis的镜像就可以了。使用起来比较方便快捷。</p><h1 id="Docker安装Redis"><a href="#Docker安装Redis" class="headerlink" title="Docker安装Redis"></a>Docker安装Redis</h1><h2 id="1、查询一下redis的版本"><a href="#1、查询一下redis的版本" class="headerlink" title="1、查询一下redis的版本"></a>1、查询一下redis的版本</h2><pre class="language-txt" data-language="txt"><code class="language-txt">docker search redis</code></pre><p>我们可以先查询一下redis的版本，选择自己需要的版本就可以了<br><img src="/images/toolanddeploy/docker/3-1.png" alt="查询redis版本"><br>如果对版本要求比较严格的话，可以直接去官网查询版本会更好一点</p><h2 id="2、拉取redis镜像"><a href="#2、拉取redis镜像" class="headerlink" title="2、拉取redis镜像"></a>2、拉取redis镜像</h2><pre class="language-txt" data-language="txt"><code class="language-txt">docker pull redis:latest</code></pre><p><img src="/images/toolanddeploy/docker/3-2.png" alt="拉取redis镜像"></p><h2 id="3、查看本地镜像"><a href="#3、查看本地镜像" class="headerlink" title="3、查看本地镜像"></a>3、查看本地镜像</h2><pre class="language-txt" data-language="txt"><code class="language-txt">docker images</code></pre><h2 id="4、运行容器"><a href="#4、运行容器" class="headerlink" title="4、运行容器"></a>4、运行容器</h2><pre class="language-txt" data-language="txt"><code class="language-txt">docker run -itd --name myredis -p 6379:6379 redis</code></pre><p>-p 6379:6379：映射容器服务的 6379 端口到宿主机的 6379 端口。外部可以直接通过宿主机ip:6379 访问到 Redis 的服务。</p><h2 id="5、查看容器是否成功运行"><a href="#5、查看容器是否成功运行" class="headerlink" title="5、查看容器是否成功运行"></a>5、查看容器是否成功运行</h2><pre class="language-txt" data-language="txt"><code class="language-txt">docker ps</code></pre><p><img src="/images/toolanddeploy/docker/3-3.png" alt="查看redis是否成功运行"></p><h2 id="6、连接启动redis并测试"><a href="#6、连接启动redis并测试" class="headerlink" title="6、连接启动redis并测试"></a>6、连接启动redis并测试</h2><pre class="language-txt" data-language="txt"><code class="language-txt">docker exec -it myredis /bin/bashredis-cli</code></pre><p><img src="/images/toolanddeploy/docker/3-4.png" alt="测试redis"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是使用docker安装redis 的步骤，window环境官方并没有发布对应的版本。我们下载使用的是一些技术人员编写修改的。版本非常落后。要想使用最新版本的，还是得在linux环境。</p>]]></content>
      
      
      <categories>
          
          <category> 工具与部署 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat基础篇</title>
      <link href="/p/2e21f81b.html"/>
      <url>/p/2e21f81b.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Tomcat是我们从事Web开发不可避免的需要接触的一款Web服务器。它开源，免费，目前在市面上使用率也是非常的广。但是大多数人对Tomcat的了解也仅仅只是停留在如何使用。并没有深入的了解和研究。那么今天我们就来看一看Tomcat的相关底层内容吧。</p><h2 id="Tomcat介绍"><a href="#Tomcat介绍" class="headerlink" title="Tomcat介绍"></a>Tomcat介绍</h2><p>官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org</a></p><p>官网介绍称Tomcat是一款开源免费的Web容器或者Servlet容器。那么为什么Tomcat既可以被称之为Web容器又可以被称为Servlet容器呢？</p><h3 id="Web容器"><a href="#Web容器" class="headerlink" title="Web容器"></a>Web容器</h3><p>当我们的Tomcat用于为外部浏览器提供访问，也就是说浏览器发出请求，Tomcat给出响应。那么这个时候Tomcat就是属于Web容器。<br><img src="/images/toolanddeploy/tomcat/1-1.png"><br><img src="/images/toolanddeploy/tomcat/1-2.png"></p><p>我们可以用Java代码简单逻辑演示一下。Tomcat需要接收浏览器的请求，那么它肯定是需要监听某一个端口的。我们可以用Java当中封装好的Socket来实现监听。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyTomcat</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ServerSocket</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//等待客户端的连接请求</span>    <span class="token class-name">Socket</span> socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Servlet容器"><a href="#Servlet容器" class="headerlink" title="Servlet容器"></a>Servlet容器</h3><p>那么Tomcat作为Servlet容器又怎么理解呢？在Spring,SpringMVC,SpringBoot等等框架还没有出来之前。我们的JavaWeb开发采用的都是使用Servlet来实现。每一个Servlet实现一个小功能。但是这样的话，开发一个Web项目需要写的Servlet就太多了。于是乎一般的操作是抽取一个BaseServlet出来。后面我们再写Servlet的时候就不用一个功能写一个Servlet了。而是根据某一个对象来写。就有点类似于现在SpringMVC中实现的Controller的那种写法。</p><p>简单回顾到这里，先来说说Servlet规范。里面包含了一个完整的Servlet周期。从init到destory。<br>Servelt规范：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Servlet</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res）<span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">&#123;</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在web.xml中配置映射</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.gupao.web.servlet.LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><p>当我们需要把某个类暴露给外部访问时，需要在web.xml进行如上的配置。也就是将项目中的Servlet装到Tomcat中去维护。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyTomcat</span><span class="token punctuation">&#123;</span><span class="token class-name">List</span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServerSocket</span> server<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> socket<span class="token operator">=</span>server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把请求和响应都封装在业务代码中的servlet</span><span class="token comment">// 只要把业务代码中一个个servlets添加到tomcat中即可</span><span class="token comment">// Tomcat除了能够提供Web服务之外，还能够作为Servlet容器</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>servlets<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>那么Tomcat怎么知道有多少个Servlet？这个完全可以通过扫描Web.xml文件有多少个servlet标签来实现。<br><img src="/images/toolanddeploy/tomcat/1-3.png"></p><p>我们的Tomcat需要支持Servlet规范。从哪里可以看出来呢？我们打开Tomcat文件夹。会发现lib文件夹下有一个servlet-api.jar的jar包tomcat/lib/servlet-api.jar。</p><h2 id="Tomcat源码阅读环境搭建"><a href="#Tomcat源码阅读环境搭建" class="headerlink" title="Tomcat源码阅读环境搭建"></a>Tomcat源码阅读环境搭建</h2><p>1、先去官网下载Tomcat源码<br>Tomcat版本：Tomcat8.0.11<br>各个版本下载地址 ：<a href="https://archive.apache.org/dist/tomcat">https://archive.apache.org/dist/tomcat</a></p><p><img src="/images/toolanddeploy/tomcat/1-4.png"><br>bin文件下表示的是tomcat产品</p><p>src表示的是tomcat源码。</p><p>这两个都要下载。所以你需要下载apache-tomcat-8.0.11.zip和apache-tomcat-8.0.11-src.zip这两个压缩包。</p><p>2、相关文件夹介绍<br>(1)bin:主要用于存放命令， .bat是windows系统下的执行命令。 .sh是linux下的执行命令<br>(2)conf:主要用于存放tomcat的一些配置文件<br>(3)lib:存放tomcat依赖的一些jar包<br>(4)logs:存放tomcat在运行时产生的日志文件<br>(5)temp:存放运行时产生的临时文件<br>(6)webapps:存放应用程序<br>(7)work:存放tomcat运行时编译后的文件，比如JSP编译后的文件。</p><p>3、导入源码到idea中</p><p>4、创建pom.xml文件，导入以下依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>Tomcat8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Tomcat8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>Tomcat8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sourceDirectory</span><span class="token punctuation">></span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sourceDirectory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testSourceDirectory</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testSourceDirectory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testResources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testResource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testResource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testResources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.easymock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>easymock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ant<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ant<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>wsdl4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>wsdl4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxrpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.eclipse.jdt.core.compiler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ecj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>5、创建Application，编写一个名称为Tomcat，填写相关信息</p><pre class="language-txt" data-language="txt"><code class="language-txt">name:tomcatMain class:org.apache.catalina.startup.BootstrapVM options:-Dcatalina.home="apache-tomcat-8.0.11"</code></pre><p>6、在当前源码目录下创建一个apache-tomcat-8.0.11文件夹，并将一些文件拷贝到该目录下。比如<br>bin conf lib logs temp webapps work<br>7、启动，会报错，显示找不到CoolieFilter，直接删除掉就可以了。<br>8、打开浏览器访问localhost:8080</p><p><img src="/images/toolanddeploy/tomcat/1-5.png"></p><p>项目完整目录结构如下：<br><img src="/images/toolanddeploy/tomcat/1-6.png"></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>Tomcat源码由Java编写。我们在使用Tomcat的时候需要依赖JDK环境。由此也可以说明。</p><h3 id="Web容器-1"><a href="#Web容器-1" class="headerlink" title="Web容器"></a>Web容器</h3><p>Web监听端口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Connector</span><span class="token punctuation">.</span><span class="token function">initInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>protocolHandler<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token class-name">AbstractProtocol</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>endpoint<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token class-name">Apr</span><span class="token punctuation">,</span><span class="token class-name">JIo</span><span class="token punctuation">,</span>NIO<span class="token punctuation">,</span>NIO2<span class="token operator">-></span><span class="token class-name">JIoEndpoint</span><span class="token punctuation">.</span>bind<span class="token operator">--</span><span class="token operator">></span>serverSocketFactory<span class="token punctuation">.</span>createSocketJIO即<span class="token class-name">Socket</span>实现方式</code></pre><p>顺着上面代码的顺序，我们可以找到以下代码<br><img src="/images/toolanddeploy/tomcat/1-7.png"><br>由此可说明，我们的猜想正确。Tomcat底层确实是有Web监听的代码。</p><h3 id="Servlet容器-1"><a href="#Servlet容器-1" class="headerlink" title="Servlet容器"></a>Servlet容器</h3><p>验证Tomcat源码中存在将servlet加载的逻辑代码。</p><p>a.找到Tomcat源码中对应的一个Web项目的类<br>b.找到Tomcat源码中web.xml对应的类</p><p>在以前我们使用tomcat的时候，我们会在Tomcat的server.xml文件中配置一个Context.</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span>  <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/web<span class="token punctuation">"</span></span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>E:\\web<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span>  <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/web<span class="token punctuation">"</span></span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>E:\\web<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>这一段配置可以代表一个Web项目在磁盘的位置和访问路径。Context标签就是代表一个Web项目。</p><pre class="language-java" data-language="java"><code class="language-java">web项目<span class="token operator">--</span><span class="token operator">-></span><span class="token class-name">Context</span>标签<span class="token operator">--</span><span class="token operator">-></span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">--</span><span class="token operator">-></span><span class="token class-name">StandardContext</span><span class="token operator">--</span><span class="token operator">-></span><span class="token function">loadOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>证明<span class="token class-name">Wrapper</span>就是<span class="token class-name">Servlet</span> ：加载：<span class="token class-name">ContextConfig</span><span class="token punctuation">.</span><span class="token function">webConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>—<span class="token operator">></span><span class="token function">getContextWebXmlSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>—<span class="token operator">></span><span class="token class-name">Constants<span class="token punctuation">.</span>ApplicationWebXml</span>解析：<span class="token class-name">ContextConfig</span><span class="token punctuation">.</span><span class="token function">webConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>—<span class="token operator">></span><span class="token function">configureContext</span><span class="token punctuation">(</span>webXml<span class="token punctuation">)</span>—<span class="token operator">></span>context<span class="token punctuation">.</span><span class="token function">createWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/toolanddeploy/tomcat/1-8.png"><br>确实会存在将wrapper添加到list的代码逻辑。而Wrapper就是Servlet。Tomcat底层实现了对Servlet进行了一次包装。将Servlet包装成为了Wrapper</p><h2 id="Tomcat架构图"><a href="#Tomcat架构图" class="headerlink" title="Tomcat架构图"></a>Tomcat架构图</h2><p>既然Context表示标签能够表示Web项目，那按照server.xml文件来看的话，不就能够把tomcat架构图画出来了吗？或者按照之前的简略版推导出来。</p><p>架构图&lt;—&gt;server.xml&lt;—&gt;源码 三者有一一对应的关系<br><img src="/images/toolanddeploy/tomcat/1-9.png"></p><h3 id="各个组件含义"><a href="#各个组件含义" class="headerlink" title="各个组件含义"></a>各个组件含义</h3><p>1.1Server</p><p>Server 服务器的意思，代表整个 tomcat 服务器，一个 tomcat 只有一个 Server</p><p>Server 中包含至少一个 Service 组件，用于提供具体服务。这个在配置文件中也得到很</p><p>好的体现（port=“8005” shutdown=”SHUTDOWN”是在 8005 端口监听到”SHUTDOWN”命</p><p>令，服务器就会停止）</p><p>1.2Service</p><p>Service 中的一个逻辑功能层， 一个 Server 可以包含多个 Service</p><p>Service 接收客户端的请求，然后解析请求，完成相应的业务逻辑，然后把处理后的结</p><p>果返回给客户端，一般会提供两个方法，一个 start 打开服务 Socket 连接，监听服务端口，</p><p>一个 stop 停止服务释放网络资源。</p><p>1.3Connector</p><p>称作连接器，是 Service 的核心组件之一，一个 Service 可以有多个 Connector，主要是</p><p>连接客户端请求,用于接受请求并将请求封装成 Request 和 Response，然后交给 Container 进</p><p>行处理，Container 处理完之后在交给 Connector 返回给客户端。</p><p>1.4Container</p><p>Service 的另一个核心组件，按照层级有 Engine，Host，Context，Wrapper 四种，一个</p><p>Service 只有一个 Engine，其主要作用是执行业务逻辑</p><p>1.5Engine 一个 Service 中有多个 Connector 和一个 Engine，Engine 表示整个 Servlet 引擎，一个</p><p>Engine 下面可以包含一个或者多个 Host，即一个 Tomcat 实例可以配置多个虚拟主机，默认</p><p>的情况下 conf/server.xml 配置文件中<Engine name="Catalina" defaultHost="localhost"> 定</p><p>义了一个名为 Catalina 的 Engine。</p><p>一个 Engine 包含多个 Host 的设计，使得一个服务器实例可以承担多个域名的服务</p><p>1.6Host</p><p>代表一个站点，也可以叫虚拟主机，一个 Host 可以配置多个 Context，在 server.xml 文</p><p>件 中 的 默 认 配 置 为 <Host name="localhost" appBase="webapps" unpackWARs="true" autoDeploy="true">, 其中 appBase=webapps， 也就是<CATALINA_HOME>\webapps 目录，</p><p>unpackingWARS=true 属 性 指 定 在 appBase 指 定 的 目 录 中 的 war 包 都 自 动 的 解 压 ，</p><p>autoDeploy=true 属性指定对加入到 appBase 目录的 war 包进行自动的部署。</p><p>1.7Context</p><p>Context，代表一个应用程序，就是日常开发中的 web 程序，或者一个 WEB-INF 目录以</p><p>及下面的 web.xml 文件，换句话说每一个运行的 webapp 最终都是以 Context 的形式存在，</p><p>每个 Context 都有一个根路径和请求路径；与 Host 的区别是 Context 代表一个应用，如，默</p><p>认配置下 webapps 下的每个目录都是一个应用，其中 ROOT 目录中存放主应用，其他目录</p><p>存放别的子应用，而整个 webapps 是一个站点。</p><h3 id="两个核心组件"><a href="#两个核心组件" class="headerlink" title="两个核心组件"></a>两个核心组件</h3><h4 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h4><h4 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h4><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>工厂模式<br>包装器模式<br>组合设计模式</p>]]></content>
      
      
      <categories>
          
          <category> 工具与部署 </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Vagrant+virtualBox搭建Linux环境</title>
      <link href="/p/89b50073.html"/>
      <url>/p/89b50073.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>作为开发人员来说，不可避免的有时候会用到linux操作系统。我们可以直接租一个阿里云的远程服务器，然后使用Xsell等远程连接软件去访问。但是阿里的远程服务器一年要好几百块钱，配置越高越贵。就学习而言，如果说想节约成本。那我们只有在自己的本机上搭建一个Linux虚拟机环境了。一说到搭建虚拟机，很多人想到的就是VMware这款软件。但今天我们可以通过vagrant+virtualbox来安装centos7系统。</p><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><h3 id="2-1vagrant安装"><a href="#2-1vagrant安装" class="headerlink" title="2.1vagrant安装"></a>2.1vagrant安装</h3><p>1、访问官网，下载vagrant<a href="https://www.vagrantup.com/">https://www.vagrantup.com/</a><br><img src="/images/toolanddeploy/linux/1-1.png" alt="官网"></p><p>2、点击download下载对应的版本，我是window系统这里就下载window版本<br><img src="/images/toolanddeploy/linux/1-2.png" alt="下载对应版本"></p><p>3、下载完成后，双击，傻瓜式安装，一直点下一步就可以了。安装完成后，使用如下命令，验证是否安装成功。如果出现下面图片，则说明安装成功。</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">vagrant</code></pre><p><img src="/images/toolanddeploy/linux/1-3.png" alt="验证vagrant是否安装成功"></p><h3 id="2-2virtualbox安装"><a href="#2-2virtualbox安装" class="headerlink" title="2.2virtualbox安装"></a>2.2virtualbox安装</h3><p>1、官网下载virtualbox。官网:<a href="https://www.virtualbox.org/">https://www.virtualbox.org/</a><br><a href="http://download.virtualbox.org/virtualbox/6.1.16">http://download.virtualbox.org/virtualbox/6.1.16</a><br><img src="/images/toolanddeploy/linux/1-4.png" alt="virtualbox官网"></p><p>2、选择对应版本下载，下载完成后，也是傻瓜式安装，直接点击下一步就可以了。<br><img src="/images/toolanddeploy/linux/1-5.png" alt="virtualbox下载对应版本"></p><p>3、我在安装的过程中，出现了一个严重错误，导致安装失败。如果你也是，可以尝试以下方式看是否能解决。如果没有出现错误，则忽略此步骤。</p><pre class="language-txt" data-language="txt"><code class="language-txt">在我的电脑 -> 管理 -> 服务和应用程序 -> 服务 开启如下两个服务    1，Device Install Service.      2,  Device Setup Manager.</code></pre><p>将这两个服务开启后，再次安装virtualbox。</p><h3 id="2-3安装centos7"><a href="#2-3安装centos7" class="headerlink" title="2.3安装centos7"></a>2.3安装centos7</h3><p>1、创建一个centos7文件夹<br><img src="/images/toolanddeploy/linux/1-6.png" alt="创建文件夹"></p><p>2、打开命令行，cd 进入centos7文件夹下，执行 vagrant init centos/7 命令</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">vagrant init centos&#x2F;7</code></pre><p>打开文件夹，会发现文件夹里新增了一个Vagrantfile文件<br><img src="/images/toolanddeploy/linux/1-7.png" alt="vagrantfile文件"></p><p>3、创建一个virtualbox.box文件<br><img src="/images/toolanddeploy/linux/1-8.png" alt="virtualbox.box"><br>新建一个virtualbox.box文件，可以直接从以下网盘下载。</p><p>链接：<a href="https://pan.baidu.com/s/1Cy7YUlOtzRYlKcQtoaJE5Q">https://pan.baidu.com/s/1Cy7YUlOtzRYlKcQtoaJE5Q</a><br>提取码：ddt7</p><p>4、将virtualbox.box文件添加到vagrant管理的镜像中<br>执行命令 vagrant box add centos/7 D:\virtualbox.box。路径根据你实际存放的位置来写</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">&#x2F;&#x2F;后面是virtualbox.box在磁盘中的路径vagrant box add centos&#x2F;7 D:\virtualbox.box</code></pre><p>查看是否添加成功。</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">vagrant box list</code></pre><p><img src="/images/toolanddeploy/linux/1-9.png" alt="查看是否添加成功"></p><p>5、开启centos虚拟机<br>在之前创建的centos7文件夹打开cmd命令行。开启centos虚拟机</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">vagrant up    启动虚拟机vagrant halt    关闭虚拟机</code></pre><p><img src="/images/toolanddeploy/linux/1-10.png" alt="启动虚拟机"></p><p>6、出现如上图片，说明虚拟机启动成功。如果执行vagrant up命令报错，我们可以尝试以下解决方式。没报错的话，就忽略此步骤<br>用vagrant+virtualbox搭建一个centos的环境，执行vagrant up指令启动虚拟机的时候报错。可能是virtualbox会和Hyper-V 有冲突。按照下面的步骤，我的后来可以运行了<br>6.1 关闭Hyper-v<br>控制面板–》程序–》启动或关闭Window功能<br><img src="/images/toolanddeploy/linux/1-11.png" alt="关闭Hyper-v"><br>关闭后，重启电脑，发现执行命令vagrant up还是不能启动虚拟机</p><p>6.2 命令行关闭<br>命令行输入 bcdedit 查看<br>一般来说可能是 hypervisorlaunchtype Auto<br>需要将它设置为off</p><p><img src="/images/toolanddeploy/linux/1-12.png" alt="命令行关闭"><br>输入命令并回车执行：bcdedit /set hypervisorlaunchtype off<br>再次执行 vagrant up执行成功<br>造成vagrant up命令执行失败的可能性有很多。这只是其中的一种</p><p>至此，使用vagrant+virtualbox搭建centos7完成，后面可以修改Vagrantfile对虚拟机进行相应配置</p><h3 id="2-4Xshell安装与连接"><a href="#2-4Xshell安装与连接" class="headerlink" title="2.4Xshell安装与连接"></a>2.4Xshell安装与连接</h3><p>如果说我们不喜欢使用cmd来操作，习惯使用Xshell这样的远程连接软件，那么我们还需要再进行一些配置</p><p>1、下载Xshell，这一步不做详细介绍<br>2、在centos文件夹下执行vagrant ssh-config<br><img src="/images/toolanddeploy/linux/1-13.png" alt="ssh配置"><br>我们发现PasswordAuthentication 它的值为no。我们需要将它修改为yes。不然使用Xshell是无法连接的。</p><p>3、使用root账户，修改ssh配置</p><pre class="language-txt" data-language="txt"><code class="language-txt">1、vagrant ssh 进入到虚拟机中2、sudo -i 转为root账户3、vi /etc/ssh/sshd_config 进入文件。进入文件后，我们先要按i进入insert模式才能修改文件。修改完成后，按esc退出Insert模式，然后键盘输入:wq保存并退出4、 修改PasswordAuthentication yes5、 passwd修改密码，比如abc1236、 systemctl restart sshd 刷新</code></pre><p><img src="/images/toolanddeploy/linux/1-14.png" alt="ssh配置详细"></p><p>4、修改完成后，我们输入ip a命令来查看IP地址<br><img src="/images/toolanddeploy/linux/1-15.png" alt="IP地址"></p><p>5、将这个ip地址复制下来，然后打开Xshell，如果主机名，用户名和密码，即可使用Xshell登录<br><img src="/images/toolanddeploy/linux/1-16.png" alt="IP地址"></p><h3 id="2-5-VirtualBox静态ip"><a href="#2-5-VirtualBox静态ip" class="headerlink" title="2.5 VirtualBox静态ip"></a>2.5 VirtualBox静态ip</h3><p>当什么也没有配置的时候，我们虚拟机的ip默认是随机给的，也就是说每次启动虚拟机，我们虚拟机的ip地址可能会不一样。这样就会导致一个问题，我们的项目链接虚拟机上Docker安装的MySQL数据库配置文件每次都要修改。这肯定是不行的，不利于我们项目的开发</p><p>如果我们虚拟机每次启动后，虚拟机的Ip地址如果不变的话，那么这个问题岂不是就解决了，所以我们要制定虚拟机的ip地址。先查看本机的ip地址。window机器在命令行窗口敲如下命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">ipconfig</code></pre><p>如果虚拟机此时处于启动的状态，先停止虚拟机<br>修改VagrantFile文件，将配置修改为如下图，当然了ip地址需要根据你自己的本机的配置来改<br><img src="/images/toolanddeploy/linux/1-17.png" alt="修改VagrantFile文件"></p><p>修改完成后，重新执行命令vagrant up 启动虚拟机即可</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>到此为止，我们的Linux环境搭建好了，但是值得注意的是，我们每次开启和关闭虚拟机最好是使用命令行来关闭。不要直接关闭cmd窗口，这样有可能导致下次启动虚拟机失败，又报一些不知名的错误。</p>]]></content>
      
      
      <categories>
          
          <category> 工具与部署 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令介绍</title>
      <link href="/p/e3a6bcfe.html"/>
      <url>/p/e3a6bcfe.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Docker安装成功后，我们简单来了解一下Docker容器的相关命令</p><h1 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h1><p>拉取一个hello-world项目并启动这个项目。运行结果就是打印一句话</p><p><img src="/images/toolanddeploy/docker/2-1.png" alt="拉取运行hello-world项目"></p><h1 id="Docker常用命令介绍"><a href="#Docker常用命令介绍" class="headerlink" title="Docker常用命令介绍"></a>Docker常用命令介绍</h1><h2 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1.拉取镜像"></a>1.拉取镜像</h2><pre class="language-txt" data-language="txt"><code class="language-txt">docker pull &lt;镜像名:tag>   #tag表示版本号，如果没有就默认是最新版本</code></pre><h2 id="2-删除容器"><a href="#2-删除容器" class="headerlink" title="2.删除容器"></a>2.删除容器</h2><pre class="language-txt" data-language="txt"><code class="language-txt">docker rm &lt;容器名 or ID></code></pre><h2 id="3-查看容器日志"><a href="#3-查看容器日志" class="headerlink" title="3.查看容器日志"></a>3.查看容器日志</h2><pre class="language-txt" data-language="txt"><code class="language-txt">docker logs -f &lt;容器名 or ID></code></pre><h2 id="4-查看正在运行的容器"><a href="#4-查看正在运行的容器" class="headerlink" title="4.查看正在运行的容器"></a>4.查看正在运行的容器</h2><pre class="language-txt" data-language="txt"><code class="language-txt">docker psdocker ps -a # 为查看所有的容器，包括已经停止的。</code></pre><h2 id="5-删除所有容器"><a href="#5-删除所有容器" class="headerlink" title="5.删除所有容器"></a>5.删除所有容器</h2><pre class="language-txt" data-language="txt"><code class="language-txt">docker rm $(docker ps -a -q)</code></pre><h2 id="6-停止、启动、杀死指定容器"><a href="#6-停止、启动、杀死指定容器" class="headerlink" title="6.停止、启动、杀死指定容器"></a>6.停止、启动、杀死指定容器</h2><pre class="language-txt" data-language="txt"><code class="language-txt">docker start &lt;容器名 or ID> # 启动容器docker stop &lt;容器名 or ID> # 启动容器docker kill &lt;容器名 or ID> # 杀死容器</code></pre><h2 id="7-查看所有镜像"><a href="#7-查看所有镜像" class="headerlink" title="7.查看所有镜像"></a>7.查看所有镜像</h2><pre class="language-txt" data-language="txt"><code class="language-txt">docker images</code></pre><h2 id="8-暴露端口"><a href="#8-暴露端口" class="headerlink" title="8.暴露端口"></a>8.暴露端口</h2><pre class="language-txt" data-language="txt"><code class="language-txt"># 一共有三种形式进行端口映射docker -p ip:hostPort:containerPort # 映射指定地址的主机端口到容器端口# 例如：docker -p 127.0.0.1:3306:3306 映射本机3306端口到容器的3306端口docker -p ip::containerPort # 映射指定地址的任意可用端口到容器端口# 例如：docker -p 127.0.0.1::3306 映射本机的随机可用端口到容器3306端口docer -p hostPort:containerPort # 映射本机的指定端口到容器的指定端口# 例如：docker -p 3306:3306 # 映射本机的3306端口到容器的3306端口</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是Docker容器的一些常见命令</p>]]></content>
      
      
      <categories>
          
          <category> 工具与部署 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境下安装Docekr</title>
      <link href="/p/d2b48139.html"/>
      <url>/p/d2b48139.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>关于Docker的安装，我们可以去Docker官网下载安装，官网针对不同的系统有不同的操作文档。本文档主要用于演示Linux环境下Docer的安装。我使用的是本地搭建Linux环境。如果购买了阿里云的远程服务器，会比较方便一点。<br>Docker官网： <a href="https://www.docker.com/">https://www.docker.com</a></p><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="1、登录本地的Linux环境"><a href="#1、登录本地的Linux环境" class="headerlink" title="1、登录本地的Linux环境"></a>1、登录本地的Linux环境</h2><p><img src="/images/toolanddeploy/docker/1-2.png" alt="登录Linux环境"></p><h2 id="2、卸载之前的Docker"><a href="#2、卸载之前的Docker" class="headerlink" title="2、卸载之前的Docker"></a>2、卸载之前的Docker</h2><p>如果你之前安装过Docker，再次安装的话很有可能出现问题。所以为了以防万一，我们先做一次卸载操作</p><pre class="language-txt" data-language="txt"><code class="language-txt">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><p><img src="/images/toolanddeploy/docker/1-3.png" alt="卸载Docker"></p><h2 id="3、安装必要的依赖"><a href="#3、安装必要的依赖" class="headerlink" title="3、安装必要的依赖"></a>3、安装必要的依赖</h2><pre class="language-txt" data-language="txt"><code class="language-txt">sudo yum install -y yum-utils \device-mapper-persistent-data \lvm2</code></pre><p><img src="/images/toolanddeploy/docker/1-4.png" alt="安装必要依赖"></p><h2 id="4、设置Docker仓库"><a href="#4、设置Docker仓库" class="headerlink" title="4、设置Docker仓库"></a>4、设置Docker仓库</h2><pre class="language-txt" data-language="txt"><code class="language-txt">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo </code></pre><p><img src="/images/toolanddeploy/docker/1-5.png" alt="设置阿里云镜像"></p><p>除此之外，我们还可以配置一下镜像加速器。<br>访问这个地址，使用自己的阿里云账号登录，查看菜单栏左下角，发现有一个镜像加速器:<br><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><p><img src="/images/toolanddeploy/docker/1-7.png" alt="配置镜像加速器"></p><h2 id="5、安装Docker"><a href="#5、安装Docker" class="headerlink" title="5、安装Docker"></a>5、安装Docker</h2><pre class="language-txt" data-language="txt"><code class="language-txt">sudo yum install -y docker-ce docker-ce-cli containerd.io</code></pre><p><img src="/images/toolanddeploy/docker/1-6.png" alt="安装Docker"></p><h2 id="6、启动Docker"><a href="#6、启动Docker" class="headerlink" title="6、启动Docker"></a>6、启动Docker</h2><p>sudo systemctl start docker</p><p>设置开机启动<br>sudo systemctl enable docker</p><p>执行以下命令不报错则说明docker安装成功<br>docker images</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是Docker在Linux环境上的安装</p>]]></content>
      
      
      <categories>
          
          <category> 工具与部署 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/p/0.html"/>
      <url>/p/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/p/0.html"/>
      <url>/p/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/p/0.html"/>
      <url>/p/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/p/72e3b671.html"/>
      <url>/p/72e3b671.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="什么是策略模式"><a href="#什么是策略模式" class="headerlink" title="什么是策略模式"></a>什么是策略模式</h2><p>策略模式是指定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化不会影响到算法的用户</p><h2 id="角色分工"><a href="#角色分工" class="headerlink" title="角色分工"></a>角色分工</h2><p><img src="/images/internet/design/behavior/1-1.png"></p><ul><li>Context封装角色</li></ul><p>也叫做上下文角色，起承上启下封装的作用，屏蔽高层模块对策略、算法的直接访问，封装可能存在的变化</p><ul><li>Strategy抽象策略角色</li></ul><p>策略、算法家族的抽象，通常为接口，定义每个策略或算法必须具体的方法和属性</p><ul><li>ConcreteStrategy具体策略角色</li></ul><p>实现抽象策略中的操作，该类含有具体的方法</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>诸葛亮锦囊妙计帮助刘备抱得美人归<br><img src="/images/internet/design/behavior/1-2.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/9 8:30 * 锦囊妙计接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IStrategy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/9 8:31 * 第一条锦囊妙计：找乔国老开后门 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BackDoor</span> <span class="token keyword">implements</span> <span class="token class-name">IStrategy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找乔国老帮忙，让吴国太给孙权施加压力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/9 8:33 * 第二条锦囊妙计：吴国太开绿灯 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GivenGreenLight</span> <span class="token keyword">implements</span> <span class="token class-name">IStrategy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吴国太帮忙，放行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/9 8:34 * 第三条锦囊妙计：孙夫人断后 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockEnemy</span> <span class="token keyword">implements</span> <span class="token class-name">IStrategy</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"孙夫人断后，挡住追兵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/9 8:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">IStrategy</span> strategy<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token class-name">IStrategy</span> strategy<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy<span class="token operator">=</span>strategy<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/9 8:36 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhaoYun</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Context</span> context<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---刚刚到吴国的时候拆第一个---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BackDoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//拿到妙计</span>        context<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//拆开执行</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刘备乐不思蜀了， 拆第二个了</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---刘备乐不思蜀了， 拆第二个了---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GivenGreenLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行了第二个锦囊</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//孙权的小兵追来了， 咋办？ 拆第三个</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---孙权的小兵追来了， 咋办？ 拆第三个---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BlockEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//孙夫人退兵</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>优点：</p><p>策略模式符合开闭原则</p><p>避免使用多重条件转移语句，例如if..else、switch</p><p>使用策略模式可以提高算法个保密性和安全性</p><p>缺点：</p><p>客户端必须知道所有的策略，并且自行决定使用哪一个策略类</p><p>代码中会有很多的策略类，增加维护难度</p>]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 设计模式 </category>
          
          <category> 行为型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板方法模式</title>
      <link href="/p/ecc6414b.html"/>
      <url>/p/ecc6414b.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="什么是模板方法模式"><a href="#什么是模板方法模式" class="headerlink" title="什么是模板方法模式"></a>什么是模板方法模式</h2><p>所谓模板方法模式，其实很简单，可以从模板的角度考虑，就是一个对模板的应用，就好比老师出试卷，每个人的试卷都是一样的，即都是从老师的原版试卷复印来的，这个原版试卷就是一个模板，可每个人写在试卷上的答案都是不一样的，这就是模板方法模式，是不是很好理解。它的主要用途在于将不变的行为从子类搬到超类，去除了子类中的重复代码。</p><h2 id="角色分工"><a href="#角色分工" class="headerlink" title="角色分工"></a>角色分工</h2><p><img src="/images/internet/design/behavior/2-1.png"></p><ul><li>抽象模板类</li><li>具体模板类</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h3><p><img src="/images/internet/design/behavior/2-2.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/8 10:00 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HummerModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">engineBoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/8 10:02 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HummerH1Model</span> <span class="token keyword">extends</span> <span class="token class-name">HummerModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马H1发动。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马h1停车。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马h1鸣笛。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">engineBoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马h1引擎声。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">engineBoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">alarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/8 10:02 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HummerH2Model</span> <span class="token keyword">extends</span> <span class="token class-name">HummerModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马H2发动。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马h2停车。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马h2鸣笛。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">engineBoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马h2引擎声。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">engineBoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">alarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/8 10:12 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HummerModel</span> h1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HummerH1Model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HummerModel</span> h2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HummerH2Model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p><img src="/images/internet/design/behavior/2-3.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/8 10:10 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HummerModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">engineBoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">engineBoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">alarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/8 10:12 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HummerH1Model</span> <span class="token keyword">extends</span> <span class="token class-name">HummerModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马h1发动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马h1停车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马h1鸣笛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">engineBoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马h1引擎声"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/8 10:14 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HummerH2Model</span> <span class="token keyword">extends</span> <span class="token class-name">HummerModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马h2发动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马h2停车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马h2鸣笛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">engineBoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"悍马h2引擎声"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/8 10:16 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HummerModel</span> h1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HummerH1Model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HummerModel</span> h2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HummerH2Model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>优点：</p><ul><li>封装不变的部分，扩展可变的部分</li><li>提取公共部分的代码，便于维护</li><li>行为由父类控制，子类实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 设计模式 </category>
          
          <category> 行为型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板方法模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/p/9a246216.html"/>
      <url>/p/9a246216.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="什么是观察者模式"><a href="#什么是观察者模式" class="headerlink" title="什么是观察者模式"></a>什么是观察者模式</h2><p>观察者模式又被称为发布订阅模式，属于行为型模式的一种，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时会通知所有的观察者对象，使他们能够自动更新自己<br><img src="/images/internet/design/behavior/3-1.png"></p><h2 id="角色分工"><a href="#角色分工" class="headerlink" title="角色分工"></a>角色分工</h2><p>（1）Subject：抽象主题，他把所有观察者对象保存在一个集合里，可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。意思就是明星把所有的粉丝都保存在一个账号里面，粉丝数量不限，可以新增粉丝也可以拉黑粉丝。</p><p>（2）ConcreteSubject：具体主题，该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。意思是我们的明星一有动态，就会把消息给粉丝。</p><p>（3）Observer：抽象观察者，是观察者者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。这就是我们所有粉丝的抽象。</p><p>（4）ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。具体每一个粉丝。</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>案例：创建一个明星，明星有很多粉丝，当明星发布一个动态后，所有的粉丝都会受到信息<br><img src="/images/internet/design/behavior/3-2.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//定义一个抽象的观察者</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Fan</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//具体观察者，具体粉丝</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteFan</span> <span class="token keyword">implements</span> <span class="token class-name">Fan</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> fanName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ConcreteFan</span><span class="token punctuation">(</span><span class="token class-name">String</span> fanName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fanName<span class="token operator">=</span>fanName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fanName<span class="token operator">+</span><span class="token string">"知道了"</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//定义抽象主题，抽象明星</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Idol</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//增加明星</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFan</span><span class="token punctuation">(</span><span class="token class-name">Fan</span> fan<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//拉黑粉丝</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delFan</span><span class="token punctuation">(</span><span class="token class-name">Fan</span> fan<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//告诉粉丝我的动态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyFan</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteIdol</span> <span class="token keyword">implements</span> <span class="token class-name">Idol</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Fan</span><span class="token punctuation">></span></span> fanList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFan</span><span class="token punctuation">(</span><span class="token class-name">Fan</span> fan<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        fanList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fan<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delFan</span><span class="token punctuation">(</span><span class="token class-name">Fan</span> fan<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        fanList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>fan<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyFan</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Fan</span> fan <span class="token operator">:</span> fanList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fan<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通知每一个粉丝</span>        <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConcreteIdol</span> idol<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcreteIdol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ConcreteFan</span> fanA<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcreteFan</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ConcreteFan</span> fanB<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcreteFan</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ConcreteFan</span> fanC<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcreteFan</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                idol<span class="token punctuation">.</span><span class="token function">addFan</span><span class="token punctuation">(</span>fanA<span class="token punctuation">)</span><span class="token punctuation">;</span>        idol<span class="token punctuation">.</span><span class="token function">addFan</span><span class="token punctuation">(</span>fanB<span class="token punctuation">)</span><span class="token punctuation">;</span>        idol<span class="token punctuation">.</span><span class="token function">addFan</span><span class="token punctuation">(</span>fanC<span class="token punctuation">)</span><span class="token punctuation">;</span>                idol<span class="token punctuation">.</span><span class="token function">notifyFan</span><span class="token punctuation">(</span><span class="token string">"我会唱跳rap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/images/internet/design/behavior/3-3.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>观察者模式的主要优点在于可以实现表示层和数据逻辑层的分离，并在观察目标和观察者之间建立一个抽象的耦合，支持广播通信；其主要缺点在于如果一个观察目标对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间，而且如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</p>]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 设计模式 </category>
          
          <category> 行为型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/p/0.html"/>
      <url>/p/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/p/0.html"/>
      <url>/p/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/p/0.html"/>
      <url>/p/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>备忘录模式</title>
      <link href="/p/c3176455.html"/>
      <url>/p/c3176455.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="什么是备忘录模式"><a href="#什么是备忘录模式" class="headerlink" title="什么是备忘录模式"></a>什么是备忘录模式</h2><p>又叫做快照模式</p><p>定义：在不破坏封闭的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p><p>举例说明：就是可以不断的回到起点。动漫《从零开始的异世界》中男主死后会不断重生</p><h2 id="角色分析"><a href="#角色分析" class="headerlink" title="角色分析"></a>角色分析</h2><p><img src="/images/internet/design/behavior/7-1.png"></p><ul><li>Originator发起人角色</li></ul><p>记录当前时刻的内部状态，负责定义哪些属于备份范围的状态，负责创建和恢复备忘录数据</p><ul><li>Memento备忘录角色</li></ul><p>负责存储Originator发起人对象的内部状态，在需要的时候提供发起人需要的内部状态</p><ul><li>Caretaker备忘录管理员角色</li></ul><p>对备忘录进行管理、保存和提供备忘录</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>现在模拟一个场景：一个男生向女生表白，表白不会一次成功，所以我们希望，在表白失败后可以回到表白前的状态，以便于再次表白。</p><h3 id="原始方式"><a href="#原始方式" class="headerlink" title="原始方式"></a>原始方式</h3><p><img src="/images/internet/design/behavior/7-2.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/11/28 16:14 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//男孩的状态</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">//认识女孩子后状态肯定改变， 比如心情、 手中的花等</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"心情可能很不好"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/11/28 16:14 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//声明出主角</span>        <span class="token class-name">Boy</span> boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化当前状态</span>        boy<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"心情很棒！ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====男孩现在的状态======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boy<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//需要记录下当前状态呀</span>        <span class="token class-name">Boy</span> backup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        backup<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>boy<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//男孩去追女孩， 状态改变</span>        boy<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n=====男孩追女孩子后的状态======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boy<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//追女孩失败， 恢复原状</span>        boy<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>backup<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n=====男孩恢复后的状态======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boy<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/images/internet/design/behavior/7-3.png"><br>这是较为简单的方法，我们新创建了一个Boy对象来存储状态。</p><p>但是这违反了单一职责原则，Boy类的本身职责是追女生。而保留和恢复原始状态应该由另外一个类来完成；</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p><img src="/images/internet/design/behavior/7-4.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/11/28 16:18 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//男孩的状态</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">//认识女孩子后状态肯定改变， 比如心情、 手中的花等</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"心情可能很不好"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//保留一个备份</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//恢复一个备份</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreMemento</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>memento<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//备忘录</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span>state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span>state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/11/28 16:22 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//声明出主角</span>        <span class="token class-name">Boy</span> boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化当前状态</span>        boy<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"心情很棒！ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====男孩现在的状态======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boy<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要记录下当前状态呀</span>        <span class="token class-name">Memento</span> mem <span class="token operator">=</span> boy<span class="token punctuation">.</span><span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//男孩去追女孩， 状态改变</span>        boy<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n=====男孩追女孩子后的状态======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boy<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//追女孩失败， 恢复原状</span>        boy<span class="token punctuation">.</span><span class="token function">restoreMemento</span><span class="token punctuation">(</span>mem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n=====男孩恢复后的状态======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boy<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>增加了一个新类Memento类，负责状态的保存和恢复，同时Boy类中增加了创建备忘录和恢复备忘录的方法</p><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><p><img src="/images/internet/design/behavior/7-5.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/11/28 16:18 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//男孩的状态</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">//认识女孩子后状态肯定改变， 比如心情、 手中的花等</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"心情可能很不好"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//保留一个备份</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//恢复一个备份</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreMemento</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>memento<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/11/28 16:27 * 备忘录管理者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Caretaker</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Memento</span> memento<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memento<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemento</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memento<span class="token operator">=</span>memento<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/11/28 16:19 */</span><span class="token comment">//备忘录</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span>state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span>state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/11/28 16:29 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Boy</span> boy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Caretaker</span> caretaker<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Caretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化当前状态</span>        boy<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"心情很棒！ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====男孩现在的状态======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boy<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//记录下当前状态</span>        caretaker<span class="token punctuation">.</span><span class="token function">setMemento</span><span class="token punctuation">(</span>boy<span class="token punctuation">.</span><span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//男孩去追女孩， 状态改变</span>        boy<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n=====男孩追女孩子后的状态======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boy<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//追女孩失败， 恢复原状</span>       boy<span class="token punctuation">.</span><span class="token function">restoreMemento</span><span class="token punctuation">(</span>caretaker<span class="token punctuation">.</span><span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n=====男孩恢复后的状态======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boy<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 设计模式 </category>
          
          <category> 行为型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备忘录模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/p/7b510e10.html"/>
      <url>/p/7b510e10.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h2><p>代理模式是指为其他对象提供一种代理，以控制对这个对象的访问</p><p>代理对象在客户端和目标对象之间起到中介作用</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="静态代理角色分工"><a href="#静态代理角色分工" class="headerlink" title="静态代理角色分工"></a>静态代理角色分工</h3><p><img src="/images/internet/design/struct/3-1.png"></p><ul><li>抽象角色：一般会使用接口或者抽象类来解决    Rent</li><li>真实角色：被代理的角色                                    Host</li><li>代理角色：代理真实角色，一般会做一些附属操作    Proxy</li><li>客户：访问代理对象                                          Client</li></ul><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//抽象的角色</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Rent</span><span class="token punctuation">&#123;</span>     <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//真实角色</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Host</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房东出租房子"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//代理角色</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Host</span> host<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name">Host</span> host<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>host<span class="token operator">=</span>host<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        host<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//看房-----中介自有的方法，房东没有</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中介带你看房"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//收中介费-----中介自有的方法，房东没有</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收中介费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//客户</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Host</span> host<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        host<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//传统情况下，我们直接找房东租房</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用代理模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Host</span> host<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//代理，中介帮房东出租房子，代理角色一般会有附属操作</span>        <span class="token class-name">Proxy</span> proxy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//你不用面对房东，直接找中介租房</span>        proxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="静态代理分析"><a href="#静态代理分析" class="headerlink" title="静态代理分析"></a>静态代理分析</h3><p>优点：</p><ul><li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li><li>公共交给代理角色，实现业务分工</li><li>公共业务发生扩展的时候，方便集中管理</li></ul><p>缺点：</p><p>一个真实角色就需要一个代理对象，耗费资源</p><h3 id="静态代理加深理解"><a href="#静态代理加深理解" class="headerlink" title="静态代理加深理解"></a>静态代理加深理解</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//抽象角色</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//真实对象</span>publci <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//代理类,在不改变原来的业务代码基础上，增加功能</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询了一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        publci <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//客户</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">&#123;</span>    <span class="token class-name">UserService</span> userService<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//传统调用方法</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">&#123;</span>    <span class="token class-name">UserService</span> userService<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UserServiceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//代理对象调用方法</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="动态代理角色分工"><a href="#动态代理角色分工" class="headerlink" title="动态代理角色分工"></a>动态代理角色分工</h3><ul><li>动态代理和静态代理的角色一样</li><li>动态代理的代理类是动态生成的，不是我们直接写好的</li><li>动态代理分为两大类：基于接口的动态代理，基于类是动态代理</li></ul><p>​                 基于接口—-JDK动态代理</p><p>​                基于类——-cglib</p><p>​                 java字节码实现： javasist</p><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//抽象的角色</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Rent</span><span class="token punctuation">&#123;</span>     <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//真实角色</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Host</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房东出租房子"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//代理处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyInvocationHandle</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">&#123;</span>    <span class="token comment">//被代理的接口，抽象角色</span>    <span class="token keyword">private</span> <span class="token class-name">Rent</span> rent<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRent</span><span class="token punctuation">(</span><span class="token class-name">Rent</span> rent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rent<span class="token operator">=</span>rent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//生成代理类</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               rent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//处理代理实例，并且返回结果</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">&#123;</span>        <span class="token comment">//动态代理的本质，基于反射实现</span>        <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result<span class="token operator">=</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>rent<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中介带看房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收中介费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//客户类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//真实角色</span>        <span class="token class-name">Host</span> host<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//代理处理器</span>        <span class="token class-name">ProxyInvocationHandler</span> pih<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ProxyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过代理处理器处理要调用的接口对象</span>        pih<span class="token punctuation">.</span><span class="token function">setRent</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Rent</span> proxy<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Rent</span><span class="token punctuation">)</span> pih<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="动态代理分析"><a href="#动态代理分析" class="headerlink" title="动态代理分析"></a>动态代理分析</h3><p>可以使真实对象的操作更加纯粹，不用去关注一些公共的业务</p><p>公共交给代理角色，实现业务分工</p><p>公共业务发生扩展的时候，方便集中管理</p><p>一个动态代理类代理一个接口，一般就是对应一类的业务</p><p>一个动态代理类可以代理多个类</p><h3 id="动态代理加深理解"><a href="#动态代理加深理解" class="headerlink" title="动态代理加深理解"></a>动态代理加深理解</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//抽象角色</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//真实角色</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Host</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房东出租房子"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//代理处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyInvocationHandle</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">&#123;</span>    <span class="token comment">//被代理的接口，抽象角色</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTarget</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token operator">=</span>target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//生成代理类</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//处理代理实例，并且返回结果</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">&#123;</span>        <span class="token comment">//动态代理的本质，基于反射实现</span>        <span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result<span class="token operator">=</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token operator">+</span><span class="token string">"方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//真实角色</span>        <span class="token class-name">UserServiceImpl</span> userServiceImpl<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//代理处理器</span>        <span class="token class-name">ProxyInvocationHandler</span> pih<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ProxyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pih<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>userServiceImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">UserService</span> proxy<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span>pih<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 设计模式 </category>
          
          <category> 结构型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解释器模式</title>
      <link href="/p/30cf0cd2.html"/>
      <url>/p/30cf0cd2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="角色分工"><a href="#角色分工" class="headerlink" title="角色分工"></a>角色分工</h2><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 设计模式 </category>
          
          <category> 行为型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解释器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中介者模式</title>
      <link href="/p/d036071c.html"/>
      <url>/p/d036071c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="什么是中介者模式"><a href="#什么是中介者模式" class="headerlink" title="什么是中介者模式"></a>什么是中介者模式</h2><p>中介者模式是用来降低多个对象和类之间的通信复杂性</p><h2 id="角色分析"><a href="#角色分析" class="headerlink" title="角色分析"></a>角色分析</h2><p><img src="/images/internet/design/behavior/11-1.png"></p><ul><li>Mediator 抽象中介者角色</li></ul><p>抽象中介者角色定义统一接口，用于各同事角色之间的通信</p><ul><li>ConcreteMediator 具体中介者角色</li></ul><p>具体中介者角色通过协调各同事角色实现协作行为，因此它必须依赖于各个同事角色</p><ul><li>Colleague同事角色</li></ul><p>每一个同事角色都知道中介者角色，而且与其他的同事角色通信的时候，一定要通过中介者角色协作。每个同事类的行为分为两种：一种是同事本身的行为，比如改变对象本身的状态，处理自己的行为等，这种行为叫做自发行为，与其他同事类或者中介者没有任何的依赖；第二种是必须依赖中介者才能完成的任务，叫做依赖方法</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>来做一个简单的货品采购管理</p><h3 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h3><p><img src="/images/internet/design/behavior/11-2.png"></p><p><img src="/images/internet/design/behavior/11-3.png"></p><ul><li>采购管理</li></ul><p>Purchase定义了采购电脑的标准： 如果销售情况比较好， 大于80分， 你让我采购多少我就采购多少； 销售情况不好， 你让我采购100台， 我就采购50台， 对折采购。 电脑采购完毕， 需要放到库房中， 因此要调用库存的方法， 增加库存电脑数量  </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/2 14:31 * 采购管理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Purchase</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 采购IBM电脑     * @param number     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyIBMComputer</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">Stock</span> stock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Sale</span> sale<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> saleStatus <span class="token operator">=</span> sale<span class="token punctuation">.</span><span class="token function">getSaleStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>saleStatus<span class="token operator">></span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//销售状况良好</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"采购IBM电脑："</span><span class="token operator">+</span>number<span class="token operator">+</span><span class="token string">"台"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stock<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//销售状况一般</span>            <span class="token keyword">int</span> buyNumber<span class="token operator">=</span>number<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"采购IBM电脑："</span><span class="token operator">+</span>buyNumber<span class="token operator">+</span><span class="token string">"台"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stock<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span>buyNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refuseBuyIBM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不再采购IBM电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>销售管理</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/2 14:32 * 销售管理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sale</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 销售IBM电脑     * @param number     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellIBMComputer</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">Stock</span> stock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Purchase</span> purchase<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Purchase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>stock<span class="token punctuation">.</span><span class="token function">getStockNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           purchase<span class="token punctuation">.</span><span class="token function">buyIBMComputer</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"销售IBM电脑"</span><span class="token operator">+</span>number<span class="token operator">+</span><span class="token string">"台"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       stock<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//模拟销售情况</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSaleStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Random</span> random<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> saleStatus <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IBM电脑的销售情况"</span><span class="token operator">+</span>saleStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> saleStatus<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//打折处理</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">offSale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Stock</span> stock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打折销售IBM电脑"</span><span class="token operator">+</span>stock<span class="token punctuation">.</span><span class="token function">getStockNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"台"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>Sale类中的getSaleStatus是获得销售情况， 这个当然要出现在Sale类中了。 记住要把恰当的类放到恰当的类中， 销售情况只有销售人员才能反馈出来， 通过百分制的机制衡量销售情况  </p><ul><li>存货管理</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/2 14:32 * 存货管理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stock</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> COMPUTER_NUMBER<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 库存增加     * @param number     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        COMPUTER_NUMBER<span class="token operator">=</span>COMPUTER_NUMBER<span class="token operator">+</span>number<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"库存数量为："</span><span class="token operator">+</span>COMPUTER_NUMBER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 库存降低     * @param number     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       COMPUTER_NUMBER<span class="token operator">=</span>COMPUTER_NUMBER<span class="token operator">-</span>number<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"库存数量为："</span><span class="token operator">+</span>COMPUTER_NUMBER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStockNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> COMPUTER_NUMBER<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 存货压力大，清仓     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clearStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Purchase</span> purchase<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Purchase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Sale</span> sale<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清理存货的数量为："</span><span class="token operator">+</span>COMPUTER_NUMBER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//要求折价销售</span>        sale<span class="token punctuation">.</span><span class="token function">offSale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//采购人员不要采购</span>        purchase<span class="token punctuation">.</span><span class="token function">refuseBuyIBM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>库房中的货物数量肯定有增减， 同时库房还有一个容量显示， 达到一定的容量后就要求对一些商品进行折价处理， 以腾出更多的空间容纳新产品。 于是就有了clearStock方法， 既然是清仓处理肯定就要折价销售了  </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/2 14:51 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//采购人员采购电脑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------采购人员采购电脑--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Purchase</span> purchase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Purchase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        purchase<span class="token punctuation">.</span><span class="token function">buyIBMComputer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销售人员销售电脑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n------销售人员销售电脑--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Sale</span> sale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sale<span class="token punctuation">.</span><span class="token function">sellIBMComputer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//库房管理人员管理库存</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n------库房管理人员清库处理--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stock</span> stock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stock<span class="token punctuation">.</span><span class="token function">clearStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这种传统的方式的确也能实现功能，但是我们的Purchase类、Stock类、Sale类之间相互关联。迪米特法则认为“每个类只和自己的朋友类进行交流”，这个朋友类并不是越多越好，朋友类越多，耦合性越大，这个时候我们要修改就得修改一整片。例如说我们现在要扩展功能,如下图<br><img src="/images/internet/design/behavior/11-4.png"><br>这样的设计肯定是存在问题的</p><h3 id="中介者模式方式"><a href="#中介者模式方式" class="headerlink" title="中介者模式方式"></a>中介者模式方式</h3><p><img src="/images/internet/design/behavior/11-5.png"><br><img src="/images/internet/design/behavior/11-6.png"><br>加入一个中介者作为了三个模块的交流核心，每个模块之间不再相互交流，要交流就通过中介者进行。每个模块者负责自己的业务逻辑，不属于自己的则丢给中介者来处理<br><img src="/images/internet/design/behavior/11-7.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/2 15:11 * 抽象中介者 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractMediator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name">Purchase</span> purchase<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">Sale</span> sale<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">Stock</span> stock<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AbstractMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        purchase<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Purchase</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sale<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Sale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/2 15:34 * 具体中介者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mediator</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMediator</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//中介者中重要的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> objects<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"purchase.buy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//采购电脑</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buyComputer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"sale.sell"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//销售电脑</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sellComputer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"sale.offsell"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//折价销售</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">offSell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"stock.clear"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//清仓处理</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//采购电脑</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buyComputer</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> saleStatus <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span>sale<span class="token punctuation">.</span><span class="token function">getSaleStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>saleStatus<span class="token operator">></span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//销售情况良好</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"采购IBM电脑:"</span><span class="token operator">+</span>number <span class="token operator">+</span> <span class="token string">"台"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">super</span><span class="token punctuation">.</span>stock<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//销售情况不好</span>            <span class="token keyword">int</span> buyNumber <span class="token operator">=</span> number<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//折半采购</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"采购IBM电脑： "</span><span class="token operator">+</span>buyNumber<span class="token operator">+</span> <span class="token string">"台"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">super</span><span class="token punctuation">.</span>stock<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span>buyNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//销售电脑</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sellComputer</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>stock<span class="token punctuation">.</span><span class="token function">getStockNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//库存数量不够销售</span>            <span class="token keyword">super</span><span class="token punctuation">.</span>purchase<span class="token punctuation">.</span><span class="token function">buyIBMcomputer</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>stock<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//减价销售电脑</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">offSell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"折价销售IBM电脑"</span><span class="token operator">+</span>stock<span class="token punctuation">.</span><span class="token function">getStockNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"台"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">clearStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//要求清仓销售</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>sale<span class="token punctuation">.</span><span class="token function">offSale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//要求采购人员不要采购</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>purchase<span class="token punctuation">.</span><span class="token function">refuseBuyIBM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/2 15:38 * 抽象同事类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractColleague</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name">AbstractMediator</span> mediator<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AbstractColleague</span><span class="token punctuation">(</span><span class="token class-name">AbstractMediator</span> mediator<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mediator<span class="token operator">=</span>mediator<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/2 15:12 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Purchase</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractColleague</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Purchase</span><span class="token punctuation">(</span><span class="token class-name">AbstractMediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//采购IBM电脑</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyIBMcomputer</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>mediator<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"purchase.buy"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//不再采购IBM电脑</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refuseBuyIBM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不再采购IBM电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/2 15:12 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stock</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractColleague</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token class-name">AbstractMediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> COMPUTER_NUMBER<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">//库存增加</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        COMPUTER_NUMBER <span class="token operator">=</span> COMPUTER_NUMBER <span class="token operator">+</span> number<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"库存数量为： "</span><span class="token operator">+</span>COMPUTER_NUMBER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//库存降低</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        COMPUTER_NUMBER <span class="token operator">=</span> COMPUTER_NUMBER <span class="token operator">-</span> number<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"库存数量为： "</span><span class="token operator">+</span>COMPUTER_NUMBER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获得库存数量</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStockNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> COMPUTER_NUMBER<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//存货压力大了， 就要通知采购人员不要采购， 销售人员要尽快销售</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clearStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清理存货数量为： "</span><span class="token operator">+</span>COMPUTER_NUMBER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>mediator<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"stock.clear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/2 15:12 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sale</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractColleague</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Sale</span><span class="token punctuation">(</span><span class="token class-name">AbstractMediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//销售IBM电脑</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellIBMComputer</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>mediator<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"sale.sell"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"销售IBM电脑"</span><span class="token operator">+</span>number<span class="token operator">+</span><span class="token string">"台"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//反馈销售情况， 0～100变化， 0代表根本就没人买， 100代表非常畅销， 出一个卖一个</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSaleStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> saleStatus <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IBM电脑的销售情况为： "</span><span class="token operator">+</span>saleStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> saleStatus<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//折价处理</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">offSale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>mediator<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"sale.offsell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/2 15:47 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AbstractMediator</span> mediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//采购人员采购电脑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------采购人员采购电脑--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Purchase</span> purchase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Purchase</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        purchase<span class="token punctuation">.</span><span class="token function">buyIBMcomputer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销售人员销售电脑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n------销售人员销售电脑--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Sale</span> sale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sale</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        sale<span class="token punctuation">.</span><span class="token function">sellIBMComputer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//库房管理人员管理库存</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n------库房管理人员清库处理--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stock</span> stock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        stock<span class="token punctuation">.</span><span class="token function">clearStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在场景类中增加了一个中介者，然后分别传递到三个同事类中，三个类都具有相同的特性：只负责自己的行为，与自己无关的行为交给中介者去处理，程序运行结果是相同的。从项目的设计上来看，加入了是中介者。设计结构清晰了很多，而且类之间的耦合性大大减少</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>优点</strong></p><p>中介者模式的优点就是减少类之间的依赖，把原有的一对多的依赖变成了一对一的依赖，同事类只依赖中介者，减少了依赖，同时也降低了类的耦合</p><p><strong>缺点</strong></p><p>中介者模式的缺点就是中介者会膨胀的越来越大，而且逻辑复杂，原本N个独享直接的相互依赖关系转换为中介者和同事类的依赖关系，同事类越多，中介者的逻辑就越复杂</p>]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 设计模式 </category>
          
          <category> 行为型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中介者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/p/f5c535ea.html"/>
      <url>/p/f5c535ea.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="什么是适配器模式"><a href="#什么是适配器模式" class="headerlink" title="什么是适配器模式"></a>什么是适配器模式</h2><p>将一个类的接口转换成客户希望的另外一个接口，适配器模式使得原本由于接口不兼容而不能一起工作的类可以在一起工作。</p><h2 id="角色分析"><a href="#角色分析" class="headerlink" title="角色分析"></a>角色分析</h2><p><img src="/images/internet/design/struct/1-1.png"><br>目标接口：客户所期待的接口，目标可以使具体的类或者抽象的类，也可以是接口</p><p>需要适配的类：需要适配的类或者带适配的类</p><p>适配器：通过包装一个需要适配的对象，把原接口转换成目标对象</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="电脑上网案例"><a href="#电脑上网案例" class="headerlink" title="电脑上网案例"></a>电脑上网案例</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//网线</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NetWire</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接网线上网"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//抽象，转接头</span>publci <span class="token keyword">interface</span> <span class="token class-name">NetUSB</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//具体实现，</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">extends</span> <span class="token class-name">NetWire</span> <span class="token keyword">implements</span> <span class="token class-name">NetUSB</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">net</span><span class="token punctuation">(</span><span class="token class-name">NetUSB</span> adapter<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        adapter<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//电脑，适配器，网线</span>        <span class="token class-name">Computer</span> computer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">NetWire</span> netwire<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NetWire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Adapter</span> adapter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               computer<span class="token punctuation">.</span><span class="token function">net</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>适配器：</p><p>1、继承—-类适配器</p><p>2、组合—-对象适配器</p><p>修改适配器代码，采用对象适配器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//具体实现，</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span>  <span class="token keyword">implements</span> <span class="token class-name">NetUSB</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">NetWire</span> netWire<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token class-name">NetWire</span> netwire<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>netwire<span class="token operator">=</span>netwire<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        netwire<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">net</span><span class="token punctuation">(</span><span class="token class-name">NetUSB</span> adapter<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        adapter<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//电脑，适配器，网线</span>        <span class="token class-name">Computer</span> computer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">NetWire</span> netwire<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NetWire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Adapter</span> adapter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span>netwire<span class="token punctuation">)</span><span class="token punctuation">;</span>               computer<span class="token punctuation">.</span><span class="token function">net</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="人员管理系统案例"><a href="#人员管理系统案例" class="headerlink" title="人员管理系统案例"></a>人员管理系统案例</h3><p>本公司有一套人员信息管理，外包公司有一套人员信息管理系统。现在两家公司的系统有些区别，我们可以采用适配器模式来进行兼容</p><p>1、本公司的人员公里信息类图<br><img src="/images/internet/design/struct/1-2.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/7 8:33 * 用户信息接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserInfo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHomeAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOfficeTelNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getJobPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHomeTelNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMobilePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/7 8:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span> <span class="token keyword">implements</span> <span class="token class-name">IUserInfo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名是......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHomeAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"家庭地址是。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOfficeTelNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"办公室电话。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getJobPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工职位。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHomeTelNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"家庭电话。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMobilePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移动电话。。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>2、外包公司人员信息类图<br><img src="/images/internet/design/struct/1-3.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/7 8:41 * 外包公司人员信息接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IOuterUser</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">getUserBaseInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">getUserOfficeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span>  <span class="token function">getUserHomeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/7 8:42 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterUser</span> <span class="token keyword">implements</span> <span class="token class-name">IOuterUser</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 员工基本信息     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">getUserBaseInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> baseInfoMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        baseInfoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span><span class="token string">"这个员工的姓名是混世魔王。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        baseInfoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mobileNumber"</span><span class="token punctuation">,</span><span class="token string">"这个员工的电话是。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> baseInfoMap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 员工家庭信息     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">getUserOfficeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> homeInfo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"homeTelNumber"</span><span class="token punctuation">,</span><span class="token string">"员工的家庭电话。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"homeAddress"</span><span class="token punctuation">,</span><span class="token string">"员工的家庭地址....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> homeInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 员工工作信息     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">getUserHomeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> officeInfo <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        officeInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jobPositon"</span><span class="token punctuation">,</span><span class="token string">"这个人的职位是。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        officeInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"officeTelNumber"</span><span class="token punctuation">,</span><span class="token string">"员工的办公电话是。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> officeInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>3、采用适配器模式</p><p>这样两套系统就可以兼容了<br><img src="/images/internet/design/struct/1-4.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/7 8:49 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterUserInfo</span> <span class="token keyword">extends</span> <span class="token class-name">OuterUser</span> <span class="token keyword">implements</span> <span class="token class-name">IUserInfo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> baseInfo <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getUserBaseInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> homeInfo <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getUserHomeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> officeInfo <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getUserOfficeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> userName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHomeAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> homeAddress <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>homeInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"homeAddress"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>homeAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> homeAddress<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOfficeTelNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> officeTelNumber <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>officeInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"officeTelNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>officeTelNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> officeTelNumber<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getJobPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> jobPosition <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>officeInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jobPosition"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jobPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jobPosition<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHomeTelNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> homeTelNumber <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>homeInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"homeTelNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>homeTelNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> homeTelNumber<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMobilePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> mobileNumber <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"mobileNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mobileNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mobileNumber<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>优点：</p><p>一个对象适配器可以把多个不同的适配者适配到同一个目标</p><p>可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏替换原则”，适配者的子类也可以通过适配器进行适配</p><p>缺点：</p><p>对于Java、C#等不支持多重累继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者</p><p>在Java、C#等语言中，类适配器模式中的目标抽象类只能为借口，不能为类，其使用具有一定的局限性</p><p>适用场景</p><p>系统需要使用一些现有的类，而这些类的接口不符合系统的需要，甚至没有者需类的源代码</p><p>想创建一个重复使用的类，用于一些彼此之间没有太他关联的一些类，包括一些可能在将来引进的类一起工作</p>]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 设计模式 </category>
          
          <category> 结构型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 适配器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器模式</title>
      <link href="/p/9bd93306.html"/>
      <url>/p/9bd93306.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 设计模式 </category>
          
          <category> 结构型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装饰器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/p/9b7d6e62.html"/>
      <url>/p/9b7d6e62.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>抽象工厂模式，属于创建型设计模式的一种</p><h2 id="什么是抽象工厂模式"><a href="#什么是抽象工厂模式" class="headerlink" title="什么是抽象工厂模式"></a>什么是抽象工厂模式</h2><p>定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口</p><p>适用场景：</p><ul><li>客户端不依赖于产品类实例如何被创建，实现等细节</li><li>强调一系列相关的产品对象一起使用创建对象需要的大量重复代码</li><li>提供一个产品类的库，所有的产品以同样的接口出现，从而使得客户端不依赖于具体实现</li></ul><p>优点：</p><ul><li>具体产品在应用层代码隔离，无需关心创建细节</li><li>将一个系列的产品统一到一起创建</li></ul><p>缺点：</p><ul><li>规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难</li><li>增加了系统抽象性的理解难度</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//手机接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IphoneProduct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">callup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sengSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//路由器接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRouteProduct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">openWifi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//小米手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiPhone</span> <span class="token keyword">implements</span> <span class="token class-name">IphoneProduct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开启小米手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭小米手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calldown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米手机发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//华为手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaWeiPhone</span> <span class="token keyword">implements</span> <span class="token class-name">IphoneProduct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开启华为手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭华为手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calldown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"华为手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"华为手机发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//小米路由器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiRouter</span> <span class="token keyword">implements</span> <span class="token class-name">IRouteProduct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"启动小米路由器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭小米路由器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openWifi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开小米wifi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米设置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//华为路由器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaWeiRouter</span> <span class="token keyword">implements</span> <span class="token class-name">IRouteProduct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"启动华为路由器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭华为路由器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openWifi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开华为wifi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"华为设置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//抽象工厂</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AbsProductFactory</span><span class="token punctuation">&#123;</span>    <span class="token class-name">IphoneProduct</span> <span class="token function">iphoneProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IRouteProduct</span> <span class="token function">routeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//华为工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaWeiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbsProductFactory</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">IphoneProduct</span> <span class="token function">iphoneProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HuaWeiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">IRouteProduct</span> <span class="token function">routeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HuaweiRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//小米工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbsProductFactory</span><span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token class-name">IphoneProduct</span> <span class="token function">iphoneProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">IRouteProduct</span> <span class="token function">routeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============小米系列======================"</span><span class="token punctuation">)</span>        <span class="token class-name">XiaomiFactory</span> xiaomiFactory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XiaomiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IphoneProduct</span> iphoneProduct<span class="token operator">=</span>xiaomiFactory<span class="token punctuation">.</span><span class="token function">iphoneProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iphoneProduct<span class="token punctuation">.</span><span class="token function">callup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iphoneProduct<span class="token punctuation">.</span><span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">IRouteProduct</span> iRouteProduct<span class="token operator">=</span>xiaomiFactory<span class="token punctuation">.</span><span class="token function">routeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iRouteProduct<span class="token punctuation">.</span><span class="token function">openWifi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是抽象工厂模式的相关内容。</p>]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 设计模式 </category>
          
          <category> 创建型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抽象工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器输入URL后按下回车会发生什么</title>
      <link href="/p/48e51b25.html"/>
      <url>/p/48e51b25.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网络在计算机这个行业是非常重要的，虽然相关的知识点比较偏理论化一点。但是掌握之后，对于自己技术的深度和广度肯定是有帮助的。</p><h2 id="浏览器发送请求步骤"><a href="#浏览器发送请求步骤" class="headerlink" title="浏览器发送请求步骤"></a>浏览器发送请求步骤</h2><h3 id="1、生成HTTP请求消息"><a href="#1、生成HTTP请求消息" class="headerlink" title="1、生成HTTP请求消息"></a>1、生成HTTP请求消息</h3><p>在介绍之前，我们先来说说网址，也称之为网址。通常我们见到的网址都是以http或者https开头的。但是除此之外还有一些其他文字开头的网址。例如”ftp:”，”file:”，”mailto:”等等。</p><p>这些URL开头的文字表示浏览器应当使用的访问方法。比如说访问Web服务器就应该使用HTTP协议，访问FTP服务器时则应该使用FTP协议。</p><p>当我们在浏览器输入URL后。浏览器第一步要做的就是对URL进行解析。解析完成之后，浏览器就知道自己访问的目标在哪，自己要干些啥。</p><p>第二步，生成HTTP请求消息，主要是一些头部信息，版本号，请求体之类的信息等等。这个我们打开浏览器的开发者工具，就能看到一些相关的http请求信息。它需要满足相关的格式。</p><h3 id="2、向DNS服务器查询Web服务器的IP地址"><a href="#2、向DNS服务器查询Web服务器的IP地址" class="headerlink" title="2、向DNS服务器查询Web服务器的IP地址"></a>2、向DNS服务器查询Web服务器的IP地址</h3><p>生成HTTP请求消息之后，我们需要委托操作系统将消息发送给Web服务器，浏览器本省并不具备将消息发送到网络的功能。那么在我们执行这一步的时候，我们需要先知道URL对应服务器的IP地址。那么如何查询IP地址呢。这里就需要DNS服务器了。</p><p>DNS服务器会从域名与IP地址的对照表中查找相应的记录，并返回IP地址。但是现在我们如何找到需要访问的Web服务器归那一台DNS管呢？这里涉及到了一个广播通信。不做赘述。</p><h3 id="3、委托协议栈发送消息"><a href="#3、委托协议栈发送消息" class="headerlink" title="3、委托协议栈发送消息"></a>3、委托协议栈发送消息</h3><p>知道了IP地址，我们就可以委托操作系统内部的协议栈向这个目标的IP地址发送信息了。</p><p>向操作系统内部的协议栈发出委托时，需要按照指定的顺序来调用Socket库中的程序组件。使用Socket库来收发数据就像在两台计算机之间建立了管道。数据沿着管道流动。我们将手法数据的操作大致可以分为4个阶段。<br>（1）创建套接字（创建套接字阶段）<br>（2）将管道链接到服务器的套接字上（连接阶段）<br>（3）收发数据（通信阶段）<br>（4）断开管道并删除套接字（断开阶段）</p><h3 id="4、服务器接收请求消息"><a href="#4、服务器接收请求消息" class="headerlink" title="4、服务器接收请求消息"></a>4、服务器接收请求消息</h3><p>服务器接收到浏览器发送过来的请求报文之后，会按照HTTP协议将请求报文解析出来。然后将拿到的请求报文中的请求信息做相应的业务处理。处理完毕后，服务器将将要发送给客户端的数据按照HTTP协议包装成响应报文。通过Socket发送给浏览器</p><h3 id="5、浏览器接收报文"><a href="#5、浏览器接收报文" class="headerlink" title="5、浏览器接收报文"></a>5、浏览器接收报文</h3><p>浏览器接收到服务器发送给自己的报文数据之后，解析渲染页面。流程图如下：<br><img src="/images/internet/network/1-1.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们在浏览器输入一行URL，按下回车。这么一个简单的动作。背后是一系列非常巧妙的设计。弄懂这些知识点，将来在面试被问到的时候也会游刃有余的。</p>]]></content>
      
      
      <categories>
          
          <category> 互联网知识 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList讲解</title>
      <link href="/p/864f84b3.html"/>
      <url>/p/864f84b3.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>ArrayList可以说是我们日常开发中使用的最多的集合类。也叫动态数组。使用起来特别方便，当我们创建了一个ArrayList之后，往ArrayList存放元素不需要开发人员去实现扩容，ArrayList内部支持自动扩容</p><h2 id="二、ArrayList简介"><a href="#二、ArrayList简介" class="headerlink" title="二、ArrayList简介"></a>二、ArrayList简介</h2><p>ArrayList是Java集合框架中的一个重要的类，它继承于AbstractList，实现了List接口，是一个长度可变的集合，提供了增删改查的功能。集合中允许null的存在。ArrayList类还是实现了RandomAccess接口，可以对元素进行快速访问。实现了Serializable接口，说明ArrayList可以被序列化，还有Cloneable接口，可以被复制。和Vector不同的是，ArrayList不是线程安全的。</p><p><em>ArrayList特性:</em><br>1.允许插入的元素重复<br>2.插入的元素是有序的<br>3.动态扩容<br>4.非线程安全，异步<br>5.基于动态数组的数据结构<br>6.擅长随机访问(get set)</p><h2 id="三、ArrayList底层数据结构"><a href="#三、ArrayList底层数据结构" class="headerlink" title="三、ArrayList底层数据结构"></a>三、ArrayList底层数据结构</h2><p>ArrayList就是动态数组，是List接口的可调整大小的数组实现；除了实现List接口之外，该类还提供了一些方法来操纵内部使用的存储列表的数组大小。它的主要底层实现是数组Object[] elementData。</p><p>数组的特点大家都知道，遍历查询速度快——数组在内存是连续空间，可以根据地址+索引的方式快速获取对应位置上的元素。但是它的增删速度慢——每次删除元素，都需要更改数组长度、拷贝以及移动元素位置。</p><p><img src="/images/java/javacollection/1-1.png"></p><p>基于IDEA生成的类结构图，也能够比较直观的看到 ArrayList 继承自 AbstractList ，实现了 List 接口。底层基于数组实现容量大小动态变化。允许 null 的存在。同时还实现了 RandomAccess、Cloneable、Serializable 接口，所以ArrayList 是支持快速访问、复制、序列化的。</p><h2 id="四、ArrayList构造方法"><a href="#四、ArrayList构造方法" class="headerlink" title="四、ArrayList构造方法"></a>四、ArrayList构造方法</h2><h3 id="4-1-无参数构造方法"><a href="#4-1-无参数构造方法" class="headerlink" title="4.1 无参数构造方法"></a>4.1 无参数构造方法</h3><p>无参构造方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Constructs an empty list with an initial capacity of ten. */</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>其中elementData和 DEFAULTCAPACITY_EMPTY_ELEMENTDATA</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Shared empty array instance used for default sized empty instances. We * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when * first element is added. */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * The array buffer into which the elements of the ArrayList are stored. * The capacity of the ArrayList is the length of this array buffer. Any * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA * will be expanded to DEFAULT_CAPACITY when the first element is added. */</span><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment">// non-private to simplify nested class access</span></code></pre><p>我们可以看到，调用无参数构造方法，默认创建的其实是一个空数组。那么是在什么时候ArrayList数组赋值长度的呢</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * Appends the specified element to the end of this list.    *    * @param e element to be appended to this list    * @return &lt;tt>true&lt;/tt> (as specified by &#123;@link Collection#add&#125;)    */</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>       elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       modCount<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token comment">// overflow-conscious code</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>           <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>       <span class="token comment">/**    * Increases the capacity to ensure that it can hold at least the    * number of elements specified by the minimum capacity argument.    * 扩容    * @param minCapacity the desired minimum capacity    */</span>   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// overflow-conscious code</span>       <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>           newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>           newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// minCapacity is usually close to size, so this is a win:</span>       elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><p>这一遍源码看下来是非常直观的。调用默认的构造方法，创建的是一个空数组。当往空数组里add元素的时候，会触发一次扩容，容量为系统设置的默认值10。</p><h3 id="4-2-参数为指定初始化容量的构造方法"><a href="#4-2-参数为指定初始化容量的构造方法" class="headerlink" title="4.2 参数为指定初始化容量的构造方法"></a>4.2 参数为指定初始化容量的构造方法</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * Constructs an empty list with the specified initial capacity.     *     * @param  initialCapacity  the initial capacity of the list     * @throws IllegalArgumentException if the specified initial capacity     *         is negative     */</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>调用指定大小容量的构造方法，这个就比较简单了。直接创建一个指定容量大小的数组。<br>参数大于0，elementData初始化为initialCapacity大小的数组；参数等于0，elementData初始化为空数组；参数小于0，抛出异常；</p><h3 id="4-3-参数为Collection类型的构造方法"><a href="#4-3-参数为Collection类型的构造方法" class="headerlink" title="4.3 参数为Collection类型的构造方法"></a>4.3 参数为Collection类型的构造方法</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * Constructs a list containing the elements of the specified    * collection, in the order they are returned by the collection's    * iterator.    *    * @param c the collection whose elements are to be placed into this list    * @throws NullPointerException if the specified collection is null    */</span>   <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>               elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// replace with empty array.</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre><p>可以看到ArrayList底层，先将Collection的入参转换成为了一个数组。然后将数组赋值给elemtData</p><h2 id="五、ArrayList四种遍历方式"><a href="#五、ArrayList四种遍历方式" class="headerlink" title="五、ArrayList四种遍历方式"></a>五、ArrayList四种遍历方式</h2><p>1  直接打印输出，因为在父类AbstractCollection中重写了toString()方法<br>2 for循环遍历数组中的元素<br>3 for each循环遍历数组中的元素<br>4 Iterator迭代器循环遍历数组中的元素</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//无参构造，在第一次add元素时给初始容量大小是10，扩容按1.5倍扩容</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方式一：直接遍历：在AbstractCollection中重写了toString方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//方式二：for循环遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//方式三：for each遍历</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> x <span class="token operator">:</span> arrayList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//方式四：迭代器的遍历</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="六、ArrayList常见面试题"><a href="#六、ArrayList常见面试题" class="headerlink" title="六、ArrayList常见面试题"></a>六、ArrayList常见面试题</h2><h3 id="6-1-ArrayList如何扩容"><a href="#6-1-ArrayList如何扩容" class="headerlink" title="6.1 ArrayList如何扩容"></a>6.1 ArrayList如何扩容</h3><p><img src="/images/java/javacollection/1-2.png"></p><p>1、默认扩容1.5倍<br>2、如果是调用无参构造方法，第一次触发扩容是直接初始容量为10</p><h3 id="6-2-ArrayList频繁扩容导致性能下降，如何处理？"><a href="#6-2-ArrayList频繁扩容导致性能下降，如何处理？" class="headerlink" title="6.2 ArrayList频繁扩容导致性能下降，如何处理？"></a>6.2 ArrayList频繁扩容导致性能下降，如何处理？</h3><p>ArrayList频繁扩容说明我们往ArrayList里面写入的操作比较频繁。可以大致估算一下会有多少数据，在创建数组的时候给一个初始容量即可</p><h3 id="6-3-ArrayList和LinkedList区别"><a href="#6-3-ArrayList和LinkedList区别" class="headerlink" title="6.3 ArrayList和LinkedList区别"></a>6.3 ArrayList和LinkedList区别</h3><p>1.底层数据结构：ArrayList底层使用的是数组；LinkedList底层使用的是双向链表；</p><p>2.插入和删除元素操作：ArrayList采用的是数组存储，所以插入和删除元素是跟元素的位置有关系。LinkedList采用的是链表存储，删除元素是不受元素位置影响的；如果是要在指定位置i插入和删除的话（（add(int index，E element））时间复杂度近似为O(n)，因为需要先移动再插入。</p><p>3.线程不安全：ArrayList和LinkedList都是不同步的，也就是说都是线程不安全的。</p><p>4.接口实现：ArrayList实现了RandomAccess可以支持随机元素访问，而LinkedList实现了Deque可以当做队列使用</p><p>5.内存空间占用情况：ArrayList的空间占用主要体现在list列表的末尾会有一定的容量空间，它的优势在于内存的连续性，CPU的内部缓存结构会缓存连续的内存片段，可以大幅度降低内存的性能开销，提高效率；LinkedList的空间占用体现在每一个元素都需要消耗空间内存，要存放前驱后继等数据。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java如何调用第三方接口</title>
      <link href="/p/1779dfe2.html"/>
      <url>/p/1779dfe2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们实际的开发的过程中，有时候需要去调用第三方的接口，像现在的各大电商平台，外卖平台，调用最多的不就是微信支付和支付宝支付的接口嘛。今天我们写几个简单的案例，来演示一下如何调用第三方的接口</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在调用第三方接口的时候，我们需要先沟通好，我们传递的参数是什么样子的，返回的数据又是什么格式的，这样才能方便我们来进行对接。<br>我们这里来模拟一下第三方的接口。虽然现在网络上有很多开放的接口供我们使用，但这些接口都是别人已经写好了的，你没有办法自己去定义。我们来借助于fastMock平台来帮助我们制作一个远程的接口。</p><p>fastMock：<br>这里我们已经编写好了几个接口，来供我们测试。大家也可以自己定义。使用这个fastMock的工具的一个缺陷是，它只能模拟返回，无法对你传输过来的参数进行处理。<br><img src="/images/java/javahigh/1-1.png"></p><h2 id="调用第三方接口的几种方式"><a href="#调用第三方接口的几种方式" class="headerlink" title="调用第三方接口的几种方式"></a>调用第三方接口的几种方式</h2><h3 id="使用JDK自带的网络类Java-net-HttpURLConnection"><a href="#使用JDK自带的网络类Java-net-HttpURLConnection" class="headerlink" title="使用JDK自带的网络类Java.net.HttpURLConnection"></a>使用JDK自带的网络类Java.net.HttpURLConnection</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>http</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">MalformedURLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpUrlConnectionToInterface</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 以post或get方式调用对方接口方法，     *     * @param pathUrl     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doPostOrGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> pathUrl<span class="token punctuation">,</span> <span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OutputStreamWriter</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>pathUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打开和url之间的连接</span>            <span class="token class-name">HttpURLConnection</span> conn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//请求方式</span>            conn<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//conn.setRequestMethod("GET");</span>            <span class="token comment">//设置通用的请求属性</span>            conn<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">,</span> <span class="token string">"*/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token string">"Keep-Alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//DoOutput设置是否向httpUrlConnection输出，DoInput设置是否从httpUrlConnection读入，此外发送post请求必须设置这两个</span>            conn<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setDoInput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * 下面的三句代码，就是调用第三方http接口             */</span>            <span class="token comment">//获取URLConnection对象对应的输出流</span>            out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//发送请求参数即数据</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//flush输出流的缓冲</span>            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * 下面的代码相当于，获取调用第三方http接口后返回的结果             */</span>            <span class="token comment">//获取URLConnection对象对应的输入流</span>            <span class="token class-name">InputStream</span> is <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//构造一个字符流缓存</span>            br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result <span class="token operator">+=</span> str<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关闭流</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//断开连接，disconnect是在底层tcp socket链接空闲时才切断，如果正在被其他线程使用就不切断。</span>            conn<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果说你要传递数据，需要传输的是json字符串</span>       <span class="token function">doPostOrGet</span><span class="token punctuation">(</span><span class="token string">"https://www.fastmock.site/mock/1e6fcc29e8aaf6729435622f97be4053/sc01/auth-service/login"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="使用apache-common封装的HttpClient"><a href="#使用apache-common封装的HttpClient" class="headerlink" title="使用apache-common封装的HttpClient"></a>使用apache-common封装的HttpClient</h2><p>首先在我们的pom.xml中导入下面的依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.36<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>http</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span>methods<span class="token punctuation">.</span></span><span class="token class-name">GetMethod</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span>methods<span class="token punctuation">.</span></span><span class="token class-name">PostMethod</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">HttpMethodParams</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpClientToInterface</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * httpClient的get请求方式     * 使用GetMethod来访问一个URL对应的网页实现步骤：     * 1.生成一个HttpClient对象并设置相应的参数；     * 2.生成一个GetMethod对象并设置响应的参数；     * 3.用HttpClient生成的对象来执行GetMethod生成的Get方法；     * 4.处理响应状态码；     * 5.若响应正常，处理HTTP响应内容；     * 6.释放连接。     * @param url     * @param charset     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> charset<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 1.生成HttpClient对象并设置参数         */</span>        <span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置Http连接超时为5秒</span>        httpClient<span class="token punctuation">.</span><span class="token function">getHttpConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setConnectionTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 2.生成GetMethod对象并设置参数         */</span>        <span class="token class-name">GetMethod</span> getMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetMethod</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置get请求超时为5秒</span>        getMethod<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token class-name">HttpMethodParams</span><span class="token punctuation">.</span>SO_TIMEOUT<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置请求重试处理，用的是默认的重试处理：请求三次</span>        getMethod<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token class-name">HttpMethodParams</span><span class="token punctuation">.</span>RETRY_HANDLER<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultHttpMethodRetryHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> response <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 3.执行HTTP GET 请求         */</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> statusCode <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">executeMethod</span><span class="token punctuation">(</span>getMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * 4.判断访问的状态码             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">!=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>SC_OK<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求出错："</span> <span class="token operator">+</span> getMethod<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">/**             * 5.处理HTTP响应内容             */</span>            <span class="token comment">//HTTP响应头部信息，这里简单打印</span>            <span class="token class-name">Header</span><span class="token punctuation">[</span><span class="token punctuation">]</span> headers <span class="token operator">=</span> getMethod<span class="token punctuation">.</span><span class="token function">getResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Header</span> h<span class="token operator">:</span> headers<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---------------"</span> <span class="token operator">+</span> h<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//读取HTTP响应内容，这里简单打印网页内容</span>            <span class="token comment">//读取为字节数组</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> responseBody <span class="token operator">=</span> getMethod<span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------response:"</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//读取为InputStream，在网页内容数据量大时候推荐使用</span>            <span class="token comment">//InputStream response = getMethod.getResponseBodyAsStream();</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HttpException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//发生致命的异常，可能是协议不对或者返回的内容有问题</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请检查输入的URL!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//发生网络异常</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发生网络异常!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/**             * 6.释放连接             */</span>            getMethod<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * post请求     * @param url     * @param json     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">JSONObject</span> json<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PostMethod</span> postMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PostMethod</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        postMethod<span class="token punctuation">.</span><span class="token function">addRequestHeader</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">,</span> <span class="token string">"*/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        postMethod<span class="token punctuation">.</span><span class="token function">addRequestHeader</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token string">"Keep-Alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置json格式传送</span>        postMethod<span class="token punctuation">.</span><span class="token function">addRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//必须设置下面这个Header</span>        postMethod<span class="token punctuation">.</span><span class="token function">addRequestHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加请求参数</span>        <span class="token comment">//postMethod.addParameter("commentId", json.getString("commentId"));</span>               <span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> code <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">executeMethod</span><span class="token punctuation">(</span>postMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">=</span> postMethod<span class="token punctuation">.</span><span class="token function">getResponseBodyAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"commentId"</span><span class="token punctuation">,</span> <span class="token string">"13026194071"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token string">"https://www.fastmock.site/mock/1e6fcc29e8aaf6729435622f97be4053/sc01/auth-service/login"</span><span class="token punctuation">,</span> jsonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>以上只是一些简单的测试代码，大家在使用的时候还需要进行微调。</p><h2 id="使用ClosebleHttpClient"><a href="#使用ClosebleHttpClient" class="headerlink" title="使用ClosebleHttpClient"></a>使用ClosebleHttpClient</h2><p>添加如下依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.28<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>http</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">NameValuePair</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">UrlEncodedFormEntity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span></span><span class="token class-name">CloseableHttpResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span></span><span class="token class-name">HttpGet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span></span><span class="token class-name">HttpPost</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">URIBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">ContentType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">StringEntity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">CloseableHttpClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">HttpClients</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">BasicNameValuePair</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">EntityUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URI<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloseableHttpClientToInterface</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 带参数的get请求     * @param url     * @param param     * @return String     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建Httpclient对象</span>        <span class="token class-name">CloseableHttpClient</span> httpclient <span class="token operator">=</span> <span class="token class-name">HttpClients</span><span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> resultString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">CloseableHttpResponse</span> response <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 创建uri</span>            <span class="token class-name">URIBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URIBuilder</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> param<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    builder<span class="token punctuation">.</span><span class="token function">addParameter</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> param<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">URI</span> uri <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建http GET请求</span>            <span class="token class-name">HttpGet</span> httpGet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执行请求</span>            response <span class="token operator">=</span> httpclient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpGet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 判断返回状态是否为200</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                resultString <span class="token operator">=</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                httpclient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> resultString<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 不带参数的get请求     * @param url     * @return String     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">doGet</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 带参数的post请求     * @param url     * @param param     * @return String     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建Httpclient对象</span>        <span class="token class-name">CloseableHttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClients</span><span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CloseableHttpResponse</span> response <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> resultString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 创建Http Post请求</span>            <span class="token class-name">HttpPost</span> httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建参数列表</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameValuePair</span><span class="token punctuation">></span></span> paramList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> param<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    paramList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicNameValuePair</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> param<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 模拟表单</span>                <span class="token class-name">UrlEncodedFormEntity</span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlEncodedFormEntity</span><span class="token punctuation">(</span>paramList<span class="token punctuation">)</span><span class="token punctuation">;</span>                httpPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 执行http请求</span>            response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpPost<span class="token punctuation">)</span><span class="token punctuation">;</span>            resultString <span class="token operator">=</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> resultString<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 不带参数的post请求     * @param url     * @return String     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">doPost</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 传送json类型的post请求     * @param url     * @param json     * @return String     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">doPostJson</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> json<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建Httpclient对象</span>        <span class="token class-name">CloseableHttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClients</span><span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CloseableHttpResponse</span> response <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> resultString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 创建Http Post请求</span>            <span class="token class-name">HttpPost</span> httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建请求内容</span>            <span class="token class-name">StringEntity</span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">ContentType</span><span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>            httpPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执行http请求</span>            response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpPost<span class="token punctuation">)</span><span class="token punctuation">;</span>            resultString <span class="token operator">=</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> resultString<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token string">"https://www.fastmock.site/mock/1e6fcc29e8aaf6729435622f97be4053/sc01/auth-service/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是几种调用第三方接口的方法，具体在使用的时候还是需要根据实际情况进行微调的。不过最常用的还是使用HttpClient和RestTemplate这两种方式。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK动态代理和CGLIB讲解</title>
      <link href="/p/dcb96bd1.html"/>
      <url>/p/dcb96bd1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>静态代理也好，动态代理也罢。都可以归纳为设计模式中的代理模式。静态代理和动态代理是代理模式的两种不同实现。目前在JAVA的各大框架之中，动态代理在底层被频繁使用，因此我们有必要学习了解一下动态代理</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>在学习JDK动态代理和CGLIB代理之前，我们先简单来了解一下设计模式中的代理模式。</p><p>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。<br>Java中的代理按照代理类生成时机不同又分为静态代理和动态代理。静态代理代理类在编译期就生成，而动态代理代理类则是在Java运行时动态生成。动态代理又有JDK代理和CGLib代理两种。</p><p><img src="/images/java/javahigh/2-1.png"></p><p>代理（Proxy）模式分为三种角色：</p><ul><li>抽象主题（Subject）类： 通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li><li>真实主题（Real Subject）类： 实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</li><li>代理（Proxy）类 ： 提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li></ul><p>现在我们给定一个需求场景。编写一个UserService接口，另外再编写一个UserServiceImpl的类实现UserService接口。代码示例如下:<br>UserService接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:28 * @Description: 编写一个UserService接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>UserServiceImpl</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:28 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用UserService的查询方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用UserService的更新方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>需求场景:现在要实现一个功能，在UserServiceImpl类调用select()和update()方法时，分别打印出方法执行开始的时间以及方法执行结束的时间。这个功能要怎么实现？思考一下。</p><h2 id="不使用任何代理"><a href="#不使用任何代理" class="headerlink" title="不使用任何代理"></a>不使用任何代理</h2><p>如果不使用任务代理。我们这个功能怎么实现。那就只能修改UserServiceImpl类中的select()方法和update()方法的逻辑了。如下:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>noproxy</span><span class="token punctuation">;</span><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:28 * @Description: 编写一个UserService接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>noproxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:28 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log start time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用UserService的查询方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log end time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log start time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用UserService的更新方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log end time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>noproxy</span><span class="token punctuation">;</span><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:38 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserService</span> service <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/images/java/javahigh/2-2.png"><br>我们发现，功能确实是实现了，但是我们修改了原本的类UserServiceImpl这个类。如果不修改这个类，我们能不能实现这个功能。答案是可以的，这个时候我们就需要用到代理了。先来看看静态代理</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>我们来看一下静态代理的实现方式</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>staticproxy</span><span class="token punctuation">;</span><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:28 * @Description: 编写一个UserService接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>staticproxy</span><span class="token punctuation">;</span><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:28 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用UserService的查询方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用UserService的更新方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>staticproxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:32 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> target<span class="token punctuation">;</span> <span class="token comment">// 被代理的对象</span>    <span class="token keyword">public</span> <span class="token class-name">UserServiceProxy</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里才实际调用真实主题角色的方法</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里才实际调用真实主题角色的方法</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 在执行方法之前执行</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log start time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 在执行方法之后执行</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log end time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>staticproxy</span><span class="token punctuation">;</span><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:35 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserService</span> userServiceImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserService</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceProxy</span><span class="token punctuation">(</span>userServiceImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/images/java/javahigh/2-3.png"></p><p>使用静态代理的方式，我们手动编写了一个UserServiceProxy类。没有对原来的UserServiceImpl类进行修改。这是静态代理的优点。</p><p>当时我们发现：<br>1、当要代理多个对象的时候，我们是不是得创建多个代理类<br>2、当UserService接口中新增加了方法，我们的UserServiceImpl和UserServiceProxy类都需要修改</p><p>那么如何优化呢？肯定是得使用动态代理了</p><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>jdkproxy</span><span class="token punctuation">;</span><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:28 * @Description: 编写一个UserService接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>jdkproxy</span><span class="token punctuation">;</span><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:28 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用UserService的查询方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用UserService的更新方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>jdkproxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:40 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> target<span class="token punctuation">;</span>  <span class="token comment">// 被代理的对象，实际的方法执行者</span>    <span class="token keyword">public</span> <span class="token class-name">LogHandler</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用 target 的 method 方法</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token comment">// 返回方法的执行结果</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 调用invoke方法之前执行</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log start time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 调用invoke方法之后执行</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log end time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>jdkproxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span><span class="token punctuation">;</span><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:41 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1. 创建被代理的对象，UserService接口的实现类</span>        <span class="token class-name">UserServiceImpl</span> userServiceImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. 获取对应的 ClassLoader</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> userServiceImpl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. 获取所有接口的Class，这里的UserServiceImpl只实现了一个接口UserService，</span>        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> userServiceImpl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4. 创建一个将传给代理类的调用请求处理器，处理所有的代理对象上的方法调用</span>        <span class="token comment">//     这里创建的是一个自定义的日志处理器，须传入实际的执行对象 userServiceImpl</span>        <span class="token class-name">InvocationHandler</span> logHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogHandler</span><span class="token punctuation">(</span>userServiceImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*           5.根据上面提供的信息，创建代理对象 在这个过程中，               a.JDK会通过根据传入的参数信息动态地在内存中创建和.class 文件等同的字节码               b.然后根据相应的字节码转换成对应的class，               c.然后调用newInstance()创建代理实例         */</span>        <span class="token class-name">UserService</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> logHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用代理的方法</span>        proxy<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/images/java/javahigh/2-4.png"></p><p>使用JDK的动态代理，我们需要实现InvocationHandler接口。<br>InvocationHandler的主要作用是将方法调用与具体的实现解耦，使得在代理对象中可以灵活地处理方法调用。<br>这个接口只有一个方法，即invoke()方法，它负责处理对代理对象的方法调用（当代理实例调用方法时，方法调用被编码分派到InvocationHandler的invoke方法）<br>通过使用InvocationHandler，可以更加灵活地扩展程序的功能（例如在调用前后添加额外的逻辑、对调用参数进行校验等），而不需要修改原有的代码</p><p>创建动态代理对象，将目标对象和InvocationHandler传递给Proxy.newProxyInstance方法。<br>Proxy类是JDK提供的一个工具类，用于创建代理对象。它提供了一个静态方法newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)，用于创建代理对象。该方法需要三个参数：</p><ul><li>ClassLoader loader：指定代理对象的类加载器。</li><li>Class&lt;?&gt;[] interfaces：指定代理对象要实现的接口。</li><li>InvocationHandler h：指定实现了InvocationHandler接口的对象，用于处理方法调用。</li></ul><h2 id="CGLIB代理"><a href="#CGLIB代理" class="headerlink" title="CGLIB代理"></a>CGLIB代理</h2><p>JDK动态代理是通过重写被代理对象实现的接口中的方法来实现，而CGLIB是通过继承被代理对象来实现，和JDK动态代理需要实现指定接口一样，CGLIB也要求代理对象必须要实现MethodInterceptor接口，并重写其唯一的方法intercept。</p><p>CGLib采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。（利用ASM开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理）</p><p>注意：因为CGLIB是通过继承目标类来重写其方法来实现的，故而如果是final和private方法则无法被重写，也就是无法被代理。</p><p>使用CGLIB的动态代理，需要先引入cglib的jar包。maven依赖如下:</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- 添加 CGlib 依赖 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>cglibproxy</span><span class="token punctuation">;</span><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:28 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用UserService的查询方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用UserService的更新方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>cglibproxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodProxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:44 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogInterceptor</span>  <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 注意这里是调用 invokeSuper 而不是 invoke，否则死循环，methodProxy.invokesuper执行的是原始类的方法，method.invoke执行的是子类的方法</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log start time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log end time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi<span class="token punctuation">.</span>cglibproxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">Enhancer</span><span class="token punctuation">;</span><span class="token comment">/** * Created with IntelliJ IDEA. * * @Author: xuzhi * @Date: 2024/03/24/13:50 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LogInterceptor</span> logInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置超类，cglib是通过继承来实现的</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span>logInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserService</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span>enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建代理类</span>        proxy<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/images/java/javahigh/2-5.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单总结一下:<br>1、JDK实现动态代理是通过重写代理对象的接口来实现的。因此代理类如果没有实现接口是用不了JDK的动态代理的<br>2、CGLIB实现动态代理是通过继承代理对象来实现。代理类中被final或者private修饰的方式是不能被代理的</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String类中的contains方法介绍</title>
      <link href="/p/b8236a5d.html"/>
      <url>/p/b8236a5d.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在编写Java代码是时候，String类使我们必不可少的会用到的一个类。今天主要介绍以下它的contains方法，这个方法在使用的时候稍微不注意就会翻车。</p><h2 id="contains方法介绍"><a href="#contains方法介绍" class="headerlink" title="contains方法介绍"></a>contains方法介绍</h2><p>首先咱们说说这个方法是干嘛用的，就是判断一个字符串里是否包含另外一个字符串。如果包含则返回true，如果不包含则返回false。</p><p>我们可以先编写一个测试方法，来看看一下这个方法是如何使用的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"djgjljkg;ji;jgjgser"</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"gse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>返回结果是true。由于str这个字符串中包含了”gse”所以返回为true。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>我们来看一个案例，这个在开发中遇到的一个实际问题。我们需要编写一个方法，这个方法会对销售商编号为410,420的销售商进行校验。<br>我们先来看看最开始我是怎么写的。先定义一个常量，如果这个常量包含了410或者420就校验</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> AGENCYNO <span class="token operator">=</span> <span class="token string">"410,420"</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">valid_agency</span><span class="token punctuation">(</span><span class="token class-name">String</span> agencyNo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>AGENCYNO<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>agencyNo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//校验</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre><p>乍一看，没什么问题，仔细一看，问题太大了。如果这样写，我们传进来41,10,42,20,4,1,2等等都会被校验。虽然数据库里面没有销售商编号为以上这些数字的数据。但这就是一个隐患哪。我们的目的是只需要校验410和420这两个销售商就可以了。那我们该怎么做。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> AGENCYNO <span class="token operator">=</span> <span class="token string">",410,420,"</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">valid_agency</span><span class="token punctuation">(</span><span class="token class-name">String</span> agencyNo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>AGENCYNO<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>agencyNo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//校验</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre><p>这是改进之后的方法，我们对比一下，这样有什么好处。首先我们在常量的首尾各加了一个逗号，在调用contains方法的时候，我们也给传入的参数首尾拼接上逗号。这样处理之后，41,10,42,20,4,1,2等等这样的入参就不会对我们的校验产生误导。这样就实现了只会对410和420的销售商进行校验。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>同样的方法，有时候稍加修改，就感觉会变得非常的巧妙。例如像这种加逗号的处理方式。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程基础介绍</title>
      <link href="/p/ab39a621.html"/>
      <url>/p/ab39a621.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在了解多线程和并发之前，我们得先了解线程的基本概念，以及线程是如何创建的</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="什么是线程？什么是进程？什么是程序？什么是协程？"><a href="#什么是线程？什么是进程？什么是程序？什么是协程？" class="headerlink" title="什么是线程？什么是进程？什么是程序？什么是协程？"></a>什么是线程？什么是进程？什么是程序？什么是协程？</h3><p>程序：可以执行的文件，我们编译的源代码也是程序，例如window系统中的可执行文件，就是一个程序 .exe</p><p>线程：程序最小的执行单元，也可以说是一个程序的不同执行路径</p><p>进程：进程是正在运行的程序实例。在系统角度，程序仅占用磁盘空间，不占用内存等其他资源，而进程是占用内存和CPU 资源。更加官方的来说，进程是具有一定程序功能的关于某个数据集合的一次运行活动。它是操作系统执行的基本单元，在传统操作系统中，进程既是基本的分配单元，也是基本的执行单元。<br>一个进程往往包含多个线程，至少包含一个<br>java默认有两个线程。一个是main;另一个是GC</p><p>协程：</p><h3 id="什么是并行和并发"><a href="#什么是并行和并发" class="headerlink" title="什么是并行和并发"></a>什么是并行和并发</h3><p>并发：cpu单核，交替执行<br>并行：cpu多核。同时执行</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取电脑cpu核数量</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </code></pre><p>并发编程的本质：充分利用CPU资源</p><h2 id="Java中线程使用相关知识点"><a href="#Java中线程使用相关知识点" class="headerlink" title="Java中线程使用相关知识点"></a>Java中线程使用相关知识点</h2><h3 id="Java如何创建线程"><a href="#Java如何创建线程" class="headerlink" title="Java如何创建线程"></a>Java如何创建线程</h3><p>1、继承Thread类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/7 16:38 * 创建线程的方式一：继承Thread类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThread.run()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>2、实现Runnable接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/7 16:46 * 线程创建方式二：实现Runnable接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThread.run()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>3、实现Callable接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/7 16:50 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用call方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">4399</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: xuzhi * @date: 2020/12/7 16:51 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallableTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyCallable</span> myCallable<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span> futureTask<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>myCallable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>4、线程池创建</p><h3 id="run和start的方法区别"><a href="#run和start的方法区别" class="headerlink" title="run和start的方法区别"></a>run和start的方法区别</h3><p>创建线程一般都为继承Thread类或者实现Runnable接口后重写run方法。<br>那么我们调用run和start的区别是什么？<br>run方法只是简单的方法的一个调用<br>start才是开启线程</p><h3 id="join-、sleep、yield"><a href="#join-、sleep、yield" class="headerlink" title="join 、sleep、yield"></a>join 、sleep、yield</h3><h3 id="如何关闭线程"><a href="#如何关闭线程" class="headerlink" title="如何关闭线程"></a>如何关闭线程</h3><p>关闭线程，<br>没有关闭线程，让线程正常结束就算关闭<br>interrupt</p><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><pre class="language-java" data-language="java"><code class="language-java">NEW<span class="token punctuation">,</span>   <span class="token comment">//创建</span>RUNNABLE<span class="token punctuation">,</span>   <span class="token comment">//运行</span>BLOCKED<span class="token punctuation">,</span>   <span class="token comment">//阻塞</span>WAITING<span class="token punctuation">,</span>   <span class="token comment">//等待</span>TIMED_WAITING<span class="token punctuation">,</span>   <span class="token comment">//超时等待</span>TERMINATED<span class="token punctuation">;</span>   <span class="token comment">//终止</span></code></pre><ul><li>NEW：初始状态，线程被构建，但是还没有调用start方法</li><li>RUNNABLE：运行状态，Java线程把操作系统中的就绪和运行两种状态统一称为“运行中”</li><li>BLOCKED：阻塞状态，表示线程进入等待状态，也就是线程因为某种原因放弃了CPU使用权，阻塞分以下几种情况<ul><li>等待阻塞：运行的线程执行wait方法，jvm会把当前线程放到等待队列</li><li>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被其他线程占用了，那么jvm就会把当前的线程放入到锁池中</li><li>其他阻塞：运行的线程执行到Thread.sleep或者t.join方法，或者发出了I/O请求，JVM会把当前线程设置为阻塞状态，当sleep结束，join线程终止，io处理完毕则线程恢复</li></ul></li><li>TIME_WAITING：超时等待状态，超时以后自动返回</li><li>TERMINATED：终止状态，表示当前线程执行完毕</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是线程相关基础知识的简单介绍</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java泛型介绍</title>
      <link href="/p/7c446c3b.html"/>
      <url>/p/7c446c3b.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天编写一个工具类，想编写一个泛型方法，不料翻了车，编写后调用报错，后来才发现泛型方法需要使用<T>来进行标识，但是我一点印象都没有，所以就打算全面复习一下泛型，就写下这篇文章来记录一下。</p><h2 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h2><p>首先，泛型是什么呢？泛型指的是多种类型。举个例子吧，我们要编写一个求a，b两个数的平均数的方法，那我们怎么写，不使用泛型的话，我们至少要编写四个方法，毕竟a和b的类型不确定，可能是整型，或者double型等。这里就写伪代码了</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>&#123;   <span class="token comment">//求平均数 </span>&#125;<span class="token keyword">public</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span>&#123;    <span class="token comment">//求平均数 </span>&#125;<span class="token keyword">public</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span>&#123;    <span class="token comment">//求平均数 </span>&#125;<span class="token keyword">public</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>&#123;    <span class="token comment">//求平均数 </span>&#125;</code></pre><p>但是如果我们使用泛型的话，一个方法就解决了。这就是使用泛型的好处</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token punctuation">(</span>T a<span class="token punctuation">,</span>T b<span class="token punctuation">)</span>&#123;    <span class="token comment">//求平均数</span>&#125;</code></pre><h2 id="为什么要使用泛型"><a href="#为什么要使用泛型" class="headerlink" title="为什么要使用泛型"></a>为什么要使用泛型</h2><p>Java在JDK5版本之后引入了泛型，使用泛型程序设计意味着编写代码可以对多种不同类型的对象重用，这就是我们使用泛型最显著的一个好处。</p><pre class="language-sql" data-language="sql"><code class="language-sql">ArrayList files<span class="token operator">=</span>new ArrayList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String filename <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>files<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样取值的时候，我们必须进行强制类型转换。并且这样，我们可以向ArrayList中添加任何类的值</p><pre class="language-sql" data-language="sql"><code class="language-sql">files<span class="token punctuation">.</span><span class="token keyword">add</span><span class="token punctuation">(</span>new <span class="token keyword">File</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>对于上述这个增加File类的add，编译和运行都不会报错，但是呢，如果我们使用get来取值的时候强制转换成为String类型，那么就会报错。</p><p>泛型在这里提供了一个很好的解决方案，就是 <strong>类型参数</strong>。ArrayList类有一个类型参数来指示元素的类型： ArrayList<String> strings = new ArrayList<String>();这样不仅使得代码有更好的可读性，我们一看就知道这个ArrayList中存放的是String对象，并且使用get调用的时候也不用进行强制转换。<br>并且指定类型参数后，我们使用add方法往ArrayList里添加的时候，编译器会进行检查，防止你插入错误的类型对象，比如说往上面这个ArrayList里如果我们插入Integer类型，编译无法通过。</p><h2 id="定义简单的泛型类"><a href="#定义简单的泛型类" class="headerlink" title="定义简单的泛型类"></a>定义简单的泛型类</h2><p>泛型类就是有一个或者多个类型变量的类。我们现在来定义一个泛型类。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">T</span> first<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">T</span> second<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token class-name">T</span> first<span class="token punctuation">,</span> <span class="token class-name">T</span> second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> first<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirst</span><span class="token punctuation">(</span><span class="token class-name">T</span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSecond</span><span class="token punctuation">(</span><span class="token class-name">T</span> second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们在Pair类引入了一个类型变量T，用&lt;&gt;括起来，放在类名的后面。泛型类可以有多个类型变量。比如说我们也可以这样定义泛型类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">U</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>类型变量在整个类的定义中用于指定方法的返回类型以及字段和局部变量的类型。常见的类型变量使用大写字母来表示。一般来说，Java库里面使用变量E来表示集合的元素类型，K,V分别表示表的键和值的类型。T、U、S用于表示任意类型。但是实际上，其实用什么字母都是可以的。你用A,B也行。</p><p>泛型类其实定义的是一个类的模板，我们创建类的实例的时候可以自己定义这个类的类型。例如上面的Pair<T>类。我们创建的时候，就可以直接这样写。我们希望这个T是什么，就改成什么。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringPair<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integerPair<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>除了定义泛型类以外，我们还可以定义一个带有类型参数的方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayAlg</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上面这个泛型方法是在普通类中定义的，并不在泛型类中。泛型方法不一定非得要在泛型类中。但是有一点是非常重要的。就是编写泛型方法的时候，类型变量放在修饰符的后面，并在返回值的前面。也就是我们上面这个方法中的<T>。<br>很多人编写泛型方法的时候忘记写了这个<T>。所以编写出来的方法在使用的时候编译器会报错。显示类型不支持。</p><h2 id="类型变量的限定"><a href="#类型变量的限定" class="headerlink" title="类型变量的限定"></a>类型变量的限定</h2><p>有时候，类或方法需要对类型变量加以约束。举个例子来说，我们要计算一组数组中最小的元素。代码编写如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayAlg</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> a<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">T</span> smallest <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>smallest<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//这一行编译器会提示报错</span>                smallest<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> smallest<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们的T在这里表示的是任意类型，那么问题来了，你怎么就知道T拥有compateTo()方法呢<br>所以我们要对以上的代码进行一个小修改</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//...</span><span class="token punctuation">&#125;</span></code></pre><p>这里使用的关键字是extends。用不了implements。有人可能就会问了，Comparable不是一个接口吗？怎么就不用implements关键字了。这是因为我们的T表示的是限定类型的子类型。T和限定类型可以是类也可以是接口。选择extends的原因是它更接近于子类型的概念。</p><p>我们的类型变量可以有多个限定</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span> <span class="token operator">&amp;</span> <span class="token class-name">Serializable</span></code></pre><h2 id="泛型代码和虚拟机"><a href="#泛型代码和虚拟机" class="headerlink" title="泛型代码和虚拟机"></a>泛型代码和虚拟机</h2><p>在虚拟机中，是没有泛型类型对象的，所有的对象都属于普通类。</p><h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><p>无论我们何时定义一个泛型类型，都会自动提供一个相应的原始类型。这个原始类型的名字就是去掉类型参数后的泛型类型名称。类型变量会被擦除，并替换为其限定类型。例如我们上面编写的Pair<T>的原始类型如下。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuzhi</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> first<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> second<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token class-name">Object</span> first<span class="token punctuation">,</span> <span class="token class-name">Object</span> second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> first<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirst</span><span class="token punctuation">(</span><span class="token class-name">Object</span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSecond</span><span class="token punctuation">(</span><span class="token class-name">Object</span> second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>因为T是一个无类型的变量，所以直接用Object来替换。也就是说，我们在程序中使用泛型，是给程序员来看的，主要是在编译器这个层面。这个类加载到虚拟机之后，会将T替换成Object。这就是类型擦除。</p><h3 id="转换泛型表达式"><a href="#转换泛型表达式" class="headerlink" title="转换泛型表达式"></a>转换泛型表达式</h3><p>编写一个泛型调用方法的时候，如果擦除了返回类型，编译器会插入强制类型装换。例如下列语句的句序。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> buddies<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Employee</span> buddy <span class="token operator">=</span> buddies<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>getFirst类型擦除后的返回类型是Object。编译器自动插入转换到Employee的强制类型转换。也就说编译器会这个方法的调用转换成两条虚拟机指令。</p><ul><li>对原始方法Pair.getFirst的调用</li><li>将返回的Object类型强制转换成为Employee类型</li></ul><h2 id="限制与局限性"><a href="#限制与局限性" class="headerlink" title="限制与局限性"></a>限制与局限性</h2><p>使用泛型有一定的局限性，大多数的限制是由于类型擦除引起的。主要是以下几点：<br>1、不能使用基本类型实例化参数</p><p>使用泛型的时候，如果涉及到基本数据类型，我们需要用到它的包装类。不能直接使用int ,char,double等基本数据类型。</p><p>2、运行时类型查询只适用于原始数据类型</p><p>在Java中，我们有时会去判断对象的类型，会用到instanceof 这个方法。如果我们直接使用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">)</span></code></pre><p>编译器会报错。</p><p>3、不能创建参数化类型参数</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token punctuation">;</span></code></pre><p>以上语句在编译器层面也会报错。为什么？因为类型擦除后，我们String会被转换为Object。这个时候，你赋值，就会报一个数据存储异常</p><p>4、不能实例化类型变量</p><pre class="language-java" data-language="java"><code class="language-java">first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这就是一个非法的语句。</p><p>5、不能构建泛型数组</p><p>6、不能在静态字段或者静态方法中应用类型变量</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">T</span> singleInstance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">T</span> <span class="token function">getSingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建一个实例。。。</span>            <span class="token keyword">return</span>  singleInstance<span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="泛型类型的继承规则"><a href="#泛型类型的继承规则" class="headerlink" title="泛型类型的继承规则"></a>泛型类型的继承规则</h2><p>我们可以看到，Manager是Employee的子类。但是Pair<Manager>和Pair<Employee>两个类之间并没有什么关系。<br><img src="/images/java/javabase/1-1.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java中使用泛型一般是在集合中使用的比较多，也比较常见。写下这边博客帮助自己来回顾一下泛型的相关知识点。其实，关于泛型还有一些其他的知识点我在文章里没有讲述，后面用到了在查漏补缺吧。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM入门以及类加载机制</title>
      <link href="/p/93fe658.html"/>
      <url>/p/93fe658.html</url>
      
        <content type="html"><![CDATA[<h2 id="JVM简单介绍"><a href="#JVM简单介绍" class="headerlink" title="JVM简单介绍"></a>JVM简单介绍</h2><h3 id="JAVA语言介绍"><a href="#JAVA语言介绍" class="headerlink" title="JAVA语言介绍"></a>JAVA语言介绍</h3><p>在介绍JVM之前，我们先来说说Java这门语言。我相信大家在接触Java这门语言的时候，一定有听说过Java这门语言有很多的优点。<br>例如：<br>1、Java是一门纯面向对象的语言<br>2、平台无关性，一次编译，到处运行<br>3、提供了对Web的开发支持<br>4、支持多线程等等</p><p>那么Java这门语言的平台无关性是怎么实现的呢？其实就是依赖于JVM(Java虚拟机)。JVM针对于不同的操作系统有不同的实现。但遵循的都是同一套字节码规范。我们的Java程序编译成字节码文件后，就可以在不同的JVM上运行。借此来实现了Java语言的跨平台性。</p><h3 id="JDK、JRE、JVM关系"><a href="#JDK、JRE、JVM关系" class="headerlink" title="JDK、JRE、JVM关系"></a>JDK、JRE、JVM关系</h3><p><img src="/images/java/jvm/1-1.png" alt="JDK、JRE、JVM关系图"><br>JDK:Java开发工具包<br>JRE:Java运行环境<br>JVM:ava虚拟机</p><p>JDK&gt;JRE&gt;JVM</p><p>JDK包含了JRE所有的内容，然后还附带了一个开发工具。例如javac,java等等</p><p>我们编写了一个java程序后,Person.java类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> hobby<span class="token operator">=</span><span class="token string">"Programming"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person say..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> op1<span class="token punctuation">,</span><span class="token keyword">int</span> op2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> op1<span class="token operator">+</span>op2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>使用javac命令编译后，会生成一个Person.class文件。只有class文件才能够被JVM运行。<br><img src="/images/java/jvm/1-2.png" alt="类编译过程"></p><h3 id="类文件"><a href="#类文件" class="headerlink" title="类文件"></a>类文件</h3><p>JVM只能够运行class文件，那么这个class文件究竟是什么呢？<br>我们使用Nodepad++打开class文件，发现它是乱码的。这个时候我们可以是用Sublime Text这个编辑器来打开class文件，我们发现，.class文件打开是16进制文件。<br><img src="/images/java/jvm/1-3.png" alt="class文件"></p><p>了解一下class文件，那么我们有一个疑问，JVM是否可以运行别的语言？<br>答案当然是可以的，只要你符合JVM的字节码规范，都是可以运行的。这里简单介绍以下，JVM可以运行的语言有Java、kotlin、Scala、Clojure、Groovy、Jython<br>、JRuby、Ceylon、Eta、Haxe</p><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p>既然我们知道了JVM只能运行class文件，那么这个class文件是如何交给JVM的呢？这里就涉及到类加载了。</p><p>一个类从被加载到虚拟机内存中开始直到卸载出内存为止。它的整个生命周期将会经历加载、验证、准备、解析、初始化、使用、卸载七个阶段，其中验证、准备、解析三个部分统称为连接。<br><img src="/images/java/jvm/1-7.png" alt="类的生命周期"></p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>查找和导入class文件<br>(1)通过一个类的全限定名获取定义此类的二进制字节流<br>(2)将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构<br>(3)在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><strong>1、校验</strong><br>验证是连接阶段的第一步，这一阶段的目的是保证被加载类的正确性。保证这些信息被当作代码运行后不会危害虚拟机自身的安全。验证阶段大致上回完成下列四个阶段的检验工作：文件格式验证、元数据验证、字节码验证和符号引用验证。<br><em>1、文件格式验证</em></p><p>第一阶段要验证字节流是否符合Class文件格式的规范， 并且能被当前版本的虚拟机处理  </p><p>2、元数据验证*</p><p>第二阶段是对字节码描述的信息进行语义分析， 以保证其描述的信息符合《Java语言规范》 的要求  </p><p>3、字节码验证*</p><p>第三阶段是整个验证过程中最复杂的一个阶段， 主要目的是通过数据流分析和控制流分析， 确定程序语义是合法的、 符合逻辑的。 在第二阶段对元数据信息中的数据类型校验完毕以后， 这阶段就要对类的方法体（Class文件中的Code属性） 进行校验分析， 保证被校验类的方法在运行时不会做出危害虚拟机安全的行为  </p><p><em>4、符号引用验证</em></p><p>最后一个阶段的校验行为发生在虚拟机将符号引用转化为直接引用[3]的时候， 这个转化动作将在连接的第三阶段——解析阶段中发生。 符号引用验证可以看作是对类自身以外（常量池中的各种符号引用） 的各类信息进行匹配性校验， 通俗来说就是， 该类是否缺少或者被禁止访问它依赖的某些外部类、 方法、 字段等资源。 </p><p><strong>2、准备</strong><br>为类的静态变量分配内存，并将其初始化为默认值。</p><p>准备阶段是正式为类中定义的变量（即静态变量， 被static修饰的变量） 分配内存并设置类变量初始值的阶段， 从概念上讲， 这些变量所使用的内存都应当在方法区中进行分配， 但必须注意到方法区本身是一个逻辑上的区域， 在JDK 7及之前， HotSpot使用永久代来实现方法区时， 实现是完全符合这种逻辑概念的； 而在JDK 8及之后， 类变量则会随着Class对象一起存放在Java堆中， 这时候“类变量在方法区”就完全是一种对逻辑概念的表述  </p><p>关于准备阶段， 还有两个容易产生混淆的概念， 首先是这时候进行内存分配的仅包括类变量， 而不包括实例变量， 实例变量将会在对象实例化时随着对象一起分配在Java堆中。 其<br>次是这里所说的初始值“通常情况”下是数据类型的零值，</p><p>public static int value =123</p><p>变量value在准备阶段过后的初始值为0而不是123， 因为这时尚未开始执行任何Java方法， 而把value赋值为123的putstatic指令是程序被编译后， 存放于类构造器&lt;clinit&gt;()方法之中， 所以把value赋值为123的动作要到类的初始化阶段才会被执行   </p><p><strong>3、解析</strong><br>把类中的符号引用转换为直接引用</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>对类的静态变量，静态代码块执行初始化操作。<br>进行准备阶段时， 变量已经赋过一次系统要求的初始零值， 而在初始化阶段， 则会根据程序员通过程序编码制定的主观计划去初始化类变量和其他资源。</p><p><img src="/images/java/jvm/1-4.png" alt="类加载过程"></p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>在装载(Load)阶段，其中第(1)步:通过类的全限定名获取其定义的二进制字节流，需要借助类装载器完成，顾名思义，就是用来装载Class文件的。通过一个类的全限定名获取定义此类的二进制字节流。</p><p>类加载器虽然只用于实现类的加载动作， 但它在Java程序中起到的作用却远超类加载阶段。 对于任意一个类， 都必须由加载它的类加载器和这个类本身一起共同确立其在Java虚拟机中的唯一性， 每一个类加载器， 都拥有一个独立的类名称空间。 这句话可以表达得更通俗一些： 比较两个类是否“相等”， 只有在这两个类是由同一个类加载器加载的前提下才有意义， 否则， 即使这两个类来源于同一个Class文件， 被同一个Java虚拟机加载， 只要加载它们的类加载器不同， 那这两个类就必定不相等。<br>这里所指的“相等”， 包括代表类的Class对象的equals()方法、 isAssignableFrom()方法、 isInstance()方法的返回结果， 也包括了使用instanceof关键字做对象所属关系判定等各种情况。 如果没有注意到类加载器的影响， 在某些情况下可能会产生具有迷惑性的结果。</p><p>我们将类加载器分为四类。根加载器（启动类加载器）、扩展类加载器、应用程序加载器、自定义加载器</p><pre class="language-txt" data-language="txt"><code class="language-txt">1）Bootstrap ClassLoader(根加载器) 负责加载$JAVA_HOME中 jre/lib/rt.jar 里所有的class或Xbootclassoath选项指定的jar包。由C++实现，不是ClassLoader子类。2）Extension ClassLoader（扩展类加载器） 负责加载java平台中扩展功能的一些jar包，包括$JAVA_HOME中jre/lib/*.jar 或 -Djava.ext.dirs指定目录下的jar包。3）App ClassLoader（应用程序加载器） 负责加载classpath中指定的jar包及 Djava.class.path 所指定目录下的类和jar包。4）Custom ClassLoader（自定义加载器） 通过java.lang.ClassLoader的子类自定义加载class，属于应用程序根据自身需要自定义的ClassLoader，如tomcat、jboss都会根据j2ee规范自行实现ClassLoader</code></pre><p>不同类加载器，加载不同类。<br><img src="/images/java/jvm/1-5.png" alt="类加载器"></p><p>检查某个类是否已经加载：顺序是自底向上，从Custom ClassLoader到BootStrap ClassLoader逐层检查，只要某个Classloader已加载，就视为已加载此类，保证此类只所有ClassLoader加载一次。加载的顺序：加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。这个就是我们常说的双亲委派机制。</p><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>定义：如果一个类加载器在接到加载类的请求时，它首先不会自己尝试去加载这个类，而是把这个请求任务委托给父类加载器去完成，依次递归，如果父类加载器可以完成类加载任务，就成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。</p><p>优势：Java类随着加载它的类加载器一起具备了一种带有优先级的层次关系。比如，Java中的Object类，它存放在rt.jar之中,无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此Object在各种类加载环境中都是同一个类。如果不采用双亲委派模型，那么由各个类加载器自己取加载的话，那么系统中会存在多种不同的Object类。</p><p>防止一个类被重复加载，确保加载的是同一个类<br>保证系统的安全</p><p>破坏：可以继承ClassLoader类，然后重写其中的loadClass方法，其他方式大家可以自己了解拓展一下。</p><h2 id="JVM运行时数据区"><a href="#JVM运行时数据区" class="headerlink" title="JVM运行时数据区"></a>JVM运行时数据区</h2><p>在装载阶段的第(2),(3)步可以发现有运行时数据，堆，方法区等名词<br>(2)将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构<br>(3)在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口<br>说白了就是类文件被类装载器装载进来之后，类中的内容(比如变量，常量，方法，对象等这些数<br>据得要有个去处，也就是要存储起来，存储的位置肯定是在JVM中有对应的空间)</p><p><img src="/images/java/jvm/1-6.png" alt="JVM运行时数据区"></p><p><img src="/images/java/jvm/1-8.png" alt="JVM运行时数据区"></p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区是各个线程共享的内存区域，在虚拟机启动时创建。<br>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。<br>虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却又一个别名叫做Non-Heap(非堆)，目<br>的是与Java堆区分开来。<br>当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>Java堆是Java虚拟机所管理内存中最大的一块，在虚拟机启动时创建，被所有线程共享。<br>Java对象实例以及数组都在堆上分配。</p><p> Java堆可以处于物理上不连续的的内存空间中，但在逻辑上他应该被视为连续的，就像磁盘空间去存储文件一样，并不需要每个文件连续存放。但对于大对象，多数虚拟机实现出于简单、存储高效的考虑，很可能会要求连续的存储空间。</p><p>​       Java堆既可以被实现成固定大小的， 也可以是可扩展的， 不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数-Xmx和-Xms设定） 。 如果在Java堆中没有内存完成实例分配， 并且堆也无法再扩展时， Java虚拟机将会抛出OutOfMemoryError异常。  </p><h4 id="2-2-5-方法区"><a href="#2-2-5-方法区" class="headerlink" title="2.2.5 方法区"></a>2.2.5 方法区</h4><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><p>虚拟机栈是一个线程执行的区域，保存着一个线程中方法的调用状态。换句话说，一个Java线程的运行<br>状态，由一个虚拟机栈来保存，所以虚拟机栈肯定是线程私有的，独有的，随着线程的创建而创建。<br>每一个被线程执行的方法，为该栈中的栈帧，即每个方法对应一个栈帧。<br>调用一个方法，就会向栈中压入一个栈帧；一个方法调用完成，就会把该栈帧从栈中弹出。</p><p><img src="/images/java/jvm/1-9.png" alt="虚拟机栈与栈帧"></p><p>   这里也就解释为什么递归操作一不小心就会出现栈溢出。一般是由虚拟机栈内存不够了。死递归最终一定会造成栈溢出</p><p>​        局部变量表存放了编译期可知的各种Java虚拟机基本数据类型(boolean,byte,char,short,int,float,long,double)、对象引用（reference类型，它并不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其它与此对象的相关位置）</p><p>​        这些数据类型在局部变量表中的存储空间以局部变量槽（Slot）表示，其中64为长度的long和double类型的数据会占用两个变量槽，其余的数据类型只占一个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间时完全确定的，在方法运行期间不会改变局部变量表的大小</p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器占用的内存空间很小，由于Java虚拟机的多线程是通过线程轮流切换，并分配处理器执行时<br>间的方式来实现的，在任意时刻，一个处理器只会执行一条线程中的指令。因此，为了线程切换后能够<br>恢复到正确的执行位置，每条线程需要有一个独立的程序计数器(线程私有)。<br>如果线程正在执行Java方法，则计数器记录的是正在执行的虚拟机字节码指令的地址；<br>如果正在执行的是Native方法，则这个计数器为空。</p><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>如果当前线程执行的方法是Native类型的，这些方法就会在本地方法栈中执行。</p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表，用于存放编译器生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中</p><p>运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性， Java语言并不要求常量一定只有编译期才能产生， 也就是说， 并非预置入Class文件中常量池的内容才能进入方法区运行时常量池， 运行期间也可以将新的常量放入池中， 这种特性被开发人员利用得比较多的便是String类的intern()方法。  </p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存并不是虚拟机运行时数据区的一部分， 也不是《Java虚拟机规范》 中定义的内存区域。 但是这部分内存也被频繁地使用， 而且也可能导致OutOfMemoryError异常出现</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存模型</title>
      <link href="/p/c2d38e6e.html"/>
      <url>/p/c2d38e6e.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>JVM我们应该都有了解。也就是我们所说的Java虚拟机。JVM针对于不同的操作系统都有自己的实现。这也就是为什么Java能实现平台无关性的原因。那么JVM的内存结构是啥样的</p><h2 id="二、什么是JVM"><a href="#二、什么是JVM" class="headerlink" title="二、什么是JVM"></a>二、什么是JVM</h2><p>Java虚拟机（Java Virtual Machine，简称JVM）是Java语言的核心，也是Java程序运行的基础。JVM是一个独立的、能够在不同平台上运行的虚拟计算机，它可以执行Java程序，并将Java代码翻译成可在本地机器上运行的指令。</p><p>JVM的主要作用是将Java程序编译成字节码（即.class文件），并将字节码解释成本地机器可以执行的机器码。JVM还负责内存管理、垃圾回收、线程管理等任务，以保证Java程序能够正确地运行。</p><p><strong>JVM的架构和工作原理</strong></p><p>JVM的架构和工作原理是Java程序员必须了解的内容之一。JVM由以下几个主要组件组成：</p><p><img src="/images/java/jvm/2-1.png"></p><ul><li><p>类加载器（Class Loader）<br>类加载器负责将Java类加载到内存中，并创建对应的Class对象。JVM中的类加载器通常是由引导类加载器、扩展类加载器和应用程序类加载器组成，每个类加载器都有自己的加载路径和加载顺序。</p></li><li><p>运行时数据区（Runtime Data Area）<br>运行时数据区是JVM用来存储程序运行时数据的地方。它包括方法区、堆、虚拟机栈、本地方法栈和程序计数器等组件。</p></li><li><p>执行引擎（Execution Engine）<br>执行引擎是JVM中的核心组件，它负责将字节码翻译成本地机器可以执行的指令，并执行这些指令。执行引擎通常包括解释器和即时编译器两种模式。</p></li><li><p>本地接口（Native Interface）<br>本地接口提供了Java程序与本地代码交互的机制。它允许Java程序调用本地库中的函数，并提供了一种机制，使得本地库可以使用Java类。</p></li></ul><p><strong>JVM的作用</strong></p><p>JVM是Java语言的核心，它为Java程序提供了很多重要的功能和特性，包括以下几个方面：</p><ul><li>平台无关性</li></ul><p>JVM的设计使得Java程序可以在不同的平台上运行，这使得Java语言具有了很高的可移植性和兼容性。Java程序只需要在一个平台上编写一次，就可以在不同的平台上运行，无需重新编译和部署。</p><ul><li>自动内存管理和垃圾回收</li></ul><p>JVM的内存管理机制使得Java程序不需要显式地分配和释放内存。JVM会自动管理内存分配和释放，并且提供了垃圾回收机制，帮助程序自动回收不再使用的内存。这使得Java程序更加安全、可靠、高效。</p><ul><li>安全性</li></ul><p>JVM提供了安全性机制，通过对Java代码的限制，可以防止程序的恶意代码或者非法操作。JVM对程序的访问权限进行严格控制，防止程序越权访问系统资源。</p><ul><li>程序的动态性</li></ul><p>JVM允许在程序运行的过程中动态加载和卸载类库，从而实现程序的动态扩展和更新。这种动态性使得Java程序可以根据需求进行灵活的调整，同时也减少了程序的维护和升级成本。</p><ul><li>面向对象特性</li></ul><p>JVM实现了Java语言的面向对象特性，包括继承、封装、多态等。这些特性使得Java程序易于编写和理解，同时也使得Java程序更加灵活和可扩展。</p><ul><li>多线程支持</li></ul><p>JVM提供了多线程机制，使得Java程序可以更好地利用系统资源，提高程序的运行效率。多线程机制可以使得程序并发地执行多个任务，从而实现更高的吞吐量和更低的响应时间。</p><ul><li>运行时检查</li></ul><p>JVM会在运行时检查Java程序的语法和语义错误，如果发现错误，则会抛出相应的异常。这种机制使得Java程序可以更早地发现和解决问题，提高程序的健壮性和可靠性。</p><h2 id="三、JVM运行时数据区"><a href="#三、JVM运行时数据区" class="headerlink" title="三、JVM运行时数据区"></a>三、JVM运行时数据区</h2><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。Java虚拟机hotspot所管理的内存包括以下几个运行时数据区域，如图所示，我们关注一下运行时的数据区：</p><p><img src="/images/java/jvm/2-4.png"></p><h3 id="3-1-程序计数器"><a href="#3-1-程序计数器" class="headerlink" title="3.1 程序计数器"></a>3.1 程序计数器</h3><p><code>程序计数器（Program Counter Register）</code>是一块较小的内存空间，它可以看作是当前线程所执行的Java字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><p>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为 <code>线程私有</code> 的内存。</p><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值则为空（Undefined）。此内存区域是 <code>唯一 一个在Java虚拟机规范中没有规定OutOfMemoryError情况的区域。</code></p><h3 id="3-2-Java虚拟机栈"><a href="#3-2-Java虚拟机栈" class="headerlink" title="3.2 Java虚拟机栈"></a>3.2 Java虚拟机栈</h3><p>与程序计数器一样，<code>Java虚拟机栈（Java Virtual Machine Stacks）</code>也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p>经常有人把Java内存区分为堆内存（Heap）和栈内存（Stack），其中所指的“堆”就是Java堆，而所指的“栈”就是现在所讲的虚拟机栈，或者说是虚拟机栈中局部变量表部分。</p><p>局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关位置）和returnAddress类型（指向了一条字节码指令的地址）。</p><p>其中64为长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p><p>在Java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</p><p><strong>思考：如何使Java虚拟机栈出现内存溢出呢？</strong></p><p>其实这个我们可以写一个简单程序来实现一下的。首先将JVM参数调小一点。然后写一个死递归。运行程序就能出现Java栈内存溢出了</p><h3 id="3-3-本地方法栈"><a href="#3-3-本地方法栈" class="headerlink" title="3.3 本地方法栈"></a>3.3 本地方法栈</h3><p><code>本地方法栈（Native Method Stack）</code>与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务。在虚拟机规范中对本地方法栈中方法使用的语言、使用方式与数据结构并没有强制规定。HotSpot虚拟机直接把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。</p><h3 id="3-4-Java堆"><a href="#3-4-Java堆" class="headerlink" title="3.4 Java堆"></a>3.4 Java堆</h3><p>对于大多数应用来说，Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放<code>对象实例</code>，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配，但是随着JIT编译器的发展以及逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。</p><p>Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”（Garbage Collected Heap）。从内存回收的角度来看，由于现在收集器基本都采用分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致一点的，新生代可以有Eden空间、From Survivor空间、To Survivor空间等。从内存分配的角度来看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）。不过无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。</p><p>根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</p><h3 id="3-5-方法区"><a href="#3-5-方法区" class="headerlink" title="3.5 方法区"></a>3.5 方法区</h3><p><code>方法区（Method Area）</code>与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，即存放静态文件，如Java类、方法等。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</p><p>对于习惯在HotSpot虚拟机上开发、部署程序的开发者来说，很多人都更愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区，或者说使用永久代来实现方法区而已，这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存、能够省去专门为方法区编写内存管理代码的工作。</p><p>根据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛OutOfMemoryError异常。</p><p>方法区在不同虚拟机中有不同的实现，HotSpot在1.7版本以前和1.7版本，1.7版本后都有变化。</p><p>① jdk7版本以前的方法区通过永久代来实现。永久代是存放在堆内存上的<br>② jdk8版本中则把永久代给完全删除了，取而代之的是元空间MetaSpace。而元空间是存放在本地内存里的</p><h4 id="3-5-1-永久代"><a href="#3-5-1-永久代" class="headerlink" title="3.5.1 永久代"></a>3.5.1 永久代</h4><p><img src="/images/java/jvm/2-2.png"><br>从这个图上，我们可以直观的看到。JDK7以前，方法区是通过永久代来实现，并且永久代是存放在堆上的</p><h4 id="3-5-2-元空间"><a href="#3-5-2-元空间" class="headerlink" title="3.5.2 元空间"></a>3.5.2 元空间</h4><p><img src="/images/java/jvm/2-3.png"><br>到了JDK8以后，单独在本地内存创建了元空间，使用元空间来实现方法区</p><h4 id="3-5-3-运行时常量池"><a href="#3-5-3-运行时常量池" class="headerlink" title="3.5.3 运行时常量池"></a>3.5.3 运行时常量池</h4><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p><p>Java虚拟机对Class文件每一部分（自然也包括常量池）的格式都有严格规定，每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、装载和执行，但对于运行时常量池，Java虚拟机规范没有做任何细节的要求。不过，一般来说，除了保存Class文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中。</p><p>运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern()方法。</p><p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p><p><strong>jDK7以前运行时常量池存放位置</strong><br><img src="/images/java/jvm/2-5.png"><br>JDK7以前永久代，运行时常量池保存在永久代中，字符串常量池是运行时常量池的一部分</p><p><strong>JDK8后运行时常量池存放位置</strong><br><img src="/images/java/jvm/2-6.png"><br>jdk1.8及以后：有元空间，运行时常量池保存在元空间中，字符串常量池保存在堆中</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>1、JVM由四个组件组成。分别是类加载，JVM运行时内存区域，执行引擎和本地方法接口<br>2、JVM运行时内存区域分为五个部分。分别是程序计数器，Java方法栈，本地方法栈，堆，方法区<br>3、方法区是一个抽象的概念。JDK7以前通过永久代实现方法区，永久代存放在堆上。JDK8以后通过元空间实现方法区，元空间存放在本地内存上<br>4、JDK7以前永久代，运行时常量池保存在永久代中，字符串常量池是运行时常量池的一部分<br>5、jdk1.8及以后：有元空间，运行时常量池保存在元空间中，字符串常量池保存在堆中</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postman接口测试工具使用</title>
      <link href="/p/5323f09b.html"/>
      <url>/p/5323f09b.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为后端开发人员，我们编写了一个接口之后，也就是我们Contorller层新增了一个requetMaping。这个时候通常是需要我们开发人员自测一下，看看这个接口有没有错误，传输的数据是否正确，返回的结果集是否正确等等。那么这个时候就需要借助于接口测试工具了。常见的接口测试工具就是Postman了，这个工具还是非常好用的。当然了，还有其他的接口测试工具，这里也就不一一列举了。</p><h2 id="Postman介绍以及安装"><a href="#Postman介绍以及安装" class="headerlink" title="Postman介绍以及安装"></a>Postman介绍以及安装</h2><p>Postman是一款能模拟http请求的工具软件，支持多种请求方式，对于程序开发人员来说提供了一种测试工具。Postman能够保留用户的请求历史记录，方便下次请求时直接查找。也方便了开发人员调试代码。</p><p>至于Postman工具的安装，我们可以直接在官网上下载客户端，也可以在谷歌浏览器上安装插件。这种插件的安装方式如果说是在谷歌商店的应用市场下载，需要连接vpn翻墙。但是你要可以百度一个下载好了的拓展程序包，拖到谷歌浏览器中也是可以的。具体的安装这里不做讲述，只说说Postman工具是如何使用的。</p><h2 id="Postman页面介绍"><a href="#Postman页面介绍" class="headerlink" title="Postman页面介绍"></a>Postman页面介绍</h2><p>这里我们用postmna自带的接口来做个测试，顺便说以下页面上的这些内容分别表示什么意思<br><img src="/images/toolanddeploy/othertool/1-2.png"></p><h2 id="接口请求流程"><a href="#接口请求流程" class="headerlink" title="接口请求流程"></a>接口请求流程</h2><p>这里主要介绍Get和Post这两种比较常用的请求，其他的请求方式与之类似，就不做过多的介绍了</p><p><strong>1、Get请求</strong></p><p>这里我们还是使用postman提供的接口来演示<br><img src="/images/toolanddeploy/othertool/1-3.png"></p><p>GET请求，一般都是在url地址后以?来传参数，当有多个参数的时候使用&amp;来连接。所以Get请求一般是比较简单的。从上图，我们也能够看到发送Get请求后响应的内容。除了这种传参方式之外，还有一种restful风格的传参数，就是将参数放在url当中。比如说<br><a href="http://postman/delay/3">http://postman/delay/3</a> 。这里的3表示的就是参数内容，没有参数名称，参数名称在后端代码处设置就可以了。</p><p><strong>2、Post请求</strong></p><p>Post请求一般是将请求的参数内容放在请求体当中。并且post提交方式需要设置请求头，请求头的目的是为了标识Post参数的格式。<br><img src="/images/toolanddeploy/othertool/1-4.png"></p><p>Postman中的Body部分有四种格式:form-data、x-www-form-urlencoded、raw、binary。</p><p>form-data主要是以键值对的形式来上传参数，同时参数之间以&amp;分隔符分开，同时也可以上传文件，文件上传要指定文件类型。</p><p>当选择x-www-form-urlencoded的参数方式后，postman自动的帮我们设置了Content-Type，所以不需要我们人工干预，这就是使用一款流行工具的好处，把一些基础点都帮我们处理了。这种参数的传递与form-data最大的区别是，x-www-form-urlencode只能是以键值对的形式传参，不能上传文件。</p><p><img src="/images/toolanddeploy/othertool/1-5.png"><br>这个raw比较强大，可以上传任意格式文件，具体的可以上传text文本文件、json文件、xml文件、html文件等</p><p><img src="/images/toolanddeploy/othertool/1-6.png"><br>Body下，选择binary，在这里你可以发送视频、音频、文本等文件。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上这就是Postman工具的基本简单使用了，也是我们在生活中比较常用的请求方式的介绍。现在很多系统是不能够直接请求的，需要身份认证才能访问。Postman也提供了模拟身份认证的功能。这里暂不讲述，后面有时间再写一篇吧。</p>]]></content>
      
      
      <categories>
          
          <category> 工具与部署 </category>
          
          <category> 其他工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle中dblink使用</title>
      <link href="/p/340249ba.html"/>
      <url>/p/340249ba.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前学习一直使用的Mysql数据库，现在再公司是改用了Oracle数据库。对Oracle数据库的了解还是比较少的，这次接触到了dblink，那就刚好写一篇文章来记录一下。</p><h2 id="什么是dblink"><a href="#什么是dblink" class="headerlink" title="什么是dblink"></a>什么是dblink</h2><p>dbLink是简称，全称是databaselink，翻译过来就是数据库链接的意思。那么这个dblink的作用是什么呢。它主要是用来做跨库访问的。比如说我现在有一个A数据库，还有一个B数据库，那我我现在想在A库中访问B数据库中的数据。那么我们怎么做。我们就可以在A库中创建一个dblink来链接到B数据库。这样我们在A数据库中就可以直接对B中的数据进行查询，访问，修改。</p><p>创建dblink的语法如下:</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PUBLIC</span> <span class="token keyword">DATABASE</span> LINK db_link_name <span class="token keyword">CONNECT</span> <span class="token keyword">TO</span> username IDENTIFIED <span class="token keyword">BY</span> password <span class="token keyword">USING</span> <span class="token string">'(DESCRIPTION =    (ADDRESS_LIST =      (ADDRESS = (PROTOCOL = TCP)(HOST =visist_IP)(PORT =visit_port ))    )    (CONNECT_DATA =      (SERVICE_NAME = db_name)    )  )'</span><span class="token punctuation">;</span>  <span class="token comment">--参数说明</span>  <span class="token comment">--username 需要访问数据用户名， password  密码， visit_ip  需要访问数据库的ip，visit_port 窗口， db_name数据库名称</span></code></pre><h2 id="如何创建dblink"><a href="#如何创建dblink" class="headerlink" title="如何创建dblink"></a>如何创建dblink</h2><p>我们可以按照上述语法，可以先把创建dblink的SQL脚本写好。比如说我现在本机Oracle数据库上有两个库（也可以说两个用户）。分别是test1,test2。密码和用户名一致。</p><p>注意，Oracle数据库中一个用户表示一个数据库。和Mysql有一点区别。Mysql是一个root用户，创建连接，然后登录成功后就是自己建数据库的名称。</p><p>Oracle数据库，需要先创建一个用户，给这个用户授予相对应的权限。用户创建成功后，登录这个用户，然后进行创建表或其他的一些操作。</p><p>现在我想在test1库中创建一个链接test2库的dblink。那么执行脚本就如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PUBLIC</span> <span class="token keyword">DATABASE</span> LINK db_link_test2 <span class="token keyword">CONNECT</span> <span class="token keyword">TO</span> test2 IDENTIFIED <span class="token keyword">BY</span> test2 <span class="token keyword">USING</span> <span class="token string">'(DESCRIPTION =    (ADDRESS_LIST =      (ADDRESS = (PROTOCOL = TCP)(HOST =127.0.0.1)(PORT =1521 ))    )    (CONNECT_DATA =      (SERVICE_NAME = orcl)    )  )'</span><span class="token punctuation">;</span></code></pre><p>比如说我们现在test1库里面有一张user表，test2库里面有一张school表。我们想在test1库中执行查询，查到这个school表中的数据。那么我们的sql语句应该怎么写呢？</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> t<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> school<span class="token variable">@db_link_test2</span> t<span class="token punctuation">;</span></code></pre><p>这个语句就可以在test1数据库中查出来test2数据库中的school中的数据。school@db_link_test2 是‘表名’@’数据库链接名’</p><p>有创建dblink的方法，当然就有删除dblink的方法，当我们不需要dblink的时候。我们执行下列Sql即可对dblink进行删除。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">public</span> <span class="token keyword">database</span> link  db_link_test2<span class="token punctuation">;</span></code></pre><p>注意一下，我们想要创建dblink前提是该用户有创建dblink的权限。如果没有权限是创建不了dblink的。那么我们只需要给该用户授予相应的权限即可。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">create</span> <span class="token keyword">public</span> <span class="token keyword">database</span> link <span class="token keyword">to</span> wangyong<span class="token punctuation">;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>dblink使用起来还是很方便的。那么我们一般在什么场景下使用dblink等。首先肯定是得有两个数据库的。一般这种情况是涉及到两个系统的对接和交互。这个两个系统都有自己的数据库，他们之间要实现信息的交互，访问。那么我们就可以创建一个dblink来进行访问。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT认证原理与SpringBoot整合</title>
      <link href="/p/4854cfc0.html"/>
      <url>/p/4854cfc0.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是JWT"><a href="#一、什么是JWT" class="headerlink" title="一、什么是JWT"></a>一、什么是JWT</h2><p>JWT俗称JSON Web Token，也就是通过JSON形式作为Web应用中的令牌，用于在各方之间安全的将信息作为JSON对象进行传输。在数据传输的过程还可以完成数据加密，签名的相关的处理。对数据加密需要其他的一些工具的支持。例如配合https使用。</p><h2 id="二、JWT能做什么"><a href="#二、JWT能做什么" class="headerlink" title="二、JWT能做什么"></a>二、JWT能做什么</h2><p><strong>1、授权</strong></p><p>这是使用JWT最常见的方式，一旦用户登录，每个后续请求都将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。单点登录是当今广泛使用JWT的一项功能，因为它的开销很小，并且可以在不同的域中轻松使用。</p><p><strong>2、信息交换</strong></p><p>JSON Web Token 是在各方面之间安全传输信息的好方法，因为可以对JWT进行签名，所以你可以确保发送方就是他所说的人，此外，由于签名是使用标头和有负载计算的，因此你还可以验证内容是否受到篡改。</p><h2 id="三、为什么要用JWT"><a href="#三、为什么要用JWT" class="headerlink" title="三、为什么要用JWT"></a>三、为什么要用JWT</h2><h3 id="1、基于传统的Session认证"><a href="#1、基于传统的Session认证" class="headerlink" title="1、基于传统的Session认证"></a>1、基于传统的Session认证</h3><p><strong>认证方式</strong></p><p>首先，来说说传统认证的方式，我们知道，http协议本身是一种无状态的协议，无状态也就意味着如果用户向我们的系统应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还需要再一次进行用户认证才行，因为根据http协议，我们并不能够知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪一个用户发出的请求，我们只能在服务器端存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求发送给应用的时候，我们就能够识别是哪个用户了。这就是基于传统的session认证.</p><p><strong>2、认证流程</strong></p><p><img src="/images/otherTechnology/1-1.png" alt="认证流程"></p><p>3、暴露问题</p><ul><li>每个用户经过应用认证之后，我们的应用都需要在服务端多做一次记录，以便下次用户请求时鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销就会明显增大。</li><li>用户认证之后，服务器端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上，这样才能拿到授权资源，这样在分布式应用上，相应的限制了负载均衡的能力，这也意味着限制了应用的扩展能力。这个时候，我们就得做session共享</li><li>因为是基于cookie来进行用户识别的，如果cookie被获取，用户就会很容易受到跨站请求的伪造攻击</li><li>在前后端分离的系统中，由于应用的解耦增加的部署的复杂性，通常用户的一次请求就要转发多次，如果使用session 每次携带的sessionId到服务器，服务器还要查询用户信息。同时，如果用户很多，这些信息存储在服务器内存中，会给服务器增加负担。另外就是CSRF（跨站伪造请求攻击），session是基于cookie进行用户识别的，cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。并且sessionId就是一个特征值，表达的信息不够丰富，不方便扩展。而且如果以后是多节点部署，那么就需要实现session共享机制。不方便集群应用。</li></ul><h3 id="2、基于JWT认证"><a href="#2、基于JWT认证" class="headerlink" title="2、基于JWT认证"></a>2、基于JWT认证</h3><p><img src="/images/otherTechnology/1-2.png" alt="基于JWT认证"></p><p>1、认证流程</p><ul><li>首先，前端通过web表单将自己的用户名和密码发送到后端的接口。这一过程一般是HTTP Post请求。建议的方式是通过SSL加密传输，从而避免敏感信息被嗅探。</li><li>后端核对用户名和密码成功之后，将用户的id等其他信息作为JWT Payload(负载),将其与头部分别进行base64编码拼接后签名，形成一个JWT(token)，形成的JWT就是一个111.zzz.xxx格式的字符串。</li><li>后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果存储在localStorage和sessionStorage上，退出登录时，前端删除保存的jwt即可。其实就是存在浏览器里。</li><li>前端在每次请求时将JWT放入HTTP Header中的Authorization位</li><li>后端检查JWT是否存在，如果存在就验证JWT的有效性，例如，检查签名是否正确；检查Token是否过期；检查Token的接收方是否是自己</li><li>验证通过后，后端使用JWT中包含的用户信息进行其他逻辑操作。</li></ul><p>2、jwt优势</p><ul><li>简洁：可以通过URL，POST参数或者在Http header中发送，因为数据量很小，传输速度也很快</li><li>自包含：负载中包含了所有用户需要的信息，避免了多次查询数据库</li><li>因为Token是以JSON加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持</li><li>不需要服务端保存会话信息，特别适用于分布式微服务</li></ul><h2 id="四、JWT结构是什么"><a href="#四、JWT结构是什么" class="headerlink" title="四、JWT结构是什么"></a>四、JWT结构是什么</h2><p><strong>1、令牌组成</strong></p><p>令牌由三部分组成，分别是标头、负载、签名。通常表示为  xxx.yyy.zzz</p><p><strong>2、Header</strong></p><p>标头信息一般由两部分组成：令牌的类型(即JWT)和所使用的算法签名，例如HMAC，RSA,SHA256等算法。它会使用Base64编码组成JWT结构的第一部分。BASE64是一种编码，并不是加密过程。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">&#125;</span></code></pre><p><strong>3、Payload</strong></p><p>令牌的第二部分是有效负载，其中包含声明。声明是有关实体和其他数据的声明。同样的，它会使用BAse64编码组成JWT结构的第二部分。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"sub"</span><span class="token operator">:</span> <span class="token string">"1234567890"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"xuzhi"</span>    <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span></code></pre><p><strong>4、Signature</strong><br>前面的两个部分都是使用Base64进行编码的，即前端可以解开，知道里面的信息，Signature需要使用编码后的header和payload以及我们提供的一个秘钥，然后使用header中指定的签名算法进行签名。签名的作用是保证JWT没有被篡改过</p><p><strong>5、签名的目的</strong></p><p>最后一步签名的过程，实际上是对头部以及负载的内容进行签名，防止内容被篡改。如果有人对头部以及负载的内容解码后进行修改，然后再进行编码，最后加上之前的签名组成一个新的JWT的话，那么服务器端是能够判断出新的头部和负载形成的签名和JWT附带的签名是不一致的。如果要对新的头部和负载进行签名，在不知道服务器加密用的秘钥的话，得出来的签名也是不一样的。</p><p>JWT是不安全的，所以在JWT中不应该在负载中加入任何敏感内容。</p><h2 id="五、使用JWT"><a href="#五、使用JWT" class="headerlink" title="五、使用JWT"></a>五、使用JWT</h2><p>我们打开idea。创建一个SpringBoot工程，在pom.xml文件中添加如下依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>生成token，这里我们直接在测试类中去编写和测试。先简单了解一下JWT。后面在说如何将它与SpringBoot整合。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span></span>JWT<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span></span><span class="token class-name">JWTVerifier</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span></span><span class="token class-name">Algorithm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span></span><span class="token class-name">DecodedJWT</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">JwttestApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Calendar</span> instance <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>SECOND<span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//80秒</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withHeader</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>  <span class="token comment">//头部</span>                <span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>  <span class="token comment">//有效负载</span>                <span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"xuz"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withExpiresAt</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//指定令牌的过期时间</span>                <span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token string">"!QWER"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//签名</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">JWTVerifier</span> jwtVerifier <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token string">"!QWER"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//创建验证对象</span>        <span class="token class-name">DecodedJWT</span> verify <span class="token operator">=</span> jwtVerifier<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2Mjk2MjQ1ODcsInVzZXJJZCI6MjEsInVzZXJuYW1lIjoieHV6In0.UGV9w6z6U_OEsdQcaHEbOhThxOdMQ9MsG7qt1L601aI\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>verify<span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>verify<span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>第一个测试方法是测试生成token的。第二个测试方法是校验token的。我们现在可以基于这两个方法封装一个工具类。</p><h2 id="六、封装工具类"><a href="#六、封装工具类" class="headerlink" title="六、封装工具类"></a>六、封装工具类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span></span>JWT<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span></span><span class="token class-name">JWTCreator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span></span><span class="token class-name">Algorithm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span></span><span class="token class-name">DecodedJWT</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span>  <span class="token keyword">final</span>  <span class="token class-name">String</span> SIGN <span class="token operator">=</span> <span class="token string">"!Q@W%%RE"</span><span class="token punctuation">;</span>   <span class="token comment">//签名</span>    <span class="token comment">/**     * 生成token    header.payload.signature     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Calendar</span> instance <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DATE<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//默认七天过期</span>        <span class="token class-name">JWTCreator<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            builder<span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">withExpiresAt</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//指定令牌的过期时间</span>                <span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span>SIGN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//签名</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 验证token     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DecodedJWT</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DecodedJWT</span> verify <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span>SIGN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> verify<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取token信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DecodedJWT</span> <span class="token function">getTokenInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DecodedJWT</span> verify <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span>SIGN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> verify<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="七、整合SpringBoot"><a href="#七、整合SpringBoot" class="headerlink" title="七、整合SpringBoot"></a>七、整合SpringBoot</h2><p>对用户进行授权的话，我们授权的用户肯定是来自数据库的。那这里就涉及到了数据库了。我们这里创建一个简单的数据库，里面就一张用户表。可以直接用Navicat工具创建，SQL语句都不用写。<br>1、创建一个jwt的数据库，里面新增一张User表，User表里面只需要id,username,password三个字段即可，这里我们只为做测试使用，因此并不需要太复杂的数据库表<br>2、添加pom.xml依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jwttest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>jwttest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.38<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>3、编写实体类，这里我们引用了lombok插件，注意要先在idea上安装这个插件。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>4、编写UserDao类和对应的UserDao.xml文件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.jwttest.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.jwttest.entity.User<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.jwttest.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where username= #&#123;username&#125; and password= #&#123;password&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>5、编写userService类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">UserDao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Propagation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Transactional</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>SUPPORTS<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> userDB <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userDB<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> userDB<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>5、编写UserController</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span><span class="token class-name">AlgorithmMismatchException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span><span class="token class-name">SignatureVerificationException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span><span class="token class-name">TokenExpiredException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span></span><span class="token class-name">DecodedJWT</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">JWTUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户名:[&#123;&#125;]"</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"密码:[&#123;&#125;]"</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> userDB <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            payload<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            payload<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//生成JWT令牌</span>            <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"认证成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"认证失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前token为:[&#123;&#125;]"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DecodedJWT</span> verify <span class="token operator">=</span> <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"请求成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> map<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SignatureVerificationException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"无效签名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TokenExpiredException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"token过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AlgorithmMismatchException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"token算法不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"token无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>6、配置启动类，主要是开启Mapper扫描</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.example.jwttest.dao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwttestApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">JwttestApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>7、核心配置文件</p><pre class="language-java" data-language="java"><code class="language-java">server<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8989</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span>DruidDataSource</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>jwtspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>username<span class="token operator">=</span>rootspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>password<span class="token operator">=</span>rootmybatis<span class="token punctuation">.</span>type<span class="token operator">-</span>aliases<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>entitymybatis<span class="token punctuation">.</span>mapper<span class="token operator">-</span>locations<span class="token operator">=</span>classpath<span class="token operator">:</span>mapper<span class="token comment">/*.xmllogging.level.com.example.jwttest.dao=debug</span></code></pre><p>完成之后项目的工程目录结构如下。<br><img src="/images/otherTechnology/1-3.png" alt="目录结构"></p><p>运行启动类，浏览器访问localhost:8989/user/login?username=xxx&amp;password=XX</p><p>xxx表示数据库中的用户名和密码。匹对成功后，生成token返回给前端。前端拿到token后存储在本地localStorage。以后每次发送请求都要去携带这个token。否则无法请求后端的接口。但是如果只是这样处理，后端的每个接口都需要加一行校验token的代码，这行代码重复率太高。所以我们可以配置一个过滤器来帮助我们来校验token。</p><p>8、编写一个过滤器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>interceptors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span><span class="token class-name">AlgorithmMismatchException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span><span class="token class-name">SignatureVerificationException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span><span class="token class-name">TokenExpiredException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span></span><span class="token class-name">DecodedJWT</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">JWTUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DecodedJWT</span> verify <span class="token operator">=</span> <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SignatureVerificationException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"无效签名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TokenExpiredException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"token过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AlgorithmMismatchException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"token算法不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"token无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将map转为json</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>9、配置过滤器能被SpringBoot识别</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwttest<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span></span><span class="token class-name">JWTInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">InterceptorRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWTInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/test"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//用户相关操作需要放行</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>以上就是JWT的介绍以及与SpringBoot整合了</p>]]></content>
      
      
      <categories>
          
          <category> 其他技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo另外创建分支备份源代码</title>
      <link href="/p/da4c870c.html"/>
      <url>/p/da4c870c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们使用Hexo + Gitee搭建个人博客的原理时。使用hexo本地先生成静态资源。也就是html还有css等资源。然后部署到Gitee Pages上面。这样实现的静态网站的页面跳转以及访问。当时你有没有想过一点。如果有一天你写博客的电脑坏掉了。你的文件就找不到了。Gitee上存放的只是一些生成后的静态资源。而不是你写博客的md文件。那这样的话怎么办，所以我们事先需要对我们写的文章做好备份</p><h2 id="新创建一个仓库，用来存放源文件"><a href="#新创建一个仓库，用来存放源文件" class="headerlink" title="新创建一个仓库，用来存放源文件"></a>新创建一个仓库，用来存放源文件</h2><p><img src="/images/hexo/10-1.png"></p><p>专门创建一个用来备份个人博客源文件的仓库</p><h2 id="仓库创建好了之后拉取到本地"><a href="#仓库创建好了之后拉取到本地" class="headerlink" title="仓库创建好了之后拉取到本地"></a>仓库创建好了之后拉取到本地</h2><p><img src="/images/hexo/10-2.png"></p><h2 id="将原来编写博客文件夹里面所有的内容移动到这个仓库里"><a href="#将原来编写博客文件夹里面所有的内容移动到这个仓库里" class="headerlink" title="将原来编写博客文件夹里面所有的内容移动到这个仓库里"></a>将原来编写博客文件夹里面所有的内容移动到这个仓库里</h2><p><img src="/images/hexo/10-3.png"></p><h2 id="提交代码到远程仓库"><a href="#提交代码到远程仓库" class="headerlink" title="提交代码到远程仓库"></a>提交代码到远程仓库</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"提交内容"</span><span class="token function">git</span> push origin master  <span class="token comment">## origin表示远程仓库地址</span></code></pre><p><img src="/images/hexo/10-4.png"><br>提交完成</p><h2 id="后续编写博客命令如下"><a href="#后续编写博客命令如下" class="headerlink" title="后续编写博客命令如下"></a>后续编写博客命令如下</h2><pre class="language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"提交内容"</span><span class="token function">git</span> push origin master  <span class="token comment">## origin表示远程仓库地址</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo样式不展示问题处理</title>
      <link href="/p/edfe41a2.html"/>
      <url>/p/edfe41a2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前使用Hexo+Gitee搭建了一个个人博客网站，但是好久没有使用了，本地重启之后发现页面样式变成这样了<br><img src="/images/hexo/9-1.png"></p><h2 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h2><p>1、先修改配置文件，改成默认的主题看看有没有问题，发现改成默认主题是正常展示的<br><img src="/images/hexo/9-2.png"><br>配置文件主题先修改成 landscape。<br>修改完成后，执行hexo clean<br>hexo g<br>hexo s</p><p>本地访问 Localhost://4000发现访问默认主题是正常的，没有出现样式问题</p><p>2、那么就说明是我本地的fluid主题的问题。我先卸载了我本地的fluid主题</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> uninstall  hexo-theme-fluid</code></pre><p>如果你之前使用的不是命令安装，而是压缩包的方式，那么将压缩包删除即可</p><p>3、卸载完成后，重新把这个主题再下载下来.配置文件的主题又修改为fluid。重启，问题解决</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-theme-fluid</code></pre><p>注意，我们需要手工创建一个_config.fluid.yml文件。从fluid官方把注意的_config.yml里面的内容拷贝到我们创建的这个文件里</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo中Fluid主题代码高亮展示</title>
      <link href="/p/f1636bc8.html"/>
      <url>/p/f1636bc8.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我使用的是Fluid主题，在编写博客的时候，默认代码的格式非常的丑。白色的背景，然后代码也没有高亮显示。我个人是比较喜欢黑色背景的，就更改了一下代码的样式。首先我们要明白，hexo中默认是有一个highlightjs来进行代码高亮显示的，我们需要把这个关掉，打开主题配置文件里面的highlightjs。</p><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>首先找到根配置文件，也就是根目录下的_config.yml文件。关闭highlightjs</p><p><img src="/images/hexo/8-1.png" alt="图片8-1"></p><p>然后打开主题下的配置文件，文件名称也是_config.yml。在theme目录下<br><img src="/images/hexo/8-2.png" alt="图片8-1"></p><p>代码高亮的样式，我这里使用的是Dark。你可以去它的官网，选择一个你喜欢的样式，修改style里面的内容即可<br><a href="https://highlightjs.org/static/demo">https://highlightjs.org/static/demo/</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>开启你愉快的博客之旅吧</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo插件hexo-abbrlink使用</title>
      <link href="/p/b0bda652.html"/>
      <url>/p/b0bda652.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在使用hexo编写博客的时候，Hexo在生成博客文章链接时，默认是按照年、月、日、标题格式来生成URL链接的，而且里面还包含着中文，这样就存在一个问题。当我们把博客部署到Gitee上的时候，如果想把这篇文章分享出去，这个URL链接会将中文转换成字符串编码。但是你想一下，如果你修改了你博客文章的标题，那么你前面分享的URL链接就失效了。别人就无法访问了。</p><p>Hexo默认是将我们编写的md文件，通过hexo g命令生成静态的html页面。这个html页面存放方位置文件结构比较深，有时候可能会出现404page not found的问题。这也就是我为什么要使用这款插件的原因。</p><h2 id="hexo-abbrlink插件安装和使用"><a href="#hexo-abbrlink插件安装和使用" class="headerlink" title="hexo-abbrlink插件安装和使用"></a>hexo-abbrlink插件安装和使用</h2><p>首先，进入到你博客文件夹下，执行下面命令</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install hexo-abbrlink --save</code></pre><p>安装如果提示失败，可能是因为你缺少相对应的依赖，按照提示安装依赖即可。安装成功后，我们需要在配置文件中进行修改。</p><pre class="language-yml" data-language="yml"><code class="language-yml">permalink: p&#x2F;:abbrlink.html  # p 是自定义的前缀abbrlink:    alg: crc32   #算法： crc16(default) and crc32    rep: hex     #进制： dec(default) and hexpermalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks  trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks</code></pre><p><img src="/images/hexo/7-1.png" alt="图片7-1"></p><p>配置完成后，我们先要清空一下原本的生成的文件，然后重新生成，启动本地服务</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">hexo cleanhexo ghexo s</code></pre><p><img src="/images/hexo/7-2.png" alt="图片7-2"><br>这样我们文章的url就变成这样的了。当你使用hexo d将仓库推到Gitee上后，需要重新更新一下才会生效。如果说还是没有生效，那就是浏览器缓存的问题，打开一个无痕模式，重新访问一下，就会出现了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>安装这个插件后，原文章md文件的Front-matter 内会增加abbrlink 字段,值为生成的随机ID 。这个字段确保了在我们修改了Front-matter 内的博客标题title或创建日期date字段之后而不会改变链接地址,换句话说,就是本篇文章有了自己的专属链接。有了专属链接，找百度收录也就简单的多了。我只能说，写出这个插件的人真是厉害。具体详情关于此插件的介绍，感兴趣的话，大家可以去官网上看看。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot理财项目</title>
      <link href="/p/c67c11fb.html"/>
      <url>/p/c67c11fb.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>今天分享一个使用SpringBoot框架搭建的一个开源项目，大家可以参考学习此项目，在此项目的基础之上完成二次开发。对于应届生小伙伴来说，这个项目还是有极大的参考价值的，首先这个项目可以帮助我们熟悉并回顾已学习过的框架，当然这个项目也是可以写在自己的简历当中。虽然业务并不算太复杂，但至少他的名称比XX管理系统，XX商城系统写在简历上要好的多。当然了，这里并没有歧视管理系统的意思。在学习的过程中，找项目练手，一般都是从管理系统开始，只是管理系统在面试中被写的太多了，在本科生的毕业设计上也写的太多了。甚至有些导师不让自己的学生在毕业设计上写管理系统。觉得太简单，没有什么价值。</p><h2 id="二、项目介绍"><a href="#二、项目介绍" class="headerlink" title="二、项目介绍"></a>二、项目介绍</h2><p>个人理财项目中，对金融方面的业务非常的少，只是简单的涉及了一下，甚至可以说连皮毛都算不上，所以大家也不用担心说业务理解不了。只是一个简单的单体项目，业务复杂不到哪里去。理清楚表之间的关联关系就可以了。</p><p>我们常见的管理系统只是涉及了对数据的增删改查而已，基本没有什么业务可言，表之间的关联关系也没有太复杂。简单介绍以下，这个理财系统主要大的模块有三个，个人理财，金融工具，个人中心。由于只是为了展示，所以表中数据也就几条而已。</p><p>这个项目，首先能够帮助我们熟悉SpringBoot和MyBatis框架的使用，其次包括图形验证码的使用，还有Shiro框架的使用。用来巩固已经学习的知识再合适不过了。</p><h2 id="三、技术选型"><a href="#三、技术选型" class="headerlink" title="三、技术选型"></a>三、技术选型</h2><p>前端：html+thymeleaf</p><p>数据库：mysql5.0+</p><p>开发工具：idea</p><p>后端框架：SpringBoot+Shiro+MyBatis</p><h2 id="四、项目部分截图展示"><a href="#四、项目部分截图展示" class="headerlink" title="四、项目部分截图展示"></a>四、项目部分截图展示</h2><p>接下来展示相关的项目页面截图。<br><img src="/images/project/1-1.png" alt="alt"><br><img src="/images/project/1-2.png" alt="alt"><br><img src="/images/project/1-3.png" alt="alt"><br><img src="/images/project/1-4.png" alt="alt"><br><img src="/images/project/1-5.png" alt="alt"></p><h2 id="五、项目搭建过程"><a href="#五、项目搭建过程" class="headerlink" title="五、项目搭建过程"></a>五、项目搭建过程</h2><p><strong>1、导入项目的SQL文件至数据库</strong></p><p>项目的SQL文件在工程文件的SQL文件夹下，直接导入SQL文件即可，我使用的数据库管理工具是Navicat Prenium。如果导入报错，很有可能是数据库版本不一致造成的，那么你可以把SQL文件中的建表语句找出来，单独执行一下建表语句。</p><p><strong>2、项目工程导入idea</strong></p><p>打开idea，点击import project，导入工程。导入工程后修改jdk配置为你本地的jdk环境，修改maven配置为你本地的maven。本地maven最好配置一下阿里云或者华为云的镜像。修改配置后，记得刷新maven依赖</p><p><strong>3、修改application.yml配置文件</strong></p><p>SprintBoot项目中最重要的配置文件就是这个application.yml文件，我们主要修改的是数据库的配置，用户名，密码，以及url即可。</p><p><strong>4、启动项目</strong></p><p>一键启动，浏览器访问localhost:8080即可。</p><p>由于此项目提供了注册功能，所以你完全可以先注册一个用户，然后再登录本系统。本系统用户表中密码采用了加密处理。</p><h2 id="六、源代码获取"><a href="#六、源代码获取" class="headerlink" title="六、源代码获取"></a>六、源代码获取</h2><p>关注公众号【lamdaxu】回复【02】即可获取项目源码。<br><img src="/images/project.jpg" alt="公众号"><br><img src="/images/project/1-6.png" alt="公众号"></p><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>当我们想学习某一个项目的时候，首先第一步要做的就是将这个项目在本地运行起来。使用浏览器访问一下，看看这个项目有哪些功能，有哪些闪光点，比如说验证码，页面布局，表单校验等等。先要对这个项目有一定的了解。</p><p>如果说，你有一定的时间，想把这个项目重新手敲一下，那你完全可以按照自己的编码风格来重构一个这个项目，也可以对这个项目进行拓展。举个简单的例子来说，我们变量和方法的命名一般采用驼峰命名，当别人的代码没有遵循这个命名规范的时候，就看着很不舒服。</p><p>如果你时间不够，又想快速了解这个项目怎么实现，那你必须掌握一定的debug技能了。走一遍断点，很多地方还是能够明白他的实现逻辑的。所以说你简历中的项目，并不一定是需要你真正手敲过一遍的，你只需要理解他用到了那些技术，如何实现，在面试中你能准确的表达出来就可以。</p>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客Fluid主题页面简单自定义</title>
      <link href="/p/6478b075.html"/>
      <url>/p/6478b075.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>博客平台搭建好了之后，我们总想将样式进行修改。这里就简单说以下，页面的相关自定义，相关配置文件的修改以及页面展示的效果是怎么样的。这里主要是介绍一下Fluid主题，因为我的博客平台就是使用的这个主题，其他主题类似。<br>在配置自定义配置的时候，我们先要找到该主题的配置文档指南。例如Fluid的配置指南网址如下：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><h2 id="二、自定义页面"><a href="#二、自定义页面" class="headerlink" title="二、自定义页面"></a>二、自定义页面</h2><h3 id="1、首页标题修改"><a href="#1、首页标题修改" class="headerlink" title="1、首页标题修改"></a>1、首页标题修改</h3><p><img src="/images/hexo/6-1.png" alt="alt"></p><p>找到themes文件夹下的config.yml文件，修改blog_title属性即可。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 导航栏的相关配置</span><span class="token comment"># Navigation bar</span>navbar:  blog_title: <span class="token string">"lamdaxuの博客"</span></code></pre><h3 id="2、增加友情链接栏"><a href="#2、增加友情链接栏" class="headerlink" title="2、增加友情链接栏"></a>2、增加友情链接栏</h3><p><img src="/images/hexo/6-2.png" alt="alt"></p><p>首先你需要创建这个页面，执行命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page links</code></pre><p>依然是上述的那个配置文件，增加一行links的菜单配置即可<br><img src="/images/hexo/6-3.png" alt="alt"></p><h3 id="3、首页文字修改"><a href="#3、首页文字修改" class="headerlink" title="3、首页文字修改"></a>3、首页文字修改</h3><p>这一个相当于励志铭的文字的配置也是在这个配置文件中<br><img src="/images/hexo/6-4.png" alt="alt"><br>配置文件修改<br><img src="/images/hexo/6-5.png" alt="alt"></p><h3 id="4、增加站点访问记录"><a href="#4、增加站点访问记录" class="headerlink" title="4、增加站点访问记录"></a>4、增加站点访问记录</h3><p>Fluid主题很好的集成了不蒜子来统计网站的访问记录。我们只需要开启即可，在主题的配置文件开启即可<br><img src="/images/hexo/6-6.png" alt="alt"><br>在站点展示效果如下图<br><img src="/images/hexo/6-7.png" alt="alt"></p><h3 id="5、增加文章作者，访问记录展示"><a href="#5、增加文章作者，访问记录展示" class="headerlink" title="5、增加文章作者，访问记录展示"></a>5、增加文章作者，访问记录展示</h3><p><img src="/images/hexo/6-8.png" alt="alt"></p><p>只需要更改这两个地方即可</p><p><img src="/images/hexo/6-10.png" alt="alt"></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>以上就是我个人博客的相关配置的修改。大家也可能根据配置文档自行修改，配置。这里仅供参考，未来页面有一些小改动的话，我就直接在这篇博客中更新维护。其他大的功能改动，我会新增一篇博客来完成。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客编写插件hexo-admin安装</title>
      <link href="/p/5d394936.html"/>
      <url>/p/5d394936.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo提供了一个图形化界面插件来帮助我们来写博客，现在了一起看看这个插件吧</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>插件的安装比较简单，一条命令即可</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-admin --save</code></pre><p>插件安装好之后，我们启动hexo<br>输入命令<br>hexo s</p><p>浏览器访问: localhost:4000/admin。界面如下图所示<br><img src="/images/hexo/5-1.png" alt="图片5-1"></p><p>左边为MarkDown格式，右边可以直接看到预览。还是非常的方便的。<br><img src="/images/hexo/5-2.png" alt="图片5-2"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这款插件总的来说还是不错的，还能看到文章的预览。但是在文字高亮，文字背景色这方面确实还差一些</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo编写博客如何插入图片</title>
      <link href="/p/9ce1e008.html"/>
      <url>/p/9ce1e008.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>编写博客的过程中，难免需要插入图片。使用Hexo如何来插入图片呢，这里推荐几种方法，我们一起来看一看。当然了，大家如果有更好的方法也可一分享出来。</p><h2 id="二、插入图片"><a href="#二、插入图片" class="headerlink" title="二、插入图片"></a>二、插入图片</h2><p>首先，我们要明白，不管使用的是那种方式，图片插入的规则如下。在方括号里面写上图片的描述，在圆括号里面放入图片的地址</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span>图片描述<span class="token punctuation">]</span><span class="token punctuation">(</span>图片地址<span class="token punctuation">)</span></code></pre><p><strong>1、使用相对路径</strong><br>在source文件夹下新建一个images文件夹，在此文件夹里面做好分类。比如说你的博客有Java专栏，Pyhton专栏。那么你就为这两个专栏各自创建一个文件夹。文件夹里面的图片也做好标识。方便以后自己寻找定位。我的文件夹如下。图片路径为 /images/hexo/4-1.png<br><img src="/images/hexo/4-1.png" alt="图片4-1"><br>这样就可以直接显示了</p><p><strong>2、使用网络资源图片</strong><br>你将一下地址复制到浏览器可以直接看到图片。同样我们可以将这种网络资源图片放在自己的博客里面<br><a href="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic3.zhimg.com%2Fv2-41e1b825c51055f39c22b95777bc620b_1200x500.jpg&amp;refer=http%3A%2F%2Fpic3.zhimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1630983837&amp;t=7c4d0a917297b151aa5088162603284f">https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic3.zhimg.com%2Fv2-41e1b825c51055f39c22b95777bc620b_1200x500.jpg&amp;refer=http%3A%2F%2Fpic3.zhimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1630983837&amp;t=7c4d0a917297b151aa5088162603284f</a></p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic3.zhimg.com%2Fv2-41e1b825c51055f39c22b95777bc620b_1200x500.jpg&refer=http%3A%2F%2Fpic3.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1630983837&t=7c4d0a917297b151aa5088162603284f" alt="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic3.zhimg.com%2Fv2-41e1b825c51055f39c22b95777bc620b_1200x500.jpg&amp;refer=http%3A%2F%2Fpic3.zhimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1630983837&amp;t=7c4d0a917297b151aa5088162603284f"></p><p>正是因为如此，很多人会搭建一个图床平台来配合Hexo使用。必经网络资源可以没有合适的图片。大多数的时候我们是自己截图保存。我们可以将截图上传到图床平台。图床平台会提供一个外部直接访问的链接。我们将链接复制过来就可以了。<br>很多人有七牛云或者别的什么平台搭建。这都是可以的。但是，大部分平台都是需要收费的，所以我还是推荐第一种方式，当然，看个人喜好吧。</p><p><strong>3、插件</strong><br>在hexo根目录下执行如下命令<br>npm install hexo-asset-image<br>安装一个图片插件<br>此时再执行命令 hexo new article_name 创建新的文章，在 source/_posts 中会生成文章 post_name.md 和同名文件夹 post_name,我们将文章中所使用到的将图片资源均放在 post_name 中，这时就可以在文章中使用相对路径引用图片资源了</p><pre class="language-none"><code class="language-none">[img_name](img_name.jpg) #文章中的图片资源路径格式。本质上和第一种差不多</code></pre><h2 id="三、文章封面图"><a href="#三、文章封面图" class="headerlink" title="三、文章封面图"></a>三、文章封面图</h2><p>如图所示，如何给我们所编写的文章怎加一个封面呢。首先一点，你要确定你的主题能不能给文章加封面。我使用的Fluid是可以给文章加封面的。方法也特别简单。在文章开头加一个index_img属性就可以了，其他主题的话，需要看相关文档。有的主题可能封面图并不用index_img这个名称</p><pre class="language-txt" data-language="txt"><code class="language-txt">---title: 四、Hexo编写博客如何插入图片author: 徐志date: &#123;&#123; date &#125;&#125;index_img: /images/hexo/2-1.pngtags:  - hexocategories:  - hexo---</code></pre><p><img src="/images/hexo/4-2.png" alt="图片4-2"></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>好了，以上几种Hexo插入图片的方法已经介绍完了，大家有什么更好的方法也可以分享出来</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写文章工具SublimeText3</title>
      <link href="/p/28cf7053.html"/>
      <url>/p/28cf7053.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>Hexo中的文章基本上都是存放在/source/_post文件夹下，我们可以根据自己的习惯在此文件夹下创建新的文件夹来帮助我们来分类管理文章。文章采用的是MarkDown格式，也就是后缀名为md的文件，你可以使用Typora来编写，你也可以使用其他工具都是可以的，只要是支持MarkDown语法的。你甚至可以在CSDN上将文章写好后，再导入过来这也是可以的。<br>我选择SublimeText3的原因是它可以之间将整个文件夹展示出来，并且提供各种插件的安装，也算是一个非常不错的工具吧</p><h2 id="二、SublimeText3安装"><a href="#二、SublimeText3安装" class="headerlink" title="二、SublimeText3安装"></a>二、SublimeText3安装</h2><p><strong>1、SublimeText3下载</strong><br>官网： <a href="http://www.sublimetext.com/3">http://www.sublimetext.com/3</a><br>SublimeText3的下载和安装没有什么可说的，下载安装程序后，傻瓜式的安装。不过唯一的缺点是，官网打开太慢了，SublimeText3安装程序总共也才10M，下载了半个小时还没下载下来，时间花费了也就算了，关键是还下载失败了。这就非常令人生气了。<br>所以我这里提供了百度云资源的链接。大家可以直接从百度云上提取。<br>链接：<a href="https://pan.baidu.com/s/1RKfPNuo8t2tg1_rUH0XLDg">https://pan.baidu.com/s/1RKfPNuo8t2tg1_rUH0XLDg</a><br>提取码：oxgh</p><p><strong>注册</strong><br>安装完成后，我们可以看到界面上显示的是未注册的一个状态。先点击状态栏的help，再点击进入enter lisence ，他跳出来一个对话框，你把下面的激活码复制进去就行了。如果一下注册码不行，大家也可一网络上找一下其他的注册码</p><pre class="language-bash" data-language="bash"><code class="language-bash">----- BEGIN LICENSE -----sgbteamSingle User LicenseEA7E-11532598891CBB9 F1513E4F 1A3405C1 A865D53F115F202E 7B91AB2D 0D2A40ED 352B269B76E84F0B CD69BFC7 59F2DFEF E267328F215652A3 E88F9D8F 4C38E3BA 5B2DAAE4969624E7 DC9CD4D5 717FB40C 1B9738CF20B3C4F1 E917B5B3 87C38D9C ACCE7DD85F7EF854 86B9743C FADC04AA FB0DA5C0F913BE58 42FEA319 F954EFDD AE881E0B------ END LICENSE ------</code></pre><p>使用SublimeText3打开文件夹页面如下图所示<br><img src="/images/hexo/3-1.png" alt="图片3-1"></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>以上这些基本足够我们开始编写博客了。但是如果你觉得这样写博客不是特别方便，你可以安装SublimeText3相关的博客编写插件达到文章预览，代码高亮等等效果。这些都需要自己慢慢摸索。我也正处于摸索的过程当中。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo如何修改主题</title>
      <link href="/p/de5d1541.html"/>
      <url>/p/de5d1541.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>使用Hexo搭建好博客后，默认主题是landspace，这个主题不算太好看，我们完全可以找一个高大上的主题来提高我们博客的格调。</p><h2 id="二、主题修改"><a href="#二、主题修改" class="headerlink" title="二、主题修改"></a>二、主题修改</h2><p><strong>1、主题寻找</strong><br>Hexo主题官网：<a href="https://hexo.io/zh-cn/docs/themes.html">https://hexo.io/zh-cn/docs/themes.html</a><br><img src="/images/hexo/2-1.png" alt="图片2-1"></p><p>点击主题，就出现如下页面，我们可以看到大概差不多有300多个主题，大家可以点进去预览以下，想要什么主题直接将压缩包下载下来就行了。大部分主题代码是托管在github上，访问不是太问题，当然了，你也可以网络上搜索一下hexo主题推荐，直接下载别人分享的主题压缩包就可以了。<br>说明一下，现在使用比较多的有next主题，matery主题，本站主题是fluid主题。<br><img src="/images/hexo/2-2.png" alt="图片2-2"></p><p><strong>2、主题配置</strong><br>将主题文件下载到theme压缩包下，解压缩一下就可以了。<br><img src="/images/hexo/2-3.png" alt="图片2-3"></p><p>找到_config.yml文件进行一下配置<br><img src="/images/hexo/2-4.png" alt="图片2-4"></p><p>修改完成后，在本地执行</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo ghexo s</code></pre><p>启动本地服务，查看配置是否生效</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>换个主题，瞬间感觉Hexo写博客高了一个档次，不过确实可能使用Hexo编写博客并没有CSDN那种在线网站方便。不过Hexo也有它的好处，我之前见过别人弄了一个简历插件，直接将简历放到了这上面，动态展示。确实不错。以下是官方配置文档的链接。<br><a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用Hexo搭建个人博客</title>
      <link href="/p/3deaca23.html"/>
      <url>/p/3deaca23.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>   作为一个从事计算机行业的人来讲，编写博客是一个非常好的习惯。一方面呢有助于自己知识的输出，另外一方面也给他人提供方便。平时我们在开发过程中，遇到问题，难免要百度或者谷歌一下。将自己的知识分享出去也是一种美德。对于在校大学生来说，写博客是你在面试上一个非常有竞争力的一个点。<br>   平时你可能想过在CSDN,掘金等等平台写过博客，但是这些平台往往广告含量较多，页面质量也不高，那么为什么不打造要给自己专属的博客平台，当然，你也可以购买一台服务器，将一套开源的博客项目部署上去，作为自己的专属博客平台，但那毕竟需要成本。<br>   使用Hexo+Gitee搭建的博客平台，说到底其实是一些静态的页面，但是看上去确是十分的美观，这么好的平台为什么不用呢，话不多说，现在开整。</p><h2 id="二、环境安装与配置"><a href="#二、环境安装与配置" class="headerlink" title="二、环境安装与配置"></a>二、环境安装与配置</h2><p><strong>1、下载Node.js</strong><br>打开官网：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a><br>官网界面如下图所示</p><p><img src="/images/hexo/1-1.png" alt="图片1-1"></p><p>下载完成后，双击安装即可。没有什么特别需要值得注意的，安装路径根据需要来进行调整.安装完成后可以自己在命令行测试一下是否安装成功<br><img src="/images/hexo/1-2.png" alt="图片1-2"></p><p><strong>2、下载Git并进行配置</strong><br>打开Git官网： <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a><br>由于我的是window系统，这里就是用window系统来做演示了<br><img src="/images/hexo/1-3.png" alt="图片1-3"><br>根据自己的系统选择下载即可。这里也不做过多的演示，傻瓜式安装，一直点击下一步即可。安装路径可以自己定义。<br>安装完成后，鼠标点击右键，出现下图则表明安装成功<br><img src="/images/hexo/1-4.png" alt="图片1-4"><br>也可以在命令行，输入==git -v==命令查看</p><p>Git安装好之后，需要对Git进行相关的配置,毕竟我们之后要将项目托管到Gitee上，当然了Github上也是可以的，国内的话github访问比较慢，也不太稳定。user.name后面是有一个空格的，需要注意。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">'xx'</span><span class="token function">git</span> config --global user.email <span class="token string">'xx'</span></code></pre><p><img src="/images/hexo/1-5.png" alt="图片1-5"></p><p>使用命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --list</code></pre><p>可以查看，是否配置成功。<br><img src="/images/hexo/1-6.png" alt="图片1-6"><br>基础配置完成之后，就是配置公钥了<br>首先要在本地创建一个ssh key 这个的目的就是你现在需要在你电脑上获得一个密匙。<br>按如下命令来生成sshkey:</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"youremail@youremail.com"</span>  </code></pre><p>连续按三次回车键即可生成ssh_key<br><img src="/images/hexo/1-7.png" alt="图片1-7"></p><p>公钥生成成功之后，我们可以用以下命令查看，并且复制下来</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t ras -C <span class="token string">'邮箱账号'</span></code></pre><p><img src="/images/hexo/1-8.png" alt="图片1-8"></p><p>登录码云或者Github，找到配置SSH的地方，在设置里面，将公钥添加进去即可。<br><img src="/images/hexo/1-9.png" alt="图片1-9"></p><p>添加完成后，那么我们的算是初步配置好了</p><p><strong>3、安装Hexo</strong><br>在本地创建一个文件夹，文件夹名称随意取，可以就叫blog<br>进入blog文件夹，鼠标右键点击git bash here。然后输入命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g</code></pre><p><img src="/images/hexo/1-10.png" alt="图片1-10"><br>等待hexo安装完成，完成之后执行一下三个命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo inithexo cleanhexo g</code></pre><p><img src="/images/hexo/1-11.png" alt="图片1-11"><br><img src="/images/hexo/1-12.png" alt="图片1-12"></p><p>接下来执行,在本地启动服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo s</code></pre><p><img src="/images/hexo/1-13.png" alt="图片1-13"><br><img src="/images/hexo/1-14.png" alt="图片1-14"></p><p>浏览器输入  localhost:4000  即可访问</p><p>相关命令介绍</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token comment">#清理缓存</span>hexo g <span class="token comment">#生成网站文件</span>hexo s <span class="token comment">#本地测试代码，Ctrl+c停止本地映射</span>hexo d <span class="token comment">#推送本地代码到码云，第一推送需要输入码云的账号密码 </span></code></pre><p>由于我们需要推送到gitee上，所以需要安装一个推送插件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-deployer-git</code></pre><p><img src="/images/hexo/1-15.png" alt="图片1-15"></p><p>至此相关的配置基本就配置好了，剩下的就是一些细节上的优化了。</p><p><strong>4、新建一个Gitee仓库</strong><br>在码云上新创建一个仓库，空库为空最好，不需要什么readme文件，也不要什么证书，不然的话你提交代码还需要解决冲突问题。仓库的名称最好和你的码云用户名一样，然后开启Gitee Page服务就可以了。</p><h2 id="三、Hexo相关的基本配置"><a href="#三、Hexo相关的基本配置" class="headerlink" title="三、Hexo相关的基本配置"></a>三、Hexo相关的基本配置</h2><p>1、找到_config.yml文件，修改配置。一个是修改语言为中文，另外一个是需要配置的仓库路径<br><img src="/images/hexo/1-16.png" alt="图片1-16"><br><img src="/images/hexo/1-17.png" alt="图片1-17"></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>以上，搭建一个Hexo的个人博客网站算是初步完成了。这一篇文章主要是讲解初步的搭建，到后面还会有相关主题的切换，样式改变，插件改变等等。好了，现在可以开启你的撰写博客之旅了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
